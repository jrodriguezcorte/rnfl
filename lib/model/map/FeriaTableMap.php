<?php



/**
 * This class defines the structure of the 'feria' table.
 *
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Thu Dec 25 22:47:30 2014
 *
 *
 * This map class is used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    propel.generator.lib.model.map
 */
class FeriaTableMap extends TableMap
{

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.FeriaTableMap';

	/**
	 * Initialize the table attributes, columns and validators
	 * Relations are not initialized by this method since they are lazy loaded
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function initialize()
	{
		// attributes
		$this->setName('feria');
		$this->setPhpName('Feria');
		$this->setClassname('Feria');
		$this->setPackage('lib.model');
		$this->setUseIdGenerator(true);
		$this->setPrimaryKeyMethodInfo('feria_id_seq');
		// columns
		$this->addPrimaryKey('ID', 'Id', 'BIGINT', true, null, null);
		$this->addColumn('NOMBRE', 'Nombre', 'VARCHAR', false, 255, null);
		$this->addColumn('LEMA', 'Lema', 'VARCHAR', false, 255, null);
		$this->addColumn('TEMA', 'Tema', 'VARCHAR', false, 255, null);
		$this->addForeignKey('ID_TIPO_FERIA', 'IdTipoFeria', 'INTEGER', 'tipo_feria', 'ID', false, null, null);
		$this->addForeignKey('ID_PAIS_HOMENAJEADO', 'IdPaisHomenajeado', 'INTEGER', 'pais', 'ID', false, null, null);
		$this->addColumn('ESCRITOR_HOMENAJEADO', 'EscritorHomenajeado', 'BOOLEAN', false, null, null);
		$this->addColumn('NOMBRE_ESCRITOR_HOMENAJEADO', 'NombreEscritorHomenajeado', 'VARCHAR', false, 255, null);
		$this->addColumn('FECHA_INICIO', 'FechaInicio', 'DATE', false, null, null);
		$this->addColumn('FECHA_FIN', 'FechaFin', 'DATE', false, null, null);
		$this->addColumn('HORA_INICIO', 'HoraInicio', 'TIMESTAMP', false, null, null);
		$this->addColumn('HORA_FIN', 'HoraFin', 'TIMESTAMP', false, null, null);
		$this->addForeignKey('ID_PAIS', 'IdPais', 'INTEGER', 'pais', 'ID', false, null, null);
		$this->addForeignKey('ID_ESTADO', 'IdEstado', 'INTEGER', 'estado', 'ID', false, null, null);
		$this->addForeignKey('ID_MUNICIPIO', 'IdMunicipio', 'INTEGER', 'municipio', 'ID', false, null, null);
		$this->addForeignKey('ID_PARROQUIA', 'IdParroquia', 'INTEGER', 'parroquia', 'ID', false, null, null);
		$this->addForeignKey('ID_REGION', 'IdRegion', 'INTEGER', 'region', 'ID', false, null, null);
		$this->addColumn('DIRECCION', 'Direccion', 'VARCHAR', false, 255, null);
		$this->addColumn('EXTENSION_SUPERFICIE', 'ExtensionSuperficie', 'DECIMAL', false, null, null);
		$this->addColumn('LIBRO_MAS_VENDIDO', 'LibroMasVendido', 'VARCHAR', false, 255, null);
		$this->addColumn('AUTOR_LIBRO_MAS_VENDIDO', 'AutorLibroMasVendido', 'VARCHAR', false, 255, null);
		$this->addColumn('COSTO', 'Costo', 'DECIMAL', false, null, null);
		// validators
	} // initialize()

	/**
	 * Build the RelationMap objects for this table relationships
	 */
	public function buildRelations()
	{
		$this->addRelation('TipoFeria', 'TipoFeria', RelationMap::MANY_TO_ONE, array('id_tipo_feria' => 'id', ), null, null);
		$this->addRelation('PaisRelatedByIdPaisHomenajeado', 'Pais', RelationMap::MANY_TO_ONE, array('id_pais_homenajeado' => 'id', ), null, null);
		$this->addRelation('PaisRelatedByIdPais', 'Pais', RelationMap::MANY_TO_ONE, array('id_pais' => 'id', ), null, null);
		$this->addRelation('Estado', 'Estado', RelationMap::MANY_TO_ONE, array('id_estado' => 'id', ), null, null);
		$this->addRelation('Municipio', 'Municipio', RelationMap::MANY_TO_ONE, array('id_municipio' => 'id', ), null, null);
		$this->addRelation('Parroquia', 'Parroquia', RelationMap::MANY_TO_ONE, array('id_parroquia' => 'id', ), null, null);
		$this->addRelation('Region', 'Region', RelationMap::MANY_TO_ONE, array('id_region' => 'id', ), null, null);
		$this->addRelation('Actividad', 'Actividad', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'Actividads');
		$this->addRelation('ExpositorFeria', 'ExpositorFeria', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'ExpositorFerias');
		$this->addRelation('ExpositorLineaeditorial', 'ExpositorLineaeditorial', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'ExpositorLineaeditorials');
		$this->addRelation('FeriaSelloeditorial', 'FeriaSelloeditorial', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'FeriaSelloeditorials');
		$this->addRelation('PagoExpositor', 'PagoExpositor', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'PagoExpositors');
		$this->addRelation('PonenteActividad', 'PonenteActividad', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'PonenteActividads');
		$this->addRelation('Stand', 'Stand', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'Stands');
		$this->addRelation('Status', 'Status', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'Statuss');
		$this->addRelation('Visitante', 'Visitante', RelationMap::ONE_TO_MANY, array('id' => 'id_feria', ), null, null, 'Visitantes');
	} // buildRelations()

	/**
	 * 
	 * Gets the list of behaviors registered for this table
	 * 
	 * @return array Associative array (name => parameters) of behaviors
	 */
	public function getBehaviors()
	{
		return array(
			'symfony' => array('form' => 'true', 'filter' => 'true', ),
			'symfony_behaviors' => array(),
		);
	} // getBehaviors()

} // FeriaTableMap
