<?php


/**
 * Base class that represents a row from the 'expositor_feria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sun Nov  9 16:04:59 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseExpositorFeria extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'ExpositorFeriaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ExpositorFeriaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the id_feria field.
	 * @var        int
	 */
	protected $id_feria;

	/**
	 * The value for the id_expositor field.
	 * @var        int
	 */
	protected $id_expositor;

	/**
	 * The value for the nombe_empresa field.
	 * @var        string
	 */
	protected $nombe_empresa;

	/**
	 * The value for the nombre_director field.
	 * @var        string
	 */
	protected $nombre_director;

	/**
	 * The value for the nombre_ejecutivo_feria field.
	 * @var        string
	 */
	protected $nombre_ejecutivo_feria;

	/**
	 * The value for the direccion field.
	 * @var        string
	 */
	protected $direccion;

	/**
	 * The value for the ciudad field.
	 * @var        string
	 */
	protected $ciudad;

	/**
	 * The value for the id_pais field.
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * The value for the telefono_local field.
	 * @var        string
	 */
	protected $telefono_local;

	/**
	 * The value for the telefono_celular field.
	 * @var        string
	 */
	protected $telefono_celular;

	/**
	 * The value for the fax field.
	 * @var        string
	 */
	protected $fax;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the sitio_web field.
	 * @var        string
	 */
	protected $sitio_web;

	/**
	 * The value for the tipo_expositor field.
	 * @var        string
	 */
	protected $tipo_expositor;

	/**
	 * The value for the otro_tipo_expositor field.
	 * @var        string
	 */
	protected $otro_tipo_expositor;

	/**
	 * The value for the numero_stand field.
	 * @var        int
	 */
	protected $numero_stand;

	/**
	 * The value for the costo_stand field.
	 * @var        string
	 */
	protected $costo_stand;

	/**
	 * The value for the metros_stand field.
	 * @var        int
	 */
	protected $metros_stand;

	/**
	 * The value for the otro_linea_editorial field.
	 * @var        string
	 */
	protected $otro_linea_editorial;

	/**
	 * The value for the libro_mas_vendido field.
	 * @var        string
	 */
	protected $libro_mas_vendido;

	/**
	 * The value for the costo_libro field.
	 * @var        string
	 */
	protected $costo_libro;

	/**
	 * The value for the cantidad_libro_vendido field.
	 * @var        int
	 */
	protected $cantidad_libro_vendido;

	/**
	 * The value for the observaciones field.
	 * @var        string
	 */
	protected $observaciones;

	/**
	 * @var        Feria
	 */
	protected $aFeria;

	/**
	 * @var        Expositor
	 */
	protected $aExpositor;

	/**
	 * @var        Pais
	 */
	protected $aPais;

	/**
	 * @var        array LineaEditorialExposiorFeria[] Collection to store aggregation of LineaEditorialExposiorFeria objects.
	 */
	protected $collLineaEditorialExposiorFerias;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [id_feria] column value.
	 * 
	 * @return     int
	 */
	public function getIdFeria()
	{
		return $this->id_feria;
	}

	/**
	 * Get the [id_expositor] column value.
	 * 
	 * @return     int
	 */
	public function getIdExpositor()
	{
		return $this->id_expositor;
	}

	/**
	 * Get the [nombe_empresa] column value.
	 * 
	 * @return     string
	 */
	public function getNombeEmpresa()
	{
		return $this->nombe_empresa;
	}

	/**
	 * Get the [nombre_director] column value.
	 * 
	 * @return     string
	 */
	public function getNombreDirector()
	{
		return $this->nombre_director;
	}

	/**
	 * Get the [nombre_ejecutivo_feria] column value.
	 * 
	 * @return     string
	 */
	public function getNombreEjecutivoFeria()
	{
		return $this->nombre_ejecutivo_feria;
	}

	/**
	 * Get the [direccion] column value.
	 * 
	 * @return     string
	 */
	public function getDireccion()
	{
		return $this->direccion;
	}

	/**
	 * Get the [ciudad] column value.
	 * 
	 * @return     string
	 */
	public function getCiudad()
	{
		return $this->ciudad;
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Get the [telefono_local] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonoLocal()
	{
		return $this->telefono_local;
	}

	/**
	 * Get the [telefono_celular] column value.
	 * 
	 * @return     string
	 */
	public function getTelefonoCelular()
	{
		return $this->telefono_celular;
	}

	/**
	 * Get the [fax] column value.
	 * 
	 * @return     string
	 */
	public function getFax()
	{
		return $this->fax;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [sitio_web] column value.
	 * 
	 * @return     string
	 */
	public function getSitioWeb()
	{
		return $this->sitio_web;
	}

	/**
	 * Get the [tipo_expositor] column value.
	 * 
	 * @return     string
	 */
	public function getTipoExpositor()
	{
		return $this->tipo_expositor;
	}

	/**
	 * Get the [otro_tipo_expositor] column value.
	 * 
	 * @return     string
	 */
	public function getOtroTipoExpositor()
	{
		return $this->otro_tipo_expositor;
	}

	/**
	 * Get the [numero_stand] column value.
	 * 
	 * @return     int
	 */
	public function getNumeroStand()
	{
		return $this->numero_stand;
	}

	/**
	 * Get the [costo_stand] column value.
	 * 
	 * @return     string
	 */
	public function getCostoStand()
	{
		return $this->costo_stand;
	}

	/**
	 * Get the [metros_stand] column value.
	 * 
	 * @return     int
	 */
	public function getMetrosStand()
	{
		return $this->metros_stand;
	}

	/**
	 * Get the [otro_linea_editorial] column value.
	 * 
	 * @return     string
	 */
	public function getOtroLineaEditorial()
	{
		return $this->otro_linea_editorial;
	}

	/**
	 * Get the [libro_mas_vendido] column value.
	 * 
	 * @return     string
	 */
	public function getLibroMasVendido()
	{
		return $this->libro_mas_vendido;
	}

	/**
	 * Get the [costo_libro] column value.
	 * 
	 * @return     string
	 */
	public function getCostoLibro()
	{
		return $this->costo_libro;
	}

	/**
	 * Get the [cantidad_libro_vendido] column value.
	 * 
	 * @return     int
	 */
	public function getCantidadLibroVendido()
	{
		return $this->cantidad_libro_vendido;
	}

	/**
	 * Get the [observaciones] column value.
	 * 
	 * @return     string
	 */
	public function getObservaciones()
	{
		return $this->observaciones;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [id_feria] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setIdFeria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_feria !== $v) {
			$this->id_feria = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::ID_FERIA;
		}

		if ($this->aFeria !== null && $this->aFeria->getId() !== $v) {
			$this->aFeria = null;
		}

		return $this;
	} // setIdFeria()

	/**
	 * Set the value of [id_expositor] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setIdExpositor($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_expositor !== $v) {
			$this->id_expositor = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::ID_EXPOSITOR;
		}

		if ($this->aExpositor !== null && $this->aExpositor->getId() !== $v) {
			$this->aExpositor = null;
		}

		return $this;
	} // setIdExpositor()

	/**
	 * Set the value of [nombe_empresa] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setNombeEmpresa($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombe_empresa !== $v) {
			$this->nombe_empresa = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::NOMBE_EMPRESA;
		}

		return $this;
	} // setNombeEmpresa()

	/**
	 * Set the value of [nombre_director] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setNombreDirector($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_director !== $v) {
			$this->nombre_director = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::NOMBRE_DIRECTOR;
		}

		return $this;
	} // setNombreDirector()

	/**
	 * Set the value of [nombre_ejecutivo_feria] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setNombreEjecutivoFeria($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_ejecutivo_feria !== $v) {
			$this->nombre_ejecutivo_feria = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::NOMBRE_EJECUTIVO_FERIA;
		}

		return $this;
	} // setNombreEjecutivoFeria()

	/**
	 * Set the value of [direccion] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setDireccion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->direccion !== $v) {
			$this->direccion = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::DIRECCION;
		}

		return $this;
	} // setDireccion()

	/**
	 * Set the value of [ciudad] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setCiudad($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ciudad !== $v) {
			$this->ciudad = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::CIUDAD;
		}

		return $this;
	} // setCiudad()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::ID_PAIS;
		}

		if ($this->aPais !== null && $this->aPais->getId() !== $v) {
			$this->aPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Set the value of [telefono_local] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setTelefonoLocal($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_local !== $v) {
			$this->telefono_local = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::TELEFONO_LOCAL;
		}

		return $this;
	} // setTelefonoLocal()

	/**
	 * Set the value of [telefono_celular] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setTelefonoCelular($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono_celular !== $v) {
			$this->telefono_celular = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::TELEFONO_CELULAR;
		}

		return $this;
	} // setTelefonoCelular()

	/**
	 * Set the value of [fax] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setFax($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->fax !== $v) {
			$this->fax = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::FAX;
		}

		return $this;
	} // setFax()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [sitio_web] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setSitioWeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sitio_web !== $v) {
			$this->sitio_web = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::SITIO_WEB;
		}

		return $this;
	} // setSitioWeb()

	/**
	 * Set the value of [tipo_expositor] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setTipoExpositor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->tipo_expositor !== $v) {
			$this->tipo_expositor = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::TIPO_EXPOSITOR;
		}

		return $this;
	} // setTipoExpositor()

	/**
	 * Set the value of [otro_tipo_expositor] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setOtroTipoExpositor($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otro_tipo_expositor !== $v) {
			$this->otro_tipo_expositor = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::OTRO_TIPO_EXPOSITOR;
		}

		return $this;
	} // setOtroTipoExpositor()

	/**
	 * Set the value of [numero_stand] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setNumeroStand($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->numero_stand !== $v) {
			$this->numero_stand = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::NUMERO_STAND;
		}

		return $this;
	} // setNumeroStand()

	/**
	 * Set the value of [costo_stand] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setCostoStand($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->costo_stand !== $v) {
			$this->costo_stand = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::COSTO_STAND;
		}

		return $this;
	} // setCostoStand()

	/**
	 * Set the value of [metros_stand] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setMetrosStand($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->metros_stand !== $v) {
			$this->metros_stand = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::METROS_STAND;
		}

		return $this;
	} // setMetrosStand()

	/**
	 * Set the value of [otro_linea_editorial] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setOtroLineaEditorial($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otro_linea_editorial !== $v) {
			$this->otro_linea_editorial = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::OTRO_LINEA_EDITORIAL;
		}

		return $this;
	} // setOtroLineaEditorial()

	/**
	 * Set the value of [libro_mas_vendido] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setLibroMasVendido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->libro_mas_vendido !== $v) {
			$this->libro_mas_vendido = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::LIBRO_MAS_VENDIDO;
		}

		return $this;
	} // setLibroMasVendido()

	/**
	 * Set the value of [costo_libro] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setCostoLibro($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->costo_libro !== $v) {
			$this->costo_libro = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::COSTO_LIBRO;
		}

		return $this;
	} // setCostoLibro()

	/**
	 * Set the value of [cantidad_libro_vendido] column.
	 * 
	 * @param      int $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setCantidadLibroVendido($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cantidad_libro_vendido !== $v) {
			$this->cantidad_libro_vendido = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO;
		}

		return $this;
	} // setCantidadLibroVendido()

	/**
	 * Set the value of [observaciones] column.
	 * 
	 * @param      string $v new value
	 * @return     ExpositorFeria The current object (for fluent API support)
	 */
	public function setObservaciones($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->observaciones !== $v) {
			$this->observaciones = $v;
			$this->modifiedColumns[] = ExpositorFeriaPeer::OBSERVACIONES;
		}

		return $this;
	} // setObservaciones()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->id_feria = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_expositor = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nombe_empresa = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->nombre_director = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->nombre_ejecutivo_feria = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->direccion = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->ciudad = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->id_pais = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->telefono_local = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->telefono_celular = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->fax = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->email = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->sitio_web = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->tipo_expositor = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->otro_tipo_expositor = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->numero_stand = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->costo_stand = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->metros_stand = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->otro_linea_editorial = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->libro_mas_vendido = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->costo_libro = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->cantidad_libro_vendido = ($row[$startcol + 22] !== null) ? (int) $row[$startcol + 22] : null;
			$this->observaciones = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 24; // 24 = ExpositorFeriaPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating ExpositorFeria object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aFeria !== null && $this->id_feria !== $this->aFeria->getId()) {
			$this->aFeria = null;
		}
		if ($this->aExpositor !== null && $this->id_expositor !== $this->aExpositor->getId()) {
			$this->aExpositor = null;
		}
		if ($this->aPais !== null && $this->id_pais !== $this->aPais->getId()) {
			$this->aPais = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExpositorFeriaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ExpositorFeriaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aFeria = null;
			$this->aExpositor = null;
			$this->aPais = null;
			$this->collLineaEditorialExposiorFerias = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExpositorFeriaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseExpositorFeria:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				ExpositorFeriaQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseExpositorFeria:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ExpositorFeriaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseExpositorFeria:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseExpositorFeria:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ExpositorFeriaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aFeria !== null) {
				if ($this->aFeria->isModified() || $this->aFeria->isNew()) {
					$affectedRows += $this->aFeria->save($con);
				}
				$this->setFeria($this->aFeria);
			}

			if ($this->aExpositor !== null) {
				if ($this->aExpositor->isModified() || $this->aExpositor->isNew()) {
					$affectedRows += $this->aExpositor->save($con);
				}
				$this->setExpositor($this->aExpositor);
			}

			if ($this->aPais !== null) {
				if ($this->aPais->isModified() || $this->aPais->isNew()) {
					$affectedRows += $this->aPais->save($con);
				}
				$this->setPais($this->aPais);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ExpositorFeriaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(ExpositorFeriaPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.ExpositorFeriaPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += ExpositorFeriaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collLineaEditorialExposiorFerias !== null) {
				foreach ($this->collLineaEditorialExposiorFerias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aFeria !== null) {
				if (!$this->aFeria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFeria->getValidationFailures());
				}
			}

			if ($this->aExpositor !== null) {
				if (!$this->aExpositor->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aExpositor->getValidationFailures());
				}
			}

			if ($this->aPais !== null) {
				if (!$this->aPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
				}
			}


			if (($retval = ExpositorFeriaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collLineaEditorialExposiorFerias !== null) {
					foreach ($this->collLineaEditorialExposiorFerias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ExpositorFeriaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getIdFeria();
				break;
			case 2:
				return $this->getIdExpositor();
				break;
			case 3:
				return $this->getNombeEmpresa();
				break;
			case 4:
				return $this->getNombreDirector();
				break;
			case 5:
				return $this->getNombreEjecutivoFeria();
				break;
			case 6:
				return $this->getDireccion();
				break;
			case 7:
				return $this->getCiudad();
				break;
			case 8:
				return $this->getIdPais();
				break;
			case 9:
				return $this->getTelefonoLocal();
				break;
			case 10:
				return $this->getTelefonoCelular();
				break;
			case 11:
				return $this->getFax();
				break;
			case 12:
				return $this->getEmail();
				break;
			case 13:
				return $this->getSitioWeb();
				break;
			case 14:
				return $this->getTipoExpositor();
				break;
			case 15:
				return $this->getOtroTipoExpositor();
				break;
			case 16:
				return $this->getNumeroStand();
				break;
			case 17:
				return $this->getCostoStand();
				break;
			case 18:
				return $this->getMetrosStand();
				break;
			case 19:
				return $this->getOtroLineaEditorial();
				break;
			case 20:
				return $this->getLibroMasVendido();
				break;
			case 21:
				return $this->getCostoLibro();
				break;
			case 22:
				return $this->getCantidadLibroVendido();
				break;
			case 23:
				return $this->getObservaciones();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['ExpositorFeria'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['ExpositorFeria'][$this->getPrimaryKey()] = true;
		$keys = ExpositorFeriaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getIdFeria(),
			$keys[2] => $this->getIdExpositor(),
			$keys[3] => $this->getNombeEmpresa(),
			$keys[4] => $this->getNombreDirector(),
			$keys[5] => $this->getNombreEjecutivoFeria(),
			$keys[6] => $this->getDireccion(),
			$keys[7] => $this->getCiudad(),
			$keys[8] => $this->getIdPais(),
			$keys[9] => $this->getTelefonoLocal(),
			$keys[10] => $this->getTelefonoCelular(),
			$keys[11] => $this->getFax(),
			$keys[12] => $this->getEmail(),
			$keys[13] => $this->getSitioWeb(),
			$keys[14] => $this->getTipoExpositor(),
			$keys[15] => $this->getOtroTipoExpositor(),
			$keys[16] => $this->getNumeroStand(),
			$keys[17] => $this->getCostoStand(),
			$keys[18] => $this->getMetrosStand(),
			$keys[19] => $this->getOtroLineaEditorial(),
			$keys[20] => $this->getLibroMasVendido(),
			$keys[21] => $this->getCostoLibro(),
			$keys[22] => $this->getCantidadLibroVendido(),
			$keys[23] => $this->getObservaciones(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aFeria) {
				$result['Feria'] = $this->aFeria->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aExpositor) {
				$result['Expositor'] = $this->aExpositor->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aPais) {
				$result['Pais'] = $this->aPais->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->collLineaEditorialExposiorFerias) {
				$result['LineaEditorialExposiorFerias'] = $this->collLineaEditorialExposiorFerias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ExpositorFeriaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setIdFeria($value);
				break;
			case 2:
				$this->setIdExpositor($value);
				break;
			case 3:
				$this->setNombeEmpresa($value);
				break;
			case 4:
				$this->setNombreDirector($value);
				break;
			case 5:
				$this->setNombreEjecutivoFeria($value);
				break;
			case 6:
				$this->setDireccion($value);
				break;
			case 7:
				$this->setCiudad($value);
				break;
			case 8:
				$this->setIdPais($value);
				break;
			case 9:
				$this->setTelefonoLocal($value);
				break;
			case 10:
				$this->setTelefonoCelular($value);
				break;
			case 11:
				$this->setFax($value);
				break;
			case 12:
				$this->setEmail($value);
				break;
			case 13:
				$this->setSitioWeb($value);
				break;
			case 14:
				$this->setTipoExpositor($value);
				break;
			case 15:
				$this->setOtroTipoExpositor($value);
				break;
			case 16:
				$this->setNumeroStand($value);
				break;
			case 17:
				$this->setCostoStand($value);
				break;
			case 18:
				$this->setMetrosStand($value);
				break;
			case 19:
				$this->setOtroLineaEditorial($value);
				break;
			case 20:
				$this->setLibroMasVendido($value);
				break;
			case 21:
				$this->setCostoLibro($value);
				break;
			case 22:
				$this->setCantidadLibroVendido($value);
				break;
			case 23:
				$this->setObservaciones($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ExpositorFeriaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdFeria($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdExpositor($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNombeEmpresa($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setNombreDirector($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setNombreEjecutivoFeria($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setDireccion($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCiudad($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdPais($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTelefonoLocal($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTelefonoCelular($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFax($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setEmail($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setSitioWeb($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setTipoExpositor($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setOtroTipoExpositor($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setNumeroStand($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCostoStand($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setMetrosStand($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOtroLineaEditorial($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setLibroMasVendido($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setCostoLibro($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCantidadLibroVendido($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setObservaciones($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ExpositorFeriaPeer::DATABASE_NAME);

		if ($this->isColumnModified(ExpositorFeriaPeer::ID)) $criteria->add(ExpositorFeriaPeer::ID, $this->id);
		if ($this->isColumnModified(ExpositorFeriaPeer::ID_FERIA)) $criteria->add(ExpositorFeriaPeer::ID_FERIA, $this->id_feria);
		if ($this->isColumnModified(ExpositorFeriaPeer::ID_EXPOSITOR)) $criteria->add(ExpositorFeriaPeer::ID_EXPOSITOR, $this->id_expositor);
		if ($this->isColumnModified(ExpositorFeriaPeer::NOMBE_EMPRESA)) $criteria->add(ExpositorFeriaPeer::NOMBE_EMPRESA, $this->nombe_empresa);
		if ($this->isColumnModified(ExpositorFeriaPeer::NOMBRE_DIRECTOR)) $criteria->add(ExpositorFeriaPeer::NOMBRE_DIRECTOR, $this->nombre_director);
		if ($this->isColumnModified(ExpositorFeriaPeer::NOMBRE_EJECUTIVO_FERIA)) $criteria->add(ExpositorFeriaPeer::NOMBRE_EJECUTIVO_FERIA, $this->nombre_ejecutivo_feria);
		if ($this->isColumnModified(ExpositorFeriaPeer::DIRECCION)) $criteria->add(ExpositorFeriaPeer::DIRECCION, $this->direccion);
		if ($this->isColumnModified(ExpositorFeriaPeer::CIUDAD)) $criteria->add(ExpositorFeriaPeer::CIUDAD, $this->ciudad);
		if ($this->isColumnModified(ExpositorFeriaPeer::ID_PAIS)) $criteria->add(ExpositorFeriaPeer::ID_PAIS, $this->id_pais);
		if ($this->isColumnModified(ExpositorFeriaPeer::TELEFONO_LOCAL)) $criteria->add(ExpositorFeriaPeer::TELEFONO_LOCAL, $this->telefono_local);
		if ($this->isColumnModified(ExpositorFeriaPeer::TELEFONO_CELULAR)) $criteria->add(ExpositorFeriaPeer::TELEFONO_CELULAR, $this->telefono_celular);
		if ($this->isColumnModified(ExpositorFeriaPeer::FAX)) $criteria->add(ExpositorFeriaPeer::FAX, $this->fax);
		if ($this->isColumnModified(ExpositorFeriaPeer::EMAIL)) $criteria->add(ExpositorFeriaPeer::EMAIL, $this->email);
		if ($this->isColumnModified(ExpositorFeriaPeer::SITIO_WEB)) $criteria->add(ExpositorFeriaPeer::SITIO_WEB, $this->sitio_web);
		if ($this->isColumnModified(ExpositorFeriaPeer::TIPO_EXPOSITOR)) $criteria->add(ExpositorFeriaPeer::TIPO_EXPOSITOR, $this->tipo_expositor);
		if ($this->isColumnModified(ExpositorFeriaPeer::OTRO_TIPO_EXPOSITOR)) $criteria->add(ExpositorFeriaPeer::OTRO_TIPO_EXPOSITOR, $this->otro_tipo_expositor);
		if ($this->isColumnModified(ExpositorFeriaPeer::NUMERO_STAND)) $criteria->add(ExpositorFeriaPeer::NUMERO_STAND, $this->numero_stand);
		if ($this->isColumnModified(ExpositorFeriaPeer::COSTO_STAND)) $criteria->add(ExpositorFeriaPeer::COSTO_STAND, $this->costo_stand);
		if ($this->isColumnModified(ExpositorFeriaPeer::METROS_STAND)) $criteria->add(ExpositorFeriaPeer::METROS_STAND, $this->metros_stand);
		if ($this->isColumnModified(ExpositorFeriaPeer::OTRO_LINEA_EDITORIAL)) $criteria->add(ExpositorFeriaPeer::OTRO_LINEA_EDITORIAL, $this->otro_linea_editorial);
		if ($this->isColumnModified(ExpositorFeriaPeer::LIBRO_MAS_VENDIDO)) $criteria->add(ExpositorFeriaPeer::LIBRO_MAS_VENDIDO, $this->libro_mas_vendido);
		if ($this->isColumnModified(ExpositorFeriaPeer::COSTO_LIBRO)) $criteria->add(ExpositorFeriaPeer::COSTO_LIBRO, $this->costo_libro);
		if ($this->isColumnModified(ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO)) $criteria->add(ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO, $this->cantidad_libro_vendido);
		if ($this->isColumnModified(ExpositorFeriaPeer::OBSERVACIONES)) $criteria->add(ExpositorFeriaPeer::OBSERVACIONES, $this->observaciones);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ExpositorFeriaPeer::DATABASE_NAME);
		$criteria->add(ExpositorFeriaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ExpositorFeria (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setIdFeria($this->getIdFeria());
		$copyObj->setIdExpositor($this->getIdExpositor());
		$copyObj->setNombeEmpresa($this->getNombeEmpresa());
		$copyObj->setNombreDirector($this->getNombreDirector());
		$copyObj->setNombreEjecutivoFeria($this->getNombreEjecutivoFeria());
		$copyObj->setDireccion($this->getDireccion());
		$copyObj->setCiudad($this->getCiudad());
		$copyObj->setIdPais($this->getIdPais());
		$copyObj->setTelefonoLocal($this->getTelefonoLocal());
		$copyObj->setTelefonoCelular($this->getTelefonoCelular());
		$copyObj->setFax($this->getFax());
		$copyObj->setEmail($this->getEmail());
		$copyObj->setSitioWeb($this->getSitioWeb());
		$copyObj->setTipoExpositor($this->getTipoExpositor());
		$copyObj->setOtroTipoExpositor($this->getOtroTipoExpositor());
		$copyObj->setNumeroStand($this->getNumeroStand());
		$copyObj->setCostoStand($this->getCostoStand());
		$copyObj->setMetrosStand($this->getMetrosStand());
		$copyObj->setOtroLineaEditorial($this->getOtroLineaEditorial());
		$copyObj->setLibroMasVendido($this->getLibroMasVendido());
		$copyObj->setCostoLibro($this->getCostoLibro());
		$copyObj->setCantidadLibroVendido($this->getCantidadLibroVendido());
		$copyObj->setObservaciones($this->getObservaciones());

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getLineaEditorialExposiorFerias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addLineaEditorialExposiorFeria($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ExpositorFeria Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ExpositorFeriaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ExpositorFeriaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Feria object.
	 *
	 * @param      Feria $v
	 * @return     ExpositorFeria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFeria(Feria $v = null)
	{
		if ($v === null) {
			$this->setIdFeria(NULL);
		} else {
			$this->setIdFeria($v->getId());
		}

		$this->aFeria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Feria object, it will not be re-added.
		if ($v !== null) {
			$v->addExpositorFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Feria object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Feria The associated Feria object.
	 * @throws     PropelException
	 */
	public function getFeria(PropelPDO $con = null)
	{
		if ($this->aFeria === null && ($this->id_feria !== null)) {
			$this->aFeria = FeriaQuery::create()->findPk($this->id_feria, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aFeria->addExpositorFerias($this);
			 */
		}
		return $this->aFeria;
	}

	/**
	 * Declares an association between this object and a Expositor object.
	 *
	 * @param      Expositor $v
	 * @return     ExpositorFeria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setExpositor(Expositor $v = null)
	{
		if ($v === null) {
			$this->setIdExpositor(NULL);
		} else {
			$this->setIdExpositor($v->getId());
		}

		$this->aExpositor = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Expositor object, it will not be re-added.
		if ($v !== null) {
			$v->addExpositorFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Expositor object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Expositor The associated Expositor object.
	 * @throws     PropelException
	 */
	public function getExpositor(PropelPDO $con = null)
	{
		if ($this->aExpositor === null && ($this->id_expositor !== null)) {
			$this->aExpositor = ExpositorQuery::create()->findPk($this->id_expositor, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aExpositor->addExpositorFerias($this);
			 */
		}
		return $this->aExpositor;
	}

	/**
	 * Declares an association between this object and a Pais object.
	 *
	 * @param      Pais $v
	 * @return     ExpositorFeria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPais(Pais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(NULL);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pais object, it will not be re-added.
		if ($v !== null) {
			$v->addExpositorFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pais The associated Pais object.
	 * @throws     PropelException
	 */
	public function getPais(PropelPDO $con = null)
	{
		if ($this->aPais === null && ($this->id_pais !== null)) {
			$this->aPais = PaisQuery::create()->findPk($this->id_pais, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aPais->addExpositorFerias($this);
			 */
		}
		return $this->aPais;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name 
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('LineaEditorialExposiorFeria' == $relationName) {
			return $this->initLineaEditorialExposiorFerias();
		}
	}

	/**
	 * Clears out the collLineaEditorialExposiorFerias collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addLineaEditorialExposiorFerias()
	 */
	public function clearLineaEditorialExposiorFerias()
	{
		$this->collLineaEditorialExposiorFerias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collLineaEditorialExposiorFerias collection.
	 *
	 * By default this just sets the collLineaEditorialExposiorFerias collection to an empty array (like clearcollLineaEditorialExposiorFerias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initLineaEditorialExposiorFerias($overrideExisting = true)
	{
		if (null !== $this->collLineaEditorialExposiorFerias && !$overrideExisting) {
			return;
		}
		$this->collLineaEditorialExposiorFerias = new PropelObjectCollection();
		$this->collLineaEditorialExposiorFerias->setModel('LineaEditorialExposiorFeria');
	}

	/**
	 * Gets an array of LineaEditorialExposiorFeria objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this ExpositorFeria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array LineaEditorialExposiorFeria[] List of LineaEditorialExposiorFeria objects
	 * @throws     PropelException
	 */
	public function getLineaEditorialExposiorFerias($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collLineaEditorialExposiorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collLineaEditorialExposiorFerias) {
				// return empty collection
				$this->initLineaEditorialExposiorFerias();
			} else {
				$collLineaEditorialExposiorFerias = LineaEditorialExposiorFeriaQuery::create(null, $criteria)
					->filterByExpositorFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collLineaEditorialExposiorFerias;
				}
				$this->collLineaEditorialExposiorFerias = $collLineaEditorialExposiorFerias;
			}
		}
		return $this->collLineaEditorialExposiorFerias;
	}

	/**
	 * Returns the number of related LineaEditorialExposiorFeria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related LineaEditorialExposiorFeria objects.
	 * @throws     PropelException
	 */
	public function countLineaEditorialExposiorFerias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collLineaEditorialExposiorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collLineaEditorialExposiorFerias) {
				return 0;
			} else {
				$query = LineaEditorialExposiorFeriaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByExpositorFeria($this)
					->count($con);
			}
		} else {
			return count($this->collLineaEditorialExposiorFerias);
		}
	}

	/**
	 * Method called to associate a LineaEditorialExposiorFeria object to this object
	 * through the LineaEditorialExposiorFeria foreign key attribute.
	 *
	 * @param      LineaEditorialExposiorFeria $l LineaEditorialExposiorFeria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addLineaEditorialExposiorFeria(LineaEditorialExposiorFeria $l)
	{
		if ($this->collLineaEditorialExposiorFerias === null) {
			$this->initLineaEditorialExposiorFerias();
		}
		if (!$this->collLineaEditorialExposiorFerias->contains($l)) { // only add it if the **same** object is not already associated
			$this->collLineaEditorialExposiorFerias[]= $l;
			$l->setExpositorFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ExpositorFeria is new, it will return
	 * an empty collection; or if this ExpositorFeria has previously
	 * been saved, it will retrieve related LineaEditorialExposiorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ExpositorFeria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array LineaEditorialExposiorFeria[] List of LineaEditorialExposiorFeria objects
	 */
	public function getLineaEditorialExposiorFeriasJoinLineaEditorial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = LineaEditorialExposiorFeriaQuery::create(null, $criteria);
		$query->joinWith('LineaEditorial', $join_behavior);

		return $this->getLineaEditorialExposiorFerias($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->id_feria = null;
		$this->id_expositor = null;
		$this->nombe_empresa = null;
		$this->nombre_director = null;
		$this->nombre_ejecutivo_feria = null;
		$this->direccion = null;
		$this->ciudad = null;
		$this->id_pais = null;
		$this->telefono_local = null;
		$this->telefono_celular = null;
		$this->fax = null;
		$this->email = null;
		$this->sitio_web = null;
		$this->tipo_expositor = null;
		$this->otro_tipo_expositor = null;
		$this->numero_stand = null;
		$this->costo_stand = null;
		$this->metros_stand = null;
		$this->otro_linea_editorial = null;
		$this->libro_mas_vendido = null;
		$this->costo_libro = null;
		$this->cantidad_libro_vendido = null;
		$this->observaciones = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collLineaEditorialExposiorFerias) {
				foreach ($this->collLineaEditorialExposiorFerias as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collLineaEditorialExposiorFerias instanceof PropelCollection) {
			$this->collLineaEditorialExposiorFerias->clearIterator();
		}
		$this->collLineaEditorialExposiorFerias = null;
		$this->aFeria = null;
		$this->aExpositor = null;
		$this->aPais = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(ExpositorFeriaPeer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseExpositorFeria:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseExpositorFeria
