<?php


/**
 * Base class that represents a row from the 'actividad_finalizada' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Fri May  1 16:52:43 2015
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividadFinalizada extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'ActividadFinalizadaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ActividadFinalizadaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the id_actividad field.
	 * @var        int
	 */
	protected $id_actividad;

	/**
	 * The value for the id_feria field.
	 * @var        int
	 */
	protected $id_feria;

	/**
	 * The value for the nombre_responsable field.
	 * @var        string
	 */
	protected $nombre_responsable;

	/**
	 * The value for the fecha_ejecucion field.
	 * @var        string
	 */
	protected $fecha_ejecucion;

	/**
	 * The value for the hora_ejecucion field.
	 * @var        string
	 */
	protected $hora_ejecucion;

	/**
	 * The value for the hora_fin_ejecucion field.
	 * @var        string
	 */
	protected $hora_fin_ejecucion;

	/**
	 * The value for the participantes_m field.
	 * @var        int
	 */
	protected $participantes_m;

	/**
	 * The value for the participantes_f field.
	 * @var        int
	 */
	protected $participantes_f;

	/**
	 * The value for the total field.
	 * @var        int
	 */
	protected $total;

	/**
	 * The value for the evento_publico field.
	 * @var        boolean
	 */
	protected $evento_publico;

	/**
	 * The value for the otro_incumplimiento field.
	 * @var        string
	 */
	protected $otro_incumplimiento;

	/**
	 * The value for the nombre_institucion field.
	 * @var        string
	 */
	protected $nombre_institucion;

	/**
	 * The value for the id_pais field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * The value for the id_estado field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_estado;

	/**
	 * The value for the id_municipio field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_municipio;

	/**
	 * The value for the id_parroquia field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_parroquia;

	/**
	 * The value for the id_region field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $id_region;

	/**
	 * The value for the incluir_info_geografica field.
	 * @var        boolean
	 */
	protected $incluir_info_geografica;

	/**
	 * The value for the id_usuario field.
	 * @var        int
	 */
	protected $id_usuario;

	/**
	 * @var        Actividad
	 */
	protected $aActividad;

	/**
	 * @var        Feria
	 */
	protected $aFeria;

	/**
	 * @var        Pais
	 */
	protected $aPais;

	/**
	 * @var        Estado
	 */
	protected $aEstado;

	/**
	 * @var        Municipio
	 */
	protected $aMunicipio;

	/**
	 * @var        Parroquia
	 */
	protected $aParroquia;

	/**
	 * @var        Region
	 */
	protected $aRegion;

	/**
	 * @var        Usuario
	 */
	protected $aUsuario;

	/**
	 * @var        array IncumplmientoActividadFinalizada[] Collection to store aggregation of IncumplmientoActividadFinalizada objects.
	 */
	protected $collIncumplmientoActividadFinalizadas;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->id_pais = 1;
		$this->id_estado = 1;
		$this->id_municipio = 1;
		$this->id_parroquia = 1;
		$this->id_region = 1;
	}

	/**
	 * Initializes internal state of BaseActividadFinalizada object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [id_actividad] column value.
	 * 
	 * @return     int
	 */
	public function getIdActividad()
	{
		return $this->id_actividad;
	}

	/**
	 * Get the [id_feria] column value.
	 * 
	 * @return     int
	 */
	public function getIdFeria()
	{
		return $this->id_feria;
	}

	/**
	 * Get the [nombre_responsable] column value.
	 * 
	 * @return     string
	 */
	public function getNombreResponsable()
	{
		return $this->nombre_responsable;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_ejecucion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaEjecucion($format = 'Y-m-d')
	{
		if ($this->fecha_ejecucion === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_ejecucion);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_ejecucion, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_ejecucion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraEjecucion($format = 'H:i:s')
	{
		if ($this->hora_ejecucion === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_ejecucion);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_ejecucion, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [hora_fin_ejecucion] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getHoraFinEjecucion($format = 'H:i:s')
	{
		if ($this->hora_fin_ejecucion === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->hora_fin_ejecucion);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->hora_fin_ejecucion, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [participantes_m] column value.
	 * 
	 * @return     int
	 */
	public function getParticipantesM()
	{
		return $this->participantes_m;
	}

	/**
	 * Get the [participantes_f] column value.
	 * 
	 * @return     int
	 */
	public function getParticipantesF()
	{
		return $this->participantes_f;
	}

	/**
	 * Get the [total] column value.
	 * 
	 * @return     int
	 */
	public function getTotal()
	{
		return $this->total;
	}

	/**
	 * Get the [evento_publico] column value.
	 * 
	 * @return     boolean
	 */
	public function getEventoPublico()
	{
		return $this->evento_publico;
	}

	/**
	 * Get the [otro_incumplimiento] column value.
	 * 
	 * @return     string
	 */
	public function getOtroIncumplimiento()
	{
		return $this->otro_incumplimiento;
	}

	/**
	 * Get the [nombre_institucion] column value.
	 * 
	 * @return     string
	 */
	public function getNombreInstitucion()
	{
		return $this->nombre_institucion;
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Get the [id_estado] column value.
	 * 
	 * @return     int
	 */
	public function getIdEstado()
	{
		return $this->id_estado;
	}

	/**
	 * Get the [id_municipio] column value.
	 * 
	 * @return     int
	 */
	public function getIdMunicipio()
	{
		return $this->id_municipio;
	}

	/**
	 * Get the [id_parroquia] column value.
	 * 
	 * @return     int
	 */
	public function getIdParroquia()
	{
		return $this->id_parroquia;
	}

	/**
	 * Get the [id_region] column value.
	 * 
	 * @return     int
	 */
	public function getIdRegion()
	{
		return $this->id_region;
	}

	/**
	 * Get the [incluir_info_geografica] column value.
	 * 
	 * @return     boolean
	 */
	public function getIncluirInfoGeografica()
	{
		return $this->incluir_info_geografica;
	}

	/**
	 * Get the [id_usuario] column value.
	 * 
	 * @return     int
	 */
	public function getIdUsuario()
	{
		return $this->id_usuario;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [id_actividad] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdActividad($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_actividad !== $v) {
			$this->id_actividad = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_ACTIVIDAD;
		}

		if ($this->aActividad !== null && $this->aActividad->getId() !== $v) {
			$this->aActividad = null;
		}

		return $this;
	} // setIdActividad()

	/**
	 * Set the value of [id_feria] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdFeria($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_feria !== $v) {
			$this->id_feria = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_FERIA;
		}

		if ($this->aFeria !== null && $this->aFeria->getId() !== $v) {
			$this->aFeria = null;
		}

		return $this;
	} // setIdFeria()

	/**
	 * Set the value of [nombre_responsable] column.
	 * 
	 * @param      string $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setNombreResponsable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_responsable !== $v) {
			$this->nombre_responsable = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::NOMBRE_RESPONSABLE;
		}

		return $this;
	} // setNombreResponsable()

	/**
	 * Sets the value of [fecha_ejecucion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setFechaEjecucion($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->fecha_ejecucion !== null || $dt !== null) {
			$currentDateAsString = ($this->fecha_ejecucion !== null && $tmpDt = new DateTime($this->fecha_ejecucion)) ? $tmpDt->format('Y-m-d') : null;
			$newDateAsString = $dt ? $dt->format('Y-m-d') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->fecha_ejecucion = $newDateAsString;
				$this->modifiedColumns[] = ActividadFinalizadaPeer::FECHA_EJECUCION;
			}
		} // if either are not null

		return $this;
	} // setFechaEjecucion()

	/**
	 * Sets the value of [hora_ejecucion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setHoraEjecucion($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->hora_ejecucion !== null || $dt !== null) {
			$currentDateAsString = ($this->hora_ejecucion !== null && $tmpDt = new DateTime($this->hora_ejecucion)) ? $tmpDt->format('H:i:s') : null;
			$newDateAsString = $dt ? $dt->format('H:i:s') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->hora_ejecucion = $newDateAsString;
				$this->modifiedColumns[] = ActividadFinalizadaPeer::HORA_EJECUCION;
			}
		} // if either are not null

		return $this;
	} // setHoraEjecucion()

	/**
	 * Sets the value of [hora_fin_ejecucion] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setHoraFinEjecucion($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->hora_fin_ejecucion !== null || $dt !== null) {
			$currentDateAsString = ($this->hora_fin_ejecucion !== null && $tmpDt = new DateTime($this->hora_fin_ejecucion)) ? $tmpDt->format('H:i:s') : null;
			$newDateAsString = $dt ? $dt->format('H:i:s') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->hora_fin_ejecucion = $newDateAsString;
				$this->modifiedColumns[] = ActividadFinalizadaPeer::HORA_FIN_EJECUCION;
			}
		} // if either are not null

		return $this;
	} // setHoraFinEjecucion()

	/**
	 * Set the value of [participantes_m] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setParticipantesM($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->participantes_m !== $v) {
			$this->participantes_m = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::PARTICIPANTES_M;
		}

		return $this;
	} // setParticipantesM()

	/**
	 * Set the value of [participantes_f] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setParticipantesF($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->participantes_f !== $v) {
			$this->participantes_f = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::PARTICIPANTES_F;
		}

		return $this;
	} // setParticipantesF()

	/**
	 * Set the value of [total] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setTotal($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->total !== $v) {
			$this->total = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::TOTAL;
		}

		return $this;
	} // setTotal()

	/**
	 * Sets the value of the [evento_publico] column. 
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setEventoPublico($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->evento_publico !== $v) {
			$this->evento_publico = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::EVENTO_PUBLICO;
		}

		return $this;
	} // setEventoPublico()

	/**
	 * Set the value of [otro_incumplimiento] column.
	 * 
	 * @param      string $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setOtroIncumplimiento($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->otro_incumplimiento !== $v) {
			$this->otro_incumplimiento = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::OTRO_INCUMPLIMIENTO;
		}

		return $this;
	} // setOtroIncumplimiento()

	/**
	 * Set the value of [nombre_institucion] column.
	 * 
	 * @param      string $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setNombreInstitucion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre_institucion !== $v) {
			$this->nombre_institucion = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::NOMBRE_INSTITUCION;
		}

		return $this;
	} // setNombreInstitucion()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v || $this->isNew()) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_PAIS;
		}

		if ($this->aPais !== null && $this->aPais->getId() !== $v) {
			$this->aPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Set the value of [id_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_estado !== $v || $this->isNew()) {
			$this->id_estado = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_ESTADO;
		}

		if ($this->aEstado !== null && $this->aEstado->getId() !== $v) {
			$this->aEstado = null;
		}

		return $this;
	} // setIdEstado()

	/**
	 * Set the value of [id_municipio] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdMunicipio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_municipio !== $v || $this->isNew()) {
			$this->id_municipio = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_MUNICIPIO;
		}

		if ($this->aMunicipio !== null && $this->aMunicipio->getId() !== $v) {
			$this->aMunicipio = null;
		}

		return $this;
	} // setIdMunicipio()

	/**
	 * Set the value of [id_parroquia] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdParroquia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_parroquia !== $v || $this->isNew()) {
			$this->id_parroquia = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_PARROQUIA;
		}

		if ($this->aParroquia !== null && $this->aParroquia->getId() !== $v) {
			$this->aParroquia = null;
		}

		return $this;
	} // setIdParroquia()

	/**
	 * Set the value of [id_region] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdRegion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_region !== $v || $this->isNew()) {
			$this->id_region = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_REGION;
		}

		if ($this->aRegion !== null && $this->aRegion->getId() !== $v) {
			$this->aRegion = null;
		}

		return $this;
	} // setIdRegion()

	/**
	 * Sets the value of the [incluir_info_geografica] column. 
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIncluirInfoGeografica($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->incluir_info_geografica !== $v) {
			$this->incluir_info_geografica = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::INCLUIR_INFO_GEOGRAFICA;
		}

		return $this;
	} // setIncluirInfoGeografica()

	/**
	 * Set the value of [id_usuario] column.
	 * 
	 * @param      int $v new value
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 */
	public function setIdUsuario($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_usuario !== $v) {
			$this->id_usuario = $v;
			$this->modifiedColumns[] = ActividadFinalizadaPeer::ID_USUARIO;
		}

		if ($this->aUsuario !== null && $this->aUsuario->getId() !== $v) {
			$this->aUsuario = null;
		}

		return $this;
	} // setIdUsuario()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->id_pais !== 1) {
				return false;
			}

			if ($this->id_estado !== 1) {
				return false;
			}

			if ($this->id_municipio !== 1) {
				return false;
			}

			if ($this->id_parroquia !== 1) {
				return false;
			}

			if ($this->id_region !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->id_actividad = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->id_feria = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->nombre_responsable = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->fecha_ejecucion = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->hora_ejecucion = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->hora_fin_ejecucion = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->participantes_m = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->participantes_f = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->total = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->evento_publico = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->otro_incumplimiento = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->nombre_institucion = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->id_pais = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->id_estado = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->id_municipio = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->id_parroquia = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->id_region = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->incluir_info_geografica = ($row[$startcol + 18] !== null) ? (boolean) $row[$startcol + 18] : null;
			$this->id_usuario = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 20; // 20 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating ActividadFinalizada object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aActividad !== null && $this->id_actividad !== $this->aActividad->getId()) {
			$this->aActividad = null;
		}
		if ($this->aFeria !== null && $this->id_feria !== $this->aFeria->getId()) {
			$this->aFeria = null;
		}
		if ($this->aPais !== null && $this->id_pais !== $this->aPais->getId()) {
			$this->aPais = null;
		}
		if ($this->aEstado !== null && $this->id_estado !== $this->aEstado->getId()) {
			$this->aEstado = null;
		}
		if ($this->aMunicipio !== null && $this->id_municipio !== $this->aMunicipio->getId()) {
			$this->aMunicipio = null;
		}
		if ($this->aParroquia !== null && $this->id_parroquia !== $this->aParroquia->getId()) {
			$this->aParroquia = null;
		}
		if ($this->aRegion !== null && $this->id_region !== $this->aRegion->getId()) {
			$this->aRegion = null;
		}
		if ($this->aUsuario !== null && $this->id_usuario !== $this->aUsuario->getId()) {
			$this->aUsuario = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ActividadFinalizadaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aActividad = null;
			$this->aFeria = null;
			$this->aPais = null;
			$this->aEstado = null;
			$this->aMunicipio = null;
			$this->aParroquia = null;
			$this->aRegion = null;
			$this->aUsuario = null;
			$this->collIncumplmientoActividadFinalizadas = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActividadFinalizada:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				ActividadFinalizadaQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActividadFinalizada:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseActividadFinalizada:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseActividadFinalizada:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				ActividadFinalizadaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aActividad !== null) {
				if ($this->aActividad->isModified() || $this->aActividad->isNew()) {
					$affectedRows += $this->aActividad->save($con);
				}
				$this->setActividad($this->aActividad);
			}

			if ($this->aFeria !== null) {
				if ($this->aFeria->isModified() || $this->aFeria->isNew()) {
					$affectedRows += $this->aFeria->save($con);
				}
				$this->setFeria($this->aFeria);
			}

			if ($this->aPais !== null) {
				if ($this->aPais->isModified() || $this->aPais->isNew()) {
					$affectedRows += $this->aPais->save($con);
				}
				$this->setPais($this->aPais);
			}

			if ($this->aEstado !== null) {
				if ($this->aEstado->isModified() || $this->aEstado->isNew()) {
					$affectedRows += $this->aEstado->save($con);
				}
				$this->setEstado($this->aEstado);
			}

			if ($this->aMunicipio !== null) {
				if ($this->aMunicipio->isModified() || $this->aMunicipio->isNew()) {
					$affectedRows += $this->aMunicipio->save($con);
				}
				$this->setMunicipio($this->aMunicipio);
			}

			if ($this->aParroquia !== null) {
				if ($this->aParroquia->isModified() || $this->aParroquia->isNew()) {
					$affectedRows += $this->aParroquia->save($con);
				}
				$this->setParroquia($this->aParroquia);
			}

			if ($this->aRegion !== null) {
				if ($this->aRegion->isModified() || $this->aRegion->isNew()) {
					$affectedRows += $this->aRegion->save($con);
				}
				$this->setRegion($this->aRegion);
			}

			if ($this->aUsuario !== null) {
				if ($this->aUsuario->isModified() || $this->aUsuario->isNew()) {
					$affectedRows += $this->aUsuario->save($con);
				}
				$this->setUsuario($this->aUsuario);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = ActividadFinalizadaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(ActividadFinalizadaPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.ActividadFinalizadaPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += ActividadFinalizadaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collIncumplmientoActividadFinalizadas !== null) {
				foreach ($this->collIncumplmientoActividadFinalizadas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aActividad !== null) {
				if (!$this->aActividad->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aActividad->getValidationFailures());
				}
			}

			if ($this->aFeria !== null) {
				if (!$this->aFeria->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFeria->getValidationFailures());
				}
			}

			if ($this->aPais !== null) {
				if (!$this->aPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
				}
			}

			if ($this->aEstado !== null) {
				if (!$this->aEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstado->getValidationFailures());
				}
			}

			if ($this->aMunicipio !== null) {
				if (!$this->aMunicipio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMunicipio->getValidationFailures());
				}
			}

			if ($this->aParroquia !== null) {
				if (!$this->aParroquia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aParroquia->getValidationFailures());
				}
			}

			if ($this->aRegion !== null) {
				if (!$this->aRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRegion->getValidationFailures());
				}
			}

			if ($this->aUsuario !== null) {
				if (!$this->aUsuario->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUsuario->getValidationFailures());
				}
			}


			if (($retval = ActividadFinalizadaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collIncumplmientoActividadFinalizadas !== null) {
					foreach ($this->collIncumplmientoActividadFinalizadas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActividadFinalizadaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getIdActividad();
				break;
			case 2:
				return $this->getIdFeria();
				break;
			case 3:
				return $this->getNombreResponsable();
				break;
			case 4:
				return $this->getFechaEjecucion();
				break;
			case 5:
				return $this->getHoraEjecucion();
				break;
			case 6:
				return $this->getHoraFinEjecucion();
				break;
			case 7:
				return $this->getParticipantesM();
				break;
			case 8:
				return $this->getParticipantesF();
				break;
			case 9:
				return $this->getTotal();
				break;
			case 10:
				return $this->getEventoPublico();
				break;
			case 11:
				return $this->getOtroIncumplimiento();
				break;
			case 12:
				return $this->getNombreInstitucion();
				break;
			case 13:
				return $this->getIdPais();
				break;
			case 14:
				return $this->getIdEstado();
				break;
			case 15:
				return $this->getIdMunicipio();
				break;
			case 16:
				return $this->getIdParroquia();
				break;
			case 17:
				return $this->getIdRegion();
				break;
			case 18:
				return $this->getIncluirInfoGeografica();
				break;
			case 19:
				return $this->getIdUsuario();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['ActividadFinalizada'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['ActividadFinalizada'][$this->getPrimaryKey()] = true;
		$keys = ActividadFinalizadaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getIdActividad(),
			$keys[2] => $this->getIdFeria(),
			$keys[3] => $this->getNombreResponsable(),
			$keys[4] => $this->getFechaEjecucion(),
			$keys[5] => $this->getHoraEjecucion(),
			$keys[6] => $this->getHoraFinEjecucion(),
			$keys[7] => $this->getParticipantesM(),
			$keys[8] => $this->getParticipantesF(),
			$keys[9] => $this->getTotal(),
			$keys[10] => $this->getEventoPublico(),
			$keys[11] => $this->getOtroIncumplimiento(),
			$keys[12] => $this->getNombreInstitucion(),
			$keys[13] => $this->getIdPais(),
			$keys[14] => $this->getIdEstado(),
			$keys[15] => $this->getIdMunicipio(),
			$keys[16] => $this->getIdParroquia(),
			$keys[17] => $this->getIdRegion(),
			$keys[18] => $this->getIncluirInfoGeografica(),
			$keys[19] => $this->getIdUsuario(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aActividad) {
				$result['Actividad'] = $this->aActividad->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aFeria) {
				$result['Feria'] = $this->aFeria->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aPais) {
				$result['Pais'] = $this->aPais->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aEstado) {
				$result['Estado'] = $this->aEstado->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aMunicipio) {
				$result['Municipio'] = $this->aMunicipio->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aParroquia) {
				$result['Parroquia'] = $this->aParroquia->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aRegion) {
				$result['Region'] = $this->aRegion->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aUsuario) {
				$result['Usuario'] = $this->aUsuario->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->collIncumplmientoActividadFinalizadas) {
				$result['IncumplmientoActividadFinalizadas'] = $this->collIncumplmientoActividadFinalizadas->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ActividadFinalizadaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setIdActividad($value);
				break;
			case 2:
				$this->setIdFeria($value);
				break;
			case 3:
				$this->setNombreResponsable($value);
				break;
			case 4:
				$this->setFechaEjecucion($value);
				break;
			case 5:
				$this->setHoraEjecucion($value);
				break;
			case 6:
				$this->setHoraFinEjecucion($value);
				break;
			case 7:
				$this->setParticipantesM($value);
				break;
			case 8:
				$this->setParticipantesF($value);
				break;
			case 9:
				$this->setTotal($value);
				break;
			case 10:
				$this->setEventoPublico($value);
				break;
			case 11:
				$this->setOtroIncumplimiento($value);
				break;
			case 12:
				$this->setNombreInstitucion($value);
				break;
			case 13:
				$this->setIdPais($value);
				break;
			case 14:
				$this->setIdEstado($value);
				break;
			case 15:
				$this->setIdMunicipio($value);
				break;
			case 16:
				$this->setIdParroquia($value);
				break;
			case 17:
				$this->setIdRegion($value);
				break;
			case 18:
				$this->setIncluirInfoGeografica($value);
				break;
			case 19:
				$this->setIdUsuario($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ActividadFinalizadaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setIdActividad($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setIdFeria($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setNombreResponsable($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFechaEjecucion($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setHoraEjecucion($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setHoraFinEjecucion($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setParticipantesM($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setParticipantesF($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setTotal($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setEventoPublico($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setOtroIncumplimiento($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setNombreInstitucion($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setIdPais($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setIdEstado($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setIdMunicipio($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setIdParroquia($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setIdRegion($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setIncluirInfoGeografica($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setIdUsuario($arr[$keys[19]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ActividadFinalizadaPeer::DATABASE_NAME);

		if ($this->isColumnModified(ActividadFinalizadaPeer::ID)) $criteria->add(ActividadFinalizadaPeer::ID, $this->id);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_ACTIVIDAD)) $criteria->add(ActividadFinalizadaPeer::ID_ACTIVIDAD, $this->id_actividad);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_FERIA)) $criteria->add(ActividadFinalizadaPeer::ID_FERIA, $this->id_feria);
		if ($this->isColumnModified(ActividadFinalizadaPeer::NOMBRE_RESPONSABLE)) $criteria->add(ActividadFinalizadaPeer::NOMBRE_RESPONSABLE, $this->nombre_responsable);
		if ($this->isColumnModified(ActividadFinalizadaPeer::FECHA_EJECUCION)) $criteria->add(ActividadFinalizadaPeer::FECHA_EJECUCION, $this->fecha_ejecucion);
		if ($this->isColumnModified(ActividadFinalizadaPeer::HORA_EJECUCION)) $criteria->add(ActividadFinalizadaPeer::HORA_EJECUCION, $this->hora_ejecucion);
		if ($this->isColumnModified(ActividadFinalizadaPeer::HORA_FIN_EJECUCION)) $criteria->add(ActividadFinalizadaPeer::HORA_FIN_EJECUCION, $this->hora_fin_ejecucion);
		if ($this->isColumnModified(ActividadFinalizadaPeer::PARTICIPANTES_M)) $criteria->add(ActividadFinalizadaPeer::PARTICIPANTES_M, $this->participantes_m);
		if ($this->isColumnModified(ActividadFinalizadaPeer::PARTICIPANTES_F)) $criteria->add(ActividadFinalizadaPeer::PARTICIPANTES_F, $this->participantes_f);
		if ($this->isColumnModified(ActividadFinalizadaPeer::TOTAL)) $criteria->add(ActividadFinalizadaPeer::TOTAL, $this->total);
		if ($this->isColumnModified(ActividadFinalizadaPeer::EVENTO_PUBLICO)) $criteria->add(ActividadFinalizadaPeer::EVENTO_PUBLICO, $this->evento_publico);
		if ($this->isColumnModified(ActividadFinalizadaPeer::OTRO_INCUMPLIMIENTO)) $criteria->add(ActividadFinalizadaPeer::OTRO_INCUMPLIMIENTO, $this->otro_incumplimiento);
		if ($this->isColumnModified(ActividadFinalizadaPeer::NOMBRE_INSTITUCION)) $criteria->add(ActividadFinalizadaPeer::NOMBRE_INSTITUCION, $this->nombre_institucion);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_PAIS)) $criteria->add(ActividadFinalizadaPeer::ID_PAIS, $this->id_pais);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_ESTADO)) $criteria->add(ActividadFinalizadaPeer::ID_ESTADO, $this->id_estado);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_MUNICIPIO)) $criteria->add(ActividadFinalizadaPeer::ID_MUNICIPIO, $this->id_municipio);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_PARROQUIA)) $criteria->add(ActividadFinalizadaPeer::ID_PARROQUIA, $this->id_parroquia);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_REGION)) $criteria->add(ActividadFinalizadaPeer::ID_REGION, $this->id_region);
		if ($this->isColumnModified(ActividadFinalizadaPeer::INCLUIR_INFO_GEOGRAFICA)) $criteria->add(ActividadFinalizadaPeer::INCLUIR_INFO_GEOGRAFICA, $this->incluir_info_geografica);
		if ($this->isColumnModified(ActividadFinalizadaPeer::ID_USUARIO)) $criteria->add(ActividadFinalizadaPeer::ID_USUARIO, $this->id_usuario);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ActividadFinalizadaPeer::DATABASE_NAME);
		$criteria->add(ActividadFinalizadaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ActividadFinalizada (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setIdActividad($this->getIdActividad());
		$copyObj->setIdFeria($this->getIdFeria());
		$copyObj->setNombreResponsable($this->getNombreResponsable());
		$copyObj->setFechaEjecucion($this->getFechaEjecucion());
		$copyObj->setHoraEjecucion($this->getHoraEjecucion());
		$copyObj->setHoraFinEjecucion($this->getHoraFinEjecucion());
		$copyObj->setParticipantesM($this->getParticipantesM());
		$copyObj->setParticipantesF($this->getParticipantesF());
		$copyObj->setTotal($this->getTotal());
		$copyObj->setEventoPublico($this->getEventoPublico());
		$copyObj->setOtroIncumplimiento($this->getOtroIncumplimiento());
		$copyObj->setNombreInstitucion($this->getNombreInstitucion());
		$copyObj->setIdPais($this->getIdPais());
		$copyObj->setIdEstado($this->getIdEstado());
		$copyObj->setIdMunicipio($this->getIdMunicipio());
		$copyObj->setIdParroquia($this->getIdParroquia());
		$copyObj->setIdRegion($this->getIdRegion());
		$copyObj->setIncluirInfoGeografica($this->getIncluirInfoGeografica());
		$copyObj->setIdUsuario($this->getIdUsuario());

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getIncumplmientoActividadFinalizadas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addIncumplmientoActividadFinalizada($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ActividadFinalizada Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ActividadFinalizadaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ActividadFinalizadaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Actividad object.
	 *
	 * @param      Actividad $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setActividad(Actividad $v = null)
	{
		if ($v === null) {
			$this->setIdActividad(NULL);
		} else {
			$this->setIdActividad($v->getId());
		}

		$this->aActividad = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Actividad object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Actividad object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Actividad The associated Actividad object.
	 * @throws     PropelException
	 */
	public function getActividad(PropelPDO $con = null)
	{
		if ($this->aActividad === null && ($this->id_actividad !== null)) {
			$this->aActividad = ActividadQuery::create()->findPk($this->id_actividad, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aActividad->addActividadFinalizadas($this);
			 */
		}
		return $this->aActividad;
	}

	/**
	 * Declares an association between this object and a Feria object.
	 *
	 * @param      Feria $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFeria(Feria $v = null)
	{
		if ($v === null) {
			$this->setIdFeria(NULL);
		} else {
			$this->setIdFeria($v->getId());
		}

		$this->aFeria = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Feria object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Feria object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Feria The associated Feria object.
	 * @throws     PropelException
	 */
	public function getFeria(PropelPDO $con = null)
	{
		if ($this->aFeria === null && ($this->id_feria !== null)) {
			$this->aFeria = FeriaQuery::create()->findPk($this->id_feria, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aFeria->addActividadFinalizadas($this);
			 */
		}
		return $this->aFeria;
	}

	/**
	 * Declares an association between this object and a Pais object.
	 *
	 * @param      Pais $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPais(Pais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(1);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pais object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pais The associated Pais object.
	 * @throws     PropelException
	 */
	public function getPais(PropelPDO $con = null)
	{
		if ($this->aPais === null && ($this->id_pais !== null)) {
			$this->aPais = PaisQuery::create()->findPk($this->id_pais, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aPais->addActividadFinalizadas($this);
			 */
		}
		return $this->aPais;
	}

	/**
	 * Declares an association between this object and a Estado object.
	 *
	 * @param      Estado $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstado(Estado $v = null)
	{
		if ($v === null) {
			$this->setIdEstado(1);
		} else {
			$this->setIdEstado($v->getId());
		}

		$this->aEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estado object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estado The associated Estado object.
	 * @throws     PropelException
	 */
	public function getEstado(PropelPDO $con = null)
	{
		if ($this->aEstado === null && ($this->id_estado !== null)) {
			$this->aEstado = EstadoQuery::create()->findPk($this->id_estado, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aEstado->addActividadFinalizadas($this);
			 */
		}
		return $this->aEstado;
	}

	/**
	 * Declares an association between this object and a Municipio object.
	 *
	 * @param      Municipio $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMunicipio(Municipio $v = null)
	{
		if ($v === null) {
			$this->setIdMunicipio(1);
		} else {
			$this->setIdMunicipio($v->getId());
		}

		$this->aMunicipio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Municipio object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Municipio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Municipio The associated Municipio object.
	 * @throws     PropelException
	 */
	public function getMunicipio(PropelPDO $con = null)
	{
		if ($this->aMunicipio === null && ($this->id_municipio !== null)) {
			$this->aMunicipio = MunicipioQuery::create()->findPk($this->id_municipio, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aMunicipio->addActividadFinalizadas($this);
			 */
		}
		return $this->aMunicipio;
	}

	/**
	 * Declares an association between this object and a Parroquia object.
	 *
	 * @param      Parroquia $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setParroquia(Parroquia $v = null)
	{
		if ($v === null) {
			$this->setIdParroquia(1);
		} else {
			$this->setIdParroquia($v->getId());
		}

		$this->aParroquia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Parroquia object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Parroquia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Parroquia The associated Parroquia object.
	 * @throws     PropelException
	 */
	public function getParroquia(PropelPDO $con = null)
	{
		if ($this->aParroquia === null && ($this->id_parroquia !== null)) {
			$this->aParroquia = ParroquiaQuery::create()->findPk($this->id_parroquia, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aParroquia->addActividadFinalizadas($this);
			 */
		}
		return $this->aParroquia;
	}

	/**
	 * Declares an association between this object and a Region object.
	 *
	 * @param      Region $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRegion(Region $v = null)
	{
		if ($v === null) {
			$this->setIdRegion(1);
		} else {
			$this->setIdRegion($v->getId());
		}

		$this->aRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Region object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Region object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Region The associated Region object.
	 * @throws     PropelException
	 */
	public function getRegion(PropelPDO $con = null)
	{
		if ($this->aRegion === null && ($this->id_region !== null)) {
			$this->aRegion = RegionQuery::create()->findPk($this->id_region, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aRegion->addActividadFinalizadas($this);
			 */
		}
		return $this->aRegion;
	}

	/**
	 * Declares an association between this object and a Usuario object.
	 *
	 * @param      Usuario $v
	 * @return     ActividadFinalizada The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUsuario(Usuario $v = null)
	{
		if ($v === null) {
			$this->setIdUsuario(NULL);
		} else {
			$this->setIdUsuario($v->getId());
		}

		$this->aUsuario = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Usuario object, it will not be re-added.
		if ($v !== null) {
			$v->addActividadFinalizada($this);
		}

		return $this;
	}


	/**
	 * Get the associated Usuario object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Usuario The associated Usuario object.
	 * @throws     PropelException
	 */
	public function getUsuario(PropelPDO $con = null)
	{
		if ($this->aUsuario === null && ($this->id_usuario !== null)) {
			$this->aUsuario = UsuarioQuery::create()->findPk($this->id_usuario, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aUsuario->addActividadFinalizadas($this);
			 */
		}
		return $this->aUsuario;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name 
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('IncumplmientoActividadFinalizada' == $relationName) {
			return $this->initIncumplmientoActividadFinalizadas();
		}
	}

	/**
	 * Clears out the collIncumplmientoActividadFinalizadas collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addIncumplmientoActividadFinalizadas()
	 */
	public function clearIncumplmientoActividadFinalizadas()
	{
		$this->collIncumplmientoActividadFinalizadas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collIncumplmientoActividadFinalizadas collection.
	 *
	 * By default this just sets the collIncumplmientoActividadFinalizadas collection to an empty array (like clearcollIncumplmientoActividadFinalizadas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initIncumplmientoActividadFinalizadas($overrideExisting = true)
	{
		if (null !== $this->collIncumplmientoActividadFinalizadas && !$overrideExisting) {
			return;
		}
		$this->collIncumplmientoActividadFinalizadas = new PropelObjectCollection();
		$this->collIncumplmientoActividadFinalizadas->setModel('IncumplmientoActividadFinalizada');
	}

	/**
	 * Gets an array of IncumplmientoActividadFinalizada objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this ActividadFinalizada is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array IncumplmientoActividadFinalizada[] List of IncumplmientoActividadFinalizada objects
	 * @throws     PropelException
	 */
	public function getIncumplmientoActividadFinalizadas($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collIncumplmientoActividadFinalizadas || null !== $criteria) {
			if ($this->isNew() && null === $this->collIncumplmientoActividadFinalizadas) {
				// return empty collection
				$this->initIncumplmientoActividadFinalizadas();
			} else {
				$collIncumplmientoActividadFinalizadas = IncumplmientoActividadFinalizadaQuery::create(null, $criteria)
					->filterByActividadFinalizada($this)
					->find($con);
				if (null !== $criteria) {
					return $collIncumplmientoActividadFinalizadas;
				}
				$this->collIncumplmientoActividadFinalizadas = $collIncumplmientoActividadFinalizadas;
			}
		}
		return $this->collIncumplmientoActividadFinalizadas;
	}

	/**
	 * Returns the number of related IncumplmientoActividadFinalizada objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related IncumplmientoActividadFinalizada objects.
	 * @throws     PropelException
	 */
	public function countIncumplmientoActividadFinalizadas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collIncumplmientoActividadFinalizadas || null !== $criteria) {
			if ($this->isNew() && null === $this->collIncumplmientoActividadFinalizadas) {
				return 0;
			} else {
				$query = IncumplmientoActividadFinalizadaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByActividadFinalizada($this)
					->count($con);
			}
		} else {
			return count($this->collIncumplmientoActividadFinalizadas);
		}
	}

	/**
	 * Method called to associate a IncumplmientoActividadFinalizada object to this object
	 * through the IncumplmientoActividadFinalizada foreign key attribute.
	 *
	 * @param      IncumplmientoActividadFinalizada $l IncumplmientoActividadFinalizada
	 * @return     void
	 * @throws     PropelException
	 */
	public function addIncumplmientoActividadFinalizada(IncumplmientoActividadFinalizada $l)
	{
		if ($this->collIncumplmientoActividadFinalizadas === null) {
			$this->initIncumplmientoActividadFinalizadas();
		}
		if (!$this->collIncumplmientoActividadFinalizadas->contains($l)) { // only add it if the **same** object is not already associated
			$this->collIncumplmientoActividadFinalizadas[]= $l;
			$l->setActividadFinalizada($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ActividadFinalizada is new, it will return
	 * an empty collection; or if this ActividadFinalizada has previously
	 * been saved, it will retrieve related IncumplmientoActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ActividadFinalizada.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array IncumplmientoActividadFinalizada[] List of IncumplmientoActividadFinalizada objects
	 */
	public function getIncumplmientoActividadFinalizadasJoinActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = IncumplmientoActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Actividad', $join_behavior);

		return $this->getIncumplmientoActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ActividadFinalizada is new, it will return
	 * an empty collection; or if this ActividadFinalizada has previously
	 * been saved, it will retrieve related IncumplmientoActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ActividadFinalizada.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array IncumplmientoActividadFinalizada[] List of IncumplmientoActividadFinalizada objects
	 */
	public function getIncumplmientoActividadFinalizadasJoinFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = IncumplmientoActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Feria', $join_behavior);

		return $this->getIncumplmientoActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this ActividadFinalizada is new, it will return
	 * an empty collection; or if this ActividadFinalizada has previously
	 * been saved, it will retrieve related IncumplmientoActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in ActividadFinalizada.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array IncumplmientoActividadFinalizada[] List of IncumplmientoActividadFinalizada objects
	 */
	public function getIncumplmientoActividadFinalizadasJoinIncumplimientoActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = IncumplmientoActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('IncumplimientoActividad', $join_behavior);

		return $this->getIncumplmientoActividadFinalizadas($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->id_actividad = null;
		$this->id_feria = null;
		$this->nombre_responsable = null;
		$this->fecha_ejecucion = null;
		$this->hora_ejecucion = null;
		$this->hora_fin_ejecucion = null;
		$this->participantes_m = null;
		$this->participantes_f = null;
		$this->total = null;
		$this->evento_publico = null;
		$this->otro_incumplimiento = null;
		$this->nombre_institucion = null;
		$this->id_pais = null;
		$this->id_estado = null;
		$this->id_municipio = null;
		$this->id_parroquia = null;
		$this->id_region = null;
		$this->incluir_info_geografica = null;
		$this->id_usuario = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collIncumplmientoActividadFinalizadas) {
				foreach ($this->collIncumplmientoActividadFinalizadas as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collIncumplmientoActividadFinalizadas instanceof PropelCollection) {
			$this->collIncumplmientoActividadFinalizadas->clearIterator();
		}
		$this->collIncumplmientoActividadFinalizadas = null;
		$this->aActividad = null;
		$this->aFeria = null;
		$this->aPais = null;
		$this->aEstado = null;
		$this->aMunicipio = null;
		$this->aParroquia = null;
		$this->aRegion = null;
		$this->aUsuario = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(ActividadFinalizadaPeer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseActividadFinalizada:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseActividadFinalizada
