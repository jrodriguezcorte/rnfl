<?php


/**
 * Base class that represents a query for the 'usuario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Tue Feb 17 18:35:37 2015
 *
 * @method     UsuarioQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     UsuarioQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     UsuarioQuery orderByApellido($order = Criteria::ASC) Order by the apellido column
 * @method     UsuarioQuery orderByCedula($order = Criteria::ASC) Order by the cedula column
 * @method     UsuarioQuery orderByIsbn($order = Criteria::ASC) Order by the isbn column
 * @method     UsuarioQuery orderByLogin($order = Criteria::ASC) Order by the login column
 * @method     UsuarioQuery orderByContrasena($order = Criteria::ASC) Order by the contrasena column
 * @method     UsuarioQuery orderBySfGuardUser($order = Criteria::ASC) Order by the sf_guard_user column
 * @method     UsuarioQuery orderBySexo($order = Criteria::ASC) Order by the sexo column
 * @method     UsuarioQuery orderBySfGuardUserGroup($order = Criteria::ASC) Order by the sf_guard_user_group column
 * @method     UsuarioQuery orderByTipoOrganizador($order = Criteria::ASC) Order by the tipo_organizador column
 * @method     UsuarioQuery orderByEnteOrganizador($order = Criteria::ASC) Order by the ente_organizador column
 * @method     UsuarioQuery orderBySector($order = Criteria::ASC) Order by the sector column
 * @method     UsuarioQuery orderByUnidadResponsable($order = Criteria::ASC) Order by the unidad_responsable column
 * @method     UsuarioQuery orderByCorreo($order = Criteria::ASC) Order by the correo column
 * @method     UsuarioQuery orderByTelefono($order = Criteria::ASC) Order by the telefono column
 *
 * @method     UsuarioQuery groupById() Group by the id column
 * @method     UsuarioQuery groupByNombre() Group by the nombre column
 * @method     UsuarioQuery groupByApellido() Group by the apellido column
 * @method     UsuarioQuery groupByCedula() Group by the cedula column
 * @method     UsuarioQuery groupByIsbn() Group by the isbn column
 * @method     UsuarioQuery groupByLogin() Group by the login column
 * @method     UsuarioQuery groupByContrasena() Group by the contrasena column
 * @method     UsuarioQuery groupBySfGuardUser() Group by the sf_guard_user column
 * @method     UsuarioQuery groupBySexo() Group by the sexo column
 * @method     UsuarioQuery groupBySfGuardUserGroup() Group by the sf_guard_user_group column
 * @method     UsuarioQuery groupByTipoOrganizador() Group by the tipo_organizador column
 * @method     UsuarioQuery groupByEnteOrganizador() Group by the ente_organizador column
 * @method     UsuarioQuery groupBySector() Group by the sector column
 * @method     UsuarioQuery groupByUnidadResponsable() Group by the unidad_responsable column
 * @method     UsuarioQuery groupByCorreo() Group by the correo column
 * @method     UsuarioQuery groupByTelefono() Group by the telefono column
 *
 * @method     UsuarioQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     UsuarioQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     UsuarioQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     UsuarioQuery leftJoinActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Actividad relation
 * @method     UsuarioQuery rightJoinActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Actividad relation
 * @method     UsuarioQuery innerJoinActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the Actividad relation
 *
 * @method     UsuarioQuery leftJoinActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadFinalizada relation
 * @method     UsuarioQuery rightJoinActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadFinalizada relation
 * @method     UsuarioQuery innerJoinActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadFinalizada relation
 *
 * @method     UsuarioQuery leftJoinExpositorFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorFeria relation
 * @method     UsuarioQuery rightJoinExpositorFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorFeria relation
 * @method     UsuarioQuery innerJoinExpositorFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorFeria relation
 *
 * @method     UsuarioQuery leftJoinPagoExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the PagoExpositor relation
 * @method     UsuarioQuery rightJoinPagoExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PagoExpositor relation
 * @method     UsuarioQuery innerJoinPagoExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the PagoExpositor relation
 *
 * @method     Usuario findOne(PropelPDO $con = null) Return the first Usuario matching the query
 * @method     Usuario findOneOrCreate(PropelPDO $con = null) Return the first Usuario matching the query, or a new Usuario object populated from the query conditions when no match is found
 *
 * @method     Usuario findOneById(string $id) Return the first Usuario filtered by the id column
 * @method     Usuario findOneByNombre(string $nombre) Return the first Usuario filtered by the nombre column
 * @method     Usuario findOneByApellido(string $apellido) Return the first Usuario filtered by the apellido column
 * @method     Usuario findOneByCedula(string $cedula) Return the first Usuario filtered by the cedula column
 * @method     Usuario findOneByIsbn(string $isbn) Return the first Usuario filtered by the isbn column
 * @method     Usuario findOneByLogin(string $login) Return the first Usuario filtered by the login column
 * @method     Usuario findOneByContrasena(string $contrasena) Return the first Usuario filtered by the contrasena column
 * @method     Usuario findOneBySfGuardUser(int $sf_guard_user) Return the first Usuario filtered by the sf_guard_user column
 * @method     Usuario findOneBySexo(boolean $sexo) Return the first Usuario filtered by the sexo column
 * @method     Usuario findOneBySfGuardUserGroup(int $sf_guard_user_group) Return the first Usuario filtered by the sf_guard_user_group column
 * @method     Usuario findOneByTipoOrganizador(boolean $tipo_organizador) Return the first Usuario filtered by the tipo_organizador column
 * @method     Usuario findOneByEnteOrganizador(string $ente_organizador) Return the first Usuario filtered by the ente_organizador column
 * @method     Usuario findOneBySector(boolean $sector) Return the first Usuario filtered by the sector column
 * @method     Usuario findOneByUnidadResponsable(string $unidad_responsable) Return the first Usuario filtered by the unidad_responsable column
 * @method     Usuario findOneByCorreo(string $correo) Return the first Usuario filtered by the correo column
 * @method     Usuario findOneByTelefono(string $telefono) Return the first Usuario filtered by the telefono column
 *
 * @method     array findById(string $id) Return Usuario objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Usuario objects filtered by the nombre column
 * @method     array findByApellido(string $apellido) Return Usuario objects filtered by the apellido column
 * @method     array findByCedula(string $cedula) Return Usuario objects filtered by the cedula column
 * @method     array findByIsbn(string $isbn) Return Usuario objects filtered by the isbn column
 * @method     array findByLogin(string $login) Return Usuario objects filtered by the login column
 * @method     array findByContrasena(string $contrasena) Return Usuario objects filtered by the contrasena column
 * @method     array findBySfGuardUser(int $sf_guard_user) Return Usuario objects filtered by the sf_guard_user column
 * @method     array findBySexo(boolean $sexo) Return Usuario objects filtered by the sexo column
 * @method     array findBySfGuardUserGroup(int $sf_guard_user_group) Return Usuario objects filtered by the sf_guard_user_group column
 * @method     array findByTipoOrganizador(boolean $tipo_organizador) Return Usuario objects filtered by the tipo_organizador column
 * @method     array findByEnteOrganizador(string $ente_organizador) Return Usuario objects filtered by the ente_organizador column
 * @method     array findBySector(boolean $sector) Return Usuario objects filtered by the sector column
 * @method     array findByUnidadResponsable(string $unidad_responsable) Return Usuario objects filtered by the unidad_responsable column
 * @method     array findByCorreo(string $correo) Return Usuario objects filtered by the correo column
 * @method     array findByTelefono(string $telefono) Return Usuario objects filtered by the telefono column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuarioQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseUsuarioQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Usuario', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new UsuarioQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    UsuarioQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof UsuarioQuery) {
			return $criteria;
		}
		$query = new UsuarioQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Usuario|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = UsuarioPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(UsuarioPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(UsuarioPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(UsuarioPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombre('fooValue');   // WHERE nombre = 'fooValue'
	 * $query->filterByNombre('%fooValue%'); // WHERE nombre LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombre The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the apellido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByApellido('fooValue');   // WHERE apellido = 'fooValue'
	 * $query->filterByApellido('%fooValue%'); // WHERE apellido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $apellido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByApellido($apellido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($apellido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $apellido)) {
				$apellido = str_replace('*', '%', $apellido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::APELLIDO, $apellido, $comparison);
	}

	/**
	 * Filter the query on the cedula column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCedula('fooValue');   // WHERE cedula = 'fooValue'
	 * $query->filterByCedula('%fooValue%'); // WHERE cedula LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $cedula The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByCedula($cedula = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($cedula)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $cedula)) {
				$cedula = str_replace('*', '%', $cedula);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::CEDULA, $cedula, $comparison);
	}

	/**
	 * Filter the query on the isbn column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIsbn('fooValue');   // WHERE isbn = 'fooValue'
	 * $query->filterByIsbn('%fooValue%'); // WHERE isbn LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $isbn The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByIsbn($isbn = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($isbn)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $isbn)) {
				$isbn = str_replace('*', '%', $isbn);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::ISBN, $isbn, $comparison);
	}

	/**
	 * Filter the query on the login column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByLogin('fooValue');   // WHERE login = 'fooValue'
	 * $query->filterByLogin('%fooValue%'); // WHERE login LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $login The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByLogin($login = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($login)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $login)) {
				$login = str_replace('*', '%', $login);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::LOGIN, $login, $comparison);
	}

	/**
	 * Filter the query on the contrasena column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByContrasena('fooValue');   // WHERE contrasena = 'fooValue'
	 * $query->filterByContrasena('%fooValue%'); // WHERE contrasena LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $contrasena The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByContrasena($contrasena = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($contrasena)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $contrasena)) {
				$contrasena = str_replace('*', '%', $contrasena);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::CONTRASENA, $contrasena, $comparison);
	}

	/**
	 * Filter the query on the sf_guard_user column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySfGuardUser(1234); // WHERE sf_guard_user = 1234
	 * $query->filterBySfGuardUser(array(12, 34)); // WHERE sf_guard_user IN (12, 34)
	 * $query->filterBySfGuardUser(array('min' => 12)); // WHERE sf_guard_user > 12
	 * </code>
	 *
	 * @param     mixed $sfGuardUser The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterBySfGuardUser($sfGuardUser = null, $comparison = null)
	{
		if (is_array($sfGuardUser)) {
			$useMinMax = false;
			if (isset($sfGuardUser['min'])) {
				$this->addUsingAlias(UsuarioPeer::SF_GUARD_USER, $sfGuardUser['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($sfGuardUser['max'])) {
				$this->addUsingAlias(UsuarioPeer::SF_GUARD_USER, $sfGuardUser['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::SF_GUARD_USER, $sfGuardUser, $comparison);
	}

	/**
	 * Filter the query on the sexo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySexo(true); // WHERE sexo = true
	 * $query->filterBySexo('yes'); // WHERE sexo = true
	 * </code>
	 *
	 * @param     boolean|string $sexo The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterBySexo($sexo = null, $comparison = null)
	{
		if (is_string($sexo)) {
			$sexo = in_array(strtolower($sexo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(UsuarioPeer::SEXO, $sexo, $comparison);
	}

	/**
	 * Filter the query on the sf_guard_user_group column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySfGuardUserGroup(1234); // WHERE sf_guard_user_group = 1234
	 * $query->filterBySfGuardUserGroup(array(12, 34)); // WHERE sf_guard_user_group IN (12, 34)
	 * $query->filterBySfGuardUserGroup(array('min' => 12)); // WHERE sf_guard_user_group > 12
	 * </code>
	 *
	 * @param     mixed $sfGuardUserGroup The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterBySfGuardUserGroup($sfGuardUserGroup = null, $comparison = null)
	{
		if (is_array($sfGuardUserGroup)) {
			$useMinMax = false;
			if (isset($sfGuardUserGroup['min'])) {
				$this->addUsingAlias(UsuarioPeer::SF_GUARD_USER_GROUP, $sfGuardUserGroup['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($sfGuardUserGroup['max'])) {
				$this->addUsingAlias(UsuarioPeer::SF_GUARD_USER_GROUP, $sfGuardUserGroup['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::SF_GUARD_USER_GROUP, $sfGuardUserGroup, $comparison);
	}

	/**
	 * Filter the query on the tipo_organizador column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTipoOrganizador(true); // WHERE tipo_organizador = true
	 * $query->filterByTipoOrganizador('yes'); // WHERE tipo_organizador = true
	 * </code>
	 *
	 * @param     boolean|string $tipoOrganizador The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByTipoOrganizador($tipoOrganizador = null, $comparison = null)
	{
		if (is_string($tipoOrganizador)) {
			$tipo_organizador = in_array(strtolower($tipoOrganizador), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(UsuarioPeer::TIPO_ORGANIZADOR, $tipoOrganizador, $comparison);
	}

	/**
	 * Filter the query on the ente_organizador column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEnteOrganizador('fooValue');   // WHERE ente_organizador = 'fooValue'
	 * $query->filterByEnteOrganizador('%fooValue%'); // WHERE ente_organizador LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $enteOrganizador The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByEnteOrganizador($enteOrganizador = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($enteOrganizador)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $enteOrganizador)) {
				$enteOrganizador = str_replace('*', '%', $enteOrganizador);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::ENTE_ORGANIZADOR, $enteOrganizador, $comparison);
	}

	/**
	 * Filter the query on the sector column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySector(true); // WHERE sector = true
	 * $query->filterBySector('yes'); // WHERE sector = true
	 * </code>
	 *
	 * @param     boolean|string $sector The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterBySector($sector = null, $comparison = null)
	{
		if (is_string($sector)) {
			$sector = in_array(strtolower($sector), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(UsuarioPeer::SECTOR, $sector, $comparison);
	}

	/**
	 * Filter the query on the unidad_responsable column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByUnidadResponsable('fooValue');   // WHERE unidad_responsable = 'fooValue'
	 * $query->filterByUnidadResponsable('%fooValue%'); // WHERE unidad_responsable LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $unidadResponsable The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByUnidadResponsable($unidadResponsable = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($unidadResponsable)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $unidadResponsable)) {
				$unidadResponsable = str_replace('*', '%', $unidadResponsable);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::UNIDAD_RESPONSABLE, $unidadResponsable, $comparison);
	}

	/**
	 * Filter the query on the correo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCorreo('fooValue');   // WHERE correo = 'fooValue'
	 * $query->filterByCorreo('%fooValue%'); // WHERE correo LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $correo The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByCorreo($correo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($correo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $correo)) {
				$correo = str_replace('*', '%', $correo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::CORREO, $correo, $comparison);
	}

	/**
	 * Filter the query on the telefono column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTelefono('fooValue');   // WHERE telefono = 'fooValue'
	 * $query->filterByTelefono('%fooValue%'); // WHERE telefono LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $telefono The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByTelefono($telefono = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefono)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefono)) {
				$telefono = str_replace('*', '%', $telefono);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(UsuarioPeer::TELEFONO, $telefono, $comparison);
	}

	/**
	 * Filter the query by a related Actividad object
	 *
	 * @param     Actividad $actividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByActividad($actividad, $comparison = null)
	{
		if ($actividad instanceof Actividad) {
			return $this
				->addUsingAlias(UsuarioPeer::ID, $actividad->getIdUsuario(), $comparison);
		} elseif ($actividad instanceof PropelCollection) {
			return $this
				->useActividadQuery()
					->filterByPrimaryKeys($actividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividad() only accepts arguments of type Actividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Actividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function joinActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Actividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Actividad');
		}
		
		return $this;
	}

	/**
	 * Use the Actividad relation Actividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery A secondary query class using the current class as primary query
	 */
	public function useActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Actividad', 'ActividadQuery');
	}

	/**
	 * Filter the query by a related ActividadFinalizada object
	 *
	 * @param     ActividadFinalizada $actividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByActividadFinalizada($actividadFinalizada, $comparison = null)
	{
		if ($actividadFinalizada instanceof ActividadFinalizada) {
			return $this
				->addUsingAlias(UsuarioPeer::ID, $actividadFinalizada->getIdUsuario(), $comparison);
		} elseif ($actividadFinalizada instanceof PropelCollection) {
			return $this
				->useActividadFinalizadaQuery()
					->filterByPrimaryKeys($actividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividadFinalizada() only accepts arguments of type ActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function joinActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadFinalizada relation ActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadFinalizada', 'ActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related ExpositorFeria object
	 *
	 * @param     ExpositorFeria $expositorFeria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByExpositorFeria($expositorFeria, $comparison = null)
	{
		if ($expositorFeria instanceof ExpositorFeria) {
			return $this
				->addUsingAlias(UsuarioPeer::ID, $expositorFeria->getIdUsuario(), $comparison);
		} elseif ($expositorFeria instanceof PropelCollection) {
			return $this
				->useExpositorFeriaQuery()
					->filterByPrimaryKeys($expositorFeria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositorFeria() only accepts arguments of type ExpositorFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function joinExpositorFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorFeria');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorFeria relation ExpositorFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorFeria', 'ExpositorFeriaQuery');
	}

	/**
	 * Filter the query by a related PagoExpositor object
	 *
	 * @param     PagoExpositor $pagoExpositor  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function filterByPagoExpositor($pagoExpositor, $comparison = null)
	{
		if ($pagoExpositor instanceof PagoExpositor) {
			return $this
				->addUsingAlias(UsuarioPeer::ID, $pagoExpositor->getIdUsuario(), $comparison);
		} elseif ($pagoExpositor instanceof PropelCollection) {
			return $this
				->usePagoExpositorQuery()
					->filterByPrimaryKeys($pagoExpositor->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPagoExpositor() only accepts arguments of type PagoExpositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PagoExpositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function joinPagoExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PagoExpositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PagoExpositor');
		}
		
		return $this;
	}

	/**
	 * Use the PagoExpositor relation PagoExpositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery A secondary query class using the current class as primary query
	 */
	public function usePagoExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPagoExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PagoExpositor', 'PagoExpositorQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Usuario $usuario Object to remove from the list of results
	 *
	 * @return    UsuarioQuery The current query, for fluid interface
	 */
	public function prune($usuario = null)
	{
		if ($usuario) {
			$this->addUsingAlias(UsuarioPeer::ID, $usuario->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseUsuarioQuery
