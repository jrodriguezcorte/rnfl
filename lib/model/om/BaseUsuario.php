<?php


/**
 * Base class that represents a row from the 'usuario' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sun Feb 22 12:26:16 2015
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseUsuario extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'UsuarioPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        UsuarioPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the apellido field.
	 * @var        string
	 */
	protected $apellido;

	/**
	 * The value for the cedula field.
	 * @var        string
	 */
	protected $cedula;

	/**
	 * The value for the isbn field.
	 * @var        string
	 */
	protected $isbn;

	/**
	 * The value for the login field.
	 * @var        string
	 */
	protected $login;

	/**
	 * The value for the contrasena field.
	 * @var        string
	 */
	protected $contrasena;

	/**
	 * The value for the sf_guard_user field.
	 * @var        int
	 */
	protected $sf_guard_user;

	/**
	 * The value for the sexo field.
	 * @var        boolean
	 */
	protected $sexo;

	/**
	 * The value for the sf_guard_user_group field.
	 * @var        int
	 */
	protected $sf_guard_user_group;

	/**
	 * The value for the tipo_organizador field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $tipo_organizador;

	/**
	 * The value for the ente_organizador field.
	 * @var        string
	 */
	protected $ente_organizador;

	/**
	 * The value for the sector field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $sector;

	/**
	 * The value for the unidad_responsable field.
	 * @var        string
	 */
	protected $unidad_responsable;

	/**
	 * The value for the correo field.
	 * @var        string
	 */
	protected $correo;

	/**
	 * The value for the telefono field.
	 * @var        string
	 */
	protected $telefono;

	/**
	 * @var        array Actividad[] Collection to store aggregation of Actividad objects.
	 */
	protected $collActividads;

	/**
	 * @var        array ActividadFinalizada[] Collection to store aggregation of ActividadFinalizada objects.
	 */
	protected $collActividadFinalizadas;

	/**
	 * @var        array ExpositorFeria[] Collection to store aggregation of ExpositorFeria objects.
	 */
	protected $collExpositorFerias;

	/**
	 * @var        array PagoExpositor[] Collection to store aggregation of PagoExpositor objects.
	 */
	protected $collPagoExpositors;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->tipo_organizador = true;
		$this->sector = true;
	}

	/**
	 * Initializes internal state of BaseUsuario object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [apellido] column value.
	 * 
	 * @return     string
	 */
	public function getApellido()
	{
		return $this->apellido;
	}

	/**
	 * Get the [cedula] column value.
	 * 
	 * @return     string
	 */
	public function getCedula()
	{
		return $this->cedula;
	}

	/**
	 * Get the [isbn] column value.
	 * 
	 * @return     string
	 */
	public function getIsbn()
	{
		return $this->isbn;
	}

	/**
	 * Get the [login] column value.
	 * 
	 * @return     string
	 */
	public function getLogin()
	{
		return $this->login;
	}

	/**
	 * Get the [contrasena] column value.
	 * 
	 * @return     string
	 */
	public function getContrasena()
	{
		return $this->contrasena;
	}

	/**
	 * Get the [sf_guard_user] column value.
	 * 
	 * @return     int
	 */
	public function getSfGuardUser()
	{
		return $this->sf_guard_user;
	}

	/**
	 * Get the [sexo] column value.
	 * 
	 * @return     boolean
	 */
	public function getSexo()
	{
		return $this->sexo;
	}

	/**
	 * Get the [sf_guard_user_group] column value.
	 * 
	 * @return     int
	 */
	public function getSfGuardUserGroup()
	{
		return $this->sf_guard_user_group;
	}

	/**
	 * Get the [tipo_organizador] column value.
	 * 
	 * @return     boolean
	 */
	public function getTipoOrganizador()
	{
		return $this->tipo_organizador;
	}

	/**
	 * Get the [ente_organizador] column value.
	 * 
	 * @return     string
	 */
	public function getEnteOrganizador()
	{
		return $this->ente_organizador;
	}

	/**
	 * Get the [sector] column value.
	 * 
	 * @return     boolean
	 */
	public function getSector()
	{
		return $this->sector;
	}

	/**
	 * Get the [unidad_responsable] column value.
	 * 
	 * @return     string
	 */
	public function getUnidadResponsable()
	{
		return $this->unidad_responsable;
	}

	/**
	 * Get the [correo] column value.
	 * 
	 * @return     string
	 */
	public function getCorreo()
	{
		return $this->correo;
	}

	/**
	 * Get the [telefono] column value.
	 * 
	 * @return     string
	 */
	public function getTelefono()
	{
		return $this->telefono;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = UsuarioPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = UsuarioPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [apellido] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setApellido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->apellido !== $v) {
			$this->apellido = $v;
			$this->modifiedColumns[] = UsuarioPeer::APELLIDO;
		}

		return $this;
	} // setApellido()

	/**
	 * Set the value of [cedula] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setCedula($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cedula !== $v) {
			$this->cedula = $v;
			$this->modifiedColumns[] = UsuarioPeer::CEDULA;
		}

		return $this;
	} // setCedula()

	/**
	 * Set the value of [isbn] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setIsbn($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->isbn !== $v) {
			$this->isbn = $v;
			$this->modifiedColumns[] = UsuarioPeer::ISBN;
		}

		return $this;
	} // setIsbn()

	/**
	 * Set the value of [login] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setLogin($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->login !== $v) {
			$this->login = $v;
			$this->modifiedColumns[] = UsuarioPeer::LOGIN;
		}

		return $this;
	} // setLogin()

	/**
	 * Set the value of [contrasena] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setContrasena($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contrasena !== $v) {
			$this->contrasena = $v;
			$this->modifiedColumns[] = UsuarioPeer::CONTRASENA;
		}

		return $this;
	} // setContrasena()

	/**
	 * Set the value of [sf_guard_user] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setSfGuardUser($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sf_guard_user !== $v) {
			$this->sf_guard_user = $v;
			$this->modifiedColumns[] = UsuarioPeer::SF_GUARD_USER;
		}

		return $this;
	} // setSfGuardUser()

	/**
	 * Sets the value of the [sexo] column. 
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setSexo($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->sexo !== $v) {
			$this->sexo = $v;
			$this->modifiedColumns[] = UsuarioPeer::SEXO;
		}

		return $this;
	} // setSexo()

	/**
	 * Set the value of [sf_guard_user_group] column.
	 * 
	 * @param      int $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setSfGuardUserGroup($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->sf_guard_user_group !== $v) {
			$this->sf_guard_user_group = $v;
			$this->modifiedColumns[] = UsuarioPeer::SF_GUARD_USER_GROUP;
		}

		return $this;
	} // setSfGuardUserGroup()

	/**
	 * Sets the value of the [tipo_organizador] column. 
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setTipoOrganizador($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->tipo_organizador !== $v || $this->isNew()) {
			$this->tipo_organizador = $v;
			$this->modifiedColumns[] = UsuarioPeer::TIPO_ORGANIZADOR;
		}

		return $this;
	} // setTipoOrganizador()

	/**
	 * Set the value of [ente_organizador] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setEnteOrganizador($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ente_organizador !== $v) {
			$this->ente_organizador = $v;
			$this->modifiedColumns[] = UsuarioPeer::ENTE_ORGANIZADOR;
		}

		return $this;
	} // setEnteOrganizador()

	/**
	 * Sets the value of the [sector] column. 
	 * Non-boolean arguments are converted using the following rules:
	 *   * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *   * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 * Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * 
	 * @param      boolean|integer|string $v The new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setSector($v)
	{
		if ($v !== null) {
			if (is_string($v)) {
				$v = in_array(strtolower($v), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
			} else {
				$v = (boolean) $v;
			}
		}

		if ($this->sector !== $v || $this->isNew()) {
			$this->sector = $v;
			$this->modifiedColumns[] = UsuarioPeer::SECTOR;
		}

		return $this;
	} // setSector()

	/**
	 * Set the value of [unidad_responsable] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setUnidadResponsable($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->unidad_responsable !== $v) {
			$this->unidad_responsable = $v;
			$this->modifiedColumns[] = UsuarioPeer::UNIDAD_RESPONSABLE;
		}

		return $this;
	} // setUnidadResponsable()

	/**
	 * Set the value of [correo] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setCorreo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->correo !== $v) {
			$this->correo = $v;
			$this->modifiedColumns[] = UsuarioPeer::CORREO;
		}

		return $this;
	} // setCorreo()

	/**
	 * Set the value of [telefono] column.
	 * 
	 * @param      string $v new value
	 * @return     Usuario The current object (for fluent API support)
	 */
	public function setTelefono($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->telefono !== $v) {
			$this->telefono = $v;
			$this->modifiedColumns[] = UsuarioPeer::TELEFONO;
		}

		return $this;
	} // setTelefono()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			if ($this->tipo_organizador !== true) {
				return false;
			}

			if ($this->sector !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->apellido = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->cedula = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->isbn = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->login = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->contrasena = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->sf_guard_user = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->sexo = ($row[$startcol + 8] !== null) ? (boolean) $row[$startcol + 8] : null;
			$this->sf_guard_user_group = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->tipo_organizador = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->ente_organizador = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->sector = ($row[$startcol + 12] !== null) ? (boolean) $row[$startcol + 12] : null;
			$this->unidad_responsable = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->correo = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->telefono = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 16; // 16 = UsuarioPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating Usuario object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = UsuarioPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collActividads = null;

			$this->collActividadFinalizadas = null;

			$this->collExpositorFerias = null;

			$this->collPagoExpositors = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuario:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				UsuarioQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuario:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(UsuarioPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseUsuario:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseUsuario:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				UsuarioPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = UsuarioPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(UsuarioPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.UsuarioPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows = 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows = UsuarioPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collActividads !== null) {
				foreach ($this->collActividads as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collActividadFinalizadas !== null) {
				foreach ($this->collActividadFinalizadas as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExpositorFerias !== null) {
				foreach ($this->collExpositorFerias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPagoExpositors !== null) {
				foreach ($this->collPagoExpositors as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = UsuarioPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collActividads !== null) {
					foreach ($this->collActividads as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collActividadFinalizadas !== null) {
					foreach ($this->collActividadFinalizadas as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExpositorFerias !== null) {
					foreach ($this->collExpositorFerias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPagoExpositors !== null) {
					foreach ($this->collPagoExpositors as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getApellido();
				break;
			case 3:
				return $this->getCedula();
				break;
			case 4:
				return $this->getIsbn();
				break;
			case 5:
				return $this->getLogin();
				break;
			case 6:
				return $this->getContrasena();
				break;
			case 7:
				return $this->getSfGuardUser();
				break;
			case 8:
				return $this->getSexo();
				break;
			case 9:
				return $this->getSfGuardUserGroup();
				break;
			case 10:
				return $this->getTipoOrganizador();
				break;
			case 11:
				return $this->getEnteOrganizador();
				break;
			case 12:
				return $this->getSector();
				break;
			case 13:
				return $this->getUnidadResponsable();
				break;
			case 14:
				return $this->getCorreo();
				break;
			case 15:
				return $this->getTelefono();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['Usuario'][$this->getPrimaryKey()] = true;
		$keys = UsuarioPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getApellido(),
			$keys[3] => $this->getCedula(),
			$keys[4] => $this->getIsbn(),
			$keys[5] => $this->getLogin(),
			$keys[6] => $this->getContrasena(),
			$keys[7] => $this->getSfGuardUser(),
			$keys[8] => $this->getSexo(),
			$keys[9] => $this->getSfGuardUserGroup(),
			$keys[10] => $this->getTipoOrganizador(),
			$keys[11] => $this->getEnteOrganizador(),
			$keys[12] => $this->getSector(),
			$keys[13] => $this->getUnidadResponsable(),
			$keys[14] => $this->getCorreo(),
			$keys[15] => $this->getTelefono(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->collActividads) {
				$result['Actividads'] = $this->collActividads->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collActividadFinalizadas) {
				$result['ActividadFinalizadas'] = $this->collActividadFinalizadas->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collExpositorFerias) {
				$result['ExpositorFerias'] = $this->collExpositorFerias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collPagoExpositors) {
				$result['PagoExpositors'] = $this->collPagoExpositors->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = UsuarioPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setApellido($value);
				break;
			case 3:
				$this->setCedula($value);
				break;
			case 4:
				$this->setIsbn($value);
				break;
			case 5:
				$this->setLogin($value);
				break;
			case 6:
				$this->setContrasena($value);
				break;
			case 7:
				$this->setSfGuardUser($value);
				break;
			case 8:
				$this->setSexo($value);
				break;
			case 9:
				$this->setSfGuardUserGroup($value);
				break;
			case 10:
				$this->setTipoOrganizador($value);
				break;
			case 11:
				$this->setEnteOrganizador($value);
				break;
			case 12:
				$this->setSector($value);
				break;
			case 13:
				$this->setUnidadResponsable($value);
				break;
			case 14:
				$this->setCorreo($value);
				break;
			case 15:
				$this->setTelefono($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = UsuarioPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setApellido($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCedula($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setIsbn($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setLogin($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setContrasena($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSfGuardUser($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setSexo($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setSfGuardUserGroup($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setTipoOrganizador($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setEnteOrganizador($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setSector($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setUnidadResponsable($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCorreo($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setTelefono($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);

		if ($this->isColumnModified(UsuarioPeer::ID)) $criteria->add(UsuarioPeer::ID, $this->id);
		if ($this->isColumnModified(UsuarioPeer::NOMBRE)) $criteria->add(UsuarioPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(UsuarioPeer::APELLIDO)) $criteria->add(UsuarioPeer::APELLIDO, $this->apellido);
		if ($this->isColumnModified(UsuarioPeer::CEDULA)) $criteria->add(UsuarioPeer::CEDULA, $this->cedula);
		if ($this->isColumnModified(UsuarioPeer::ISBN)) $criteria->add(UsuarioPeer::ISBN, $this->isbn);
		if ($this->isColumnModified(UsuarioPeer::LOGIN)) $criteria->add(UsuarioPeer::LOGIN, $this->login);
		if ($this->isColumnModified(UsuarioPeer::CONTRASENA)) $criteria->add(UsuarioPeer::CONTRASENA, $this->contrasena);
		if ($this->isColumnModified(UsuarioPeer::SF_GUARD_USER)) $criteria->add(UsuarioPeer::SF_GUARD_USER, $this->sf_guard_user);
		if ($this->isColumnModified(UsuarioPeer::SEXO)) $criteria->add(UsuarioPeer::SEXO, $this->sexo);
		if ($this->isColumnModified(UsuarioPeer::SF_GUARD_USER_GROUP)) $criteria->add(UsuarioPeer::SF_GUARD_USER_GROUP, $this->sf_guard_user_group);
		if ($this->isColumnModified(UsuarioPeer::TIPO_ORGANIZADOR)) $criteria->add(UsuarioPeer::TIPO_ORGANIZADOR, $this->tipo_organizador);
		if ($this->isColumnModified(UsuarioPeer::ENTE_ORGANIZADOR)) $criteria->add(UsuarioPeer::ENTE_ORGANIZADOR, $this->ente_organizador);
		if ($this->isColumnModified(UsuarioPeer::SECTOR)) $criteria->add(UsuarioPeer::SECTOR, $this->sector);
		if ($this->isColumnModified(UsuarioPeer::UNIDAD_RESPONSABLE)) $criteria->add(UsuarioPeer::UNIDAD_RESPONSABLE, $this->unidad_responsable);
		if ($this->isColumnModified(UsuarioPeer::CORREO)) $criteria->add(UsuarioPeer::CORREO, $this->correo);
		if ($this->isColumnModified(UsuarioPeer::TELEFONO)) $criteria->add(UsuarioPeer::TELEFONO, $this->telefono);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(UsuarioPeer::DATABASE_NAME);
		$criteria->add(UsuarioPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Usuario (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setNombre($this->getNombre());
		$copyObj->setApellido($this->getApellido());
		$copyObj->setCedula($this->getCedula());
		$copyObj->setIsbn($this->getIsbn());
		$copyObj->setLogin($this->getLogin());
		$copyObj->setContrasena($this->getContrasena());
		$copyObj->setSfGuardUser($this->getSfGuardUser());
		$copyObj->setSexo($this->getSexo());
		$copyObj->setSfGuardUserGroup($this->getSfGuardUserGroup());
		$copyObj->setTipoOrganizador($this->getTipoOrganizador());
		$copyObj->setEnteOrganizador($this->getEnteOrganizador());
		$copyObj->setSector($this->getSector());
		$copyObj->setUnidadResponsable($this->getUnidadResponsable());
		$copyObj->setCorreo($this->getCorreo());
		$copyObj->setTelefono($this->getTelefono());

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getActividads() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActividad($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getActividadFinalizadas() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActividadFinalizada($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExpositorFerias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExpositorFeria($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPagoExpositors() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPagoExpositor($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Usuario Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     UsuarioPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new UsuarioPeer();
		}
		return self::$peer;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name 
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('Actividad' == $relationName) {
			return $this->initActividads();
		}
		if ('ActividadFinalizada' == $relationName) {
			return $this->initActividadFinalizadas();
		}
		if ('ExpositorFeria' == $relationName) {
			return $this->initExpositorFerias();
		}
		if ('PagoExpositor' == $relationName) {
			return $this->initPagoExpositors();
		}
	}

	/**
	 * Clears out the collActividads collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActividads()
	 */
	public function clearActividads()
	{
		$this->collActividads = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActividads collection.
	 *
	 * By default this just sets the collActividads collection to an empty array (like clearcollActividads());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initActividads($overrideExisting = true)
	{
		if (null !== $this->collActividads && !$overrideExisting) {
			return;
		}
		$this->collActividads = new PropelObjectCollection();
		$this->collActividads->setModel('Actividad');
	}

	/**
	 * Gets an array of Actividad objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Usuario is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 * @throws     PropelException
	 */
	public function getActividads($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividads) {
				// return empty collection
				$this->initActividads();
			} else {
				$collActividads = ActividadQuery::create(null, $criteria)
					->filterByUsuario($this)
					->find($con);
				if (null !== $criteria) {
					return $collActividads;
				}
				$this->collActividads = $collActividads;
			}
		}
		return $this->collActividads;
	}

	/**
	 * Returns the number of related Actividad objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Actividad objects.
	 * @throws     PropelException
	 */
	public function countActividads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividads) {
				return 0;
			} else {
				$query = ActividadQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByUsuario($this)
					->count($con);
			}
		} else {
			return count($this->collActividads);
		}
	}

	/**
	 * Method called to associate a Actividad object to this object
	 * through the Actividad foreign key attribute.
	 *
	 * @param      Actividad $l Actividad
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActividad(Actividad $l)
	{
		if ($this->collActividads === null) {
			$this->initActividads();
		}
		if (!$this->collActividads->contains($l)) { // only add it if the **same** object is not already associated
			$this->collActividads[]= $l;
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Actividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 */
	public function getActividadsJoinFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadQuery::create(null, $criteria);
		$query->joinWith('Feria', $join_behavior);

		return $this->getActividads($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related Actividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 */
	public function getActividadsJoinTipoActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadQuery::create(null, $criteria);
		$query->joinWith('TipoActividad', $join_behavior);

		return $this->getActividads($query, $con);
	}

	/**
	 * Clears out the collActividadFinalizadas collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActividadFinalizadas()
	 */
	public function clearActividadFinalizadas()
	{
		$this->collActividadFinalizadas = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActividadFinalizadas collection.
	 *
	 * By default this just sets the collActividadFinalizadas collection to an empty array (like clearcollActividadFinalizadas());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initActividadFinalizadas($overrideExisting = true)
	{
		if (null !== $this->collActividadFinalizadas && !$overrideExisting) {
			return;
		}
		$this->collActividadFinalizadas = new PropelObjectCollection();
		$this->collActividadFinalizadas->setModel('ActividadFinalizada');
	}

	/**
	 * Gets an array of ActividadFinalizada objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Usuario is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 * @throws     PropelException
	 */
	public function getActividadFinalizadas($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collActividadFinalizadas || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividadFinalizadas) {
				// return empty collection
				$this->initActividadFinalizadas();
			} else {
				$collActividadFinalizadas = ActividadFinalizadaQuery::create(null, $criteria)
					->filterByUsuario($this)
					->find($con);
				if (null !== $criteria) {
					return $collActividadFinalizadas;
				}
				$this->collActividadFinalizadas = $collActividadFinalizadas;
			}
		}
		return $this->collActividadFinalizadas;
	}

	/**
	 * Returns the number of related ActividadFinalizada objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActividadFinalizada objects.
	 * @throws     PropelException
	 */
	public function countActividadFinalizadas(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collActividadFinalizadas || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividadFinalizadas) {
				return 0;
			} else {
				$query = ActividadFinalizadaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByUsuario($this)
					->count($con);
			}
		} else {
			return count($this->collActividadFinalizadas);
		}
	}

	/**
	 * Method called to associate a ActividadFinalizada object to this object
	 * through the ActividadFinalizada foreign key attribute.
	 *
	 * @param      ActividadFinalizada $l ActividadFinalizada
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActividadFinalizada(ActividadFinalizada $l)
	{
		if ($this->collActividadFinalizadas === null) {
			$this->initActividadFinalizadas();
		}
		if (!$this->collActividadFinalizadas->contains($l)) { // only add it if the **same** object is not already associated
			$this->collActividadFinalizadas[]= $l;
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Actividad', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Feria', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinPais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Pais', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinEstado($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Estado', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinMunicipio($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Municipio', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinParroquia($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Parroquia', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ActividadFinalizadas from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ActividadFinalizada[] List of ActividadFinalizada objects
	 */
	public function getActividadFinalizadasJoinRegion($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadFinalizadaQuery::create(null, $criteria);
		$query->joinWith('Region', $join_behavior);

		return $this->getActividadFinalizadas($query, $con);
	}

	/**
	 * Clears out the collExpositorFerias collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExpositorFerias()
	 */
	public function clearExpositorFerias()
	{
		$this->collExpositorFerias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExpositorFerias collection.
	 *
	 * By default this just sets the collExpositorFerias collection to an empty array (like clearcollExpositorFerias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initExpositorFerias($overrideExisting = true)
	{
		if (null !== $this->collExpositorFerias && !$overrideExisting) {
			return;
		}
		$this->collExpositorFerias = new PropelObjectCollection();
		$this->collExpositorFerias->setModel('ExpositorFeria');
	}

	/**
	 * Gets an array of ExpositorFeria objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Usuario is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 * @throws     PropelException
	 */
	public function getExpositorFerias($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collExpositorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorFerias) {
				// return empty collection
				$this->initExpositorFerias();
			} else {
				$collExpositorFerias = ExpositorFeriaQuery::create(null, $criteria)
					->filterByUsuario($this)
					->find($con);
				if (null !== $criteria) {
					return $collExpositorFerias;
				}
				$this->collExpositorFerias = $collExpositorFerias;
			}
		}
		return $this->collExpositorFerias;
	}

	/**
	 * Returns the number of related ExpositorFeria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ExpositorFeria objects.
	 * @throws     PropelException
	 */
	public function countExpositorFerias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collExpositorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorFerias) {
				return 0;
			} else {
				$query = ExpositorFeriaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByUsuario($this)
					->count($con);
			}
		} else {
			return count($this->collExpositorFerias);
		}
	}

	/**
	 * Method called to associate a ExpositorFeria object to this object
	 * through the ExpositorFeria foreign key attribute.
	 *
	 * @param      ExpositorFeria $l ExpositorFeria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExpositorFeria(ExpositorFeria $l)
	{
		if ($this->collExpositorFerias === null) {
			$this->initExpositorFerias();
		}
		if (!$this->collExpositorFerias->contains($l)) { // only add it if the **same** object is not already associated
			$this->collExpositorFerias[]= $l;
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('Feria', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinExpositor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('Expositor', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinTipoDistribuidor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('TipoDistribuidor', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinStand($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('Stand', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}

	/**
	 * Clears out the collPagoExpositors collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPagoExpositors()
	 */
	public function clearPagoExpositors()
	{
		$this->collPagoExpositors = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPagoExpositors collection.
	 *
	 * By default this just sets the collPagoExpositors collection to an empty array (like clearcollPagoExpositors());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initPagoExpositors($overrideExisting = true)
	{
		if (null !== $this->collPagoExpositors && !$overrideExisting) {
			return;
		}
		$this->collPagoExpositors = new PropelObjectCollection();
		$this->collPagoExpositors->setModel('PagoExpositor');
	}

	/**
	 * Gets an array of PagoExpositor objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Usuario is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array PagoExpositor[] List of PagoExpositor objects
	 * @throws     PropelException
	 */
	public function getPagoExpositors($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collPagoExpositors || null !== $criteria) {
			if ($this->isNew() && null === $this->collPagoExpositors) {
				// return empty collection
				$this->initPagoExpositors();
			} else {
				$collPagoExpositors = PagoExpositorQuery::create(null, $criteria)
					->filterByUsuario($this)
					->find($con);
				if (null !== $criteria) {
					return $collPagoExpositors;
				}
				$this->collPagoExpositors = $collPagoExpositors;
			}
		}
		return $this->collPagoExpositors;
	}

	/**
	 * Returns the number of related PagoExpositor objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PagoExpositor objects.
	 * @throws     PropelException
	 */
	public function countPagoExpositors(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collPagoExpositors || null !== $criteria) {
			if ($this->isNew() && null === $this->collPagoExpositors) {
				return 0;
			} else {
				$query = PagoExpositorQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByUsuario($this)
					->count($con);
			}
		} else {
			return count($this->collPagoExpositors);
		}
	}

	/**
	 * Method called to associate a PagoExpositor object to this object
	 * through the PagoExpositor foreign key attribute.
	 *
	 * @param      PagoExpositor $l PagoExpositor
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPagoExpositor(PagoExpositor $l)
	{
		if ($this->collPagoExpositors === null) {
			$this->initPagoExpositors();
		}
		if (!$this->collPagoExpositors->contains($l)) { // only add it if the **same** object is not already associated
			$this->collPagoExpositors[]= $l;
			$l->setUsuario($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related PagoExpositors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PagoExpositor[] List of PagoExpositor objects
	 */
	public function getPagoExpositorsJoinFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PagoExpositorQuery::create(null, $criteria);
		$query->joinWith('Feria', $join_behavior);

		return $this->getPagoExpositors($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related PagoExpositors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PagoExpositor[] List of PagoExpositor objects
	 */
	public function getPagoExpositorsJoinExpositor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PagoExpositorQuery::create(null, $criteria);
		$query->joinWith('Expositor', $join_behavior);

		return $this->getPagoExpositors($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related PagoExpositors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PagoExpositor[] List of PagoExpositor objects
	 */
	public function getPagoExpositorsJoinExpositorFeria($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PagoExpositorQuery::create(null, $criteria);
		$query->joinWith('ExpositorFeria', $join_behavior);

		return $this->getPagoExpositors($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Usuario is new, it will return
	 * an empty collection; or if this Usuario has previously
	 * been saved, it will retrieve related PagoExpositors from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Usuario.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PagoExpositor[] List of PagoExpositor objects
	 */
	public function getPagoExpositorsJoinBanco($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PagoExpositorQuery::create(null, $criteria);
		$query->joinWith('Banco', $join_behavior);

		return $this->getPagoExpositors($query, $con);
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->nombre = null;
		$this->apellido = null;
		$this->cedula = null;
		$this->isbn = null;
		$this->login = null;
		$this->contrasena = null;
		$this->sf_guard_user = null;
		$this->sexo = null;
		$this->sf_guard_user_group = null;
		$this->tipo_organizador = null;
		$this->ente_organizador = null;
		$this->sector = null;
		$this->unidad_responsable = null;
		$this->correo = null;
		$this->telefono = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->applyDefaultValues();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collActividads) {
				foreach ($this->collActividads as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collActividadFinalizadas) {
				foreach ($this->collActividadFinalizadas as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExpositorFerias) {
				foreach ($this->collExpositorFerias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPagoExpositors) {
				foreach ($this->collPagoExpositors as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collActividads instanceof PropelCollection) {
			$this->collActividads->clearIterator();
		}
		$this->collActividads = null;
		if ($this->collActividadFinalizadas instanceof PropelCollection) {
			$this->collActividadFinalizadas->clearIterator();
		}
		$this->collActividadFinalizadas = null;
		if ($this->collExpositorFerias instanceof PropelCollection) {
			$this->collExpositorFerias->clearIterator();
		}
		$this->collExpositorFerias = null;
		if ($this->collPagoExpositors instanceof PropelCollection) {
			$this->collPagoExpositors->clearIterator();
		}
		$this->collPagoExpositors = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(UsuarioPeer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseUsuario:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseUsuario
