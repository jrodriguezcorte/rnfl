<?php


/**
 * Base class that represents a query for the 'feria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Mon May 11 16:29:20 2015
 *
 * @method     FeriaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     FeriaQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     FeriaQuery orderByLema($order = Criteria::ASC) Order by the lema column
 * @method     FeriaQuery orderByTema($order = Criteria::ASC) Order by the tema column
 * @method     FeriaQuery orderByIdTipoFeria($order = Criteria::ASC) Order by the id_tipo_feria column
 * @method     FeriaQuery orderByIdPaisHomenajeado($order = Criteria::ASC) Order by the id_pais_homenajeado column
 * @method     FeriaQuery orderByEscritorHomenajeado($order = Criteria::ASC) Order by the escritor_homenajeado column
 * @method     FeriaQuery orderByNombreEscritorHomenajeado($order = Criteria::ASC) Order by the nombre_escritor_homenajeado column
 * @method     FeriaQuery orderByFechaInicio($order = Criteria::ASC) Order by the fecha_inicio column
 * @method     FeriaQuery orderByFechaFin($order = Criteria::ASC) Order by the fecha_fin column
 * @method     FeriaQuery orderByHoraInicio($order = Criteria::ASC) Order by the hora_inicio column
 * @method     FeriaQuery orderByHoraFin($order = Criteria::ASC) Order by the hora_fin column
 * @method     FeriaQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method     FeriaQuery orderByIdEstado($order = Criteria::ASC) Order by the id_estado column
 * @method     FeriaQuery orderByIdMunicipio($order = Criteria::ASC) Order by the id_municipio column
 * @method     FeriaQuery orderByIdParroquia($order = Criteria::ASC) Order by the id_parroquia column
 * @method     FeriaQuery orderByIdRegion($order = Criteria::ASC) Order by the id_region column
 * @method     FeriaQuery orderByDireccion($order = Criteria::ASC) Order by the direccion column
 * @method     FeriaQuery orderByExtensionSuperficie($order = Criteria::ASC) Order by the extension_superficie column
 * @method     FeriaQuery orderByLibroMasVendido($order = Criteria::ASC) Order by the libro_mas_vendido column
 * @method     FeriaQuery orderByAutorLibroMasVendido($order = Criteria::ASC) Order by the autor_libro_mas_vendido column
 * @method     FeriaQuery orderByCosto($order = Criteria::ASC) Order by the costo column
 * @method     FeriaQuery orderByIdUsuario($order = Criteria::ASC) Order by the id_usuario column
 * @method     FeriaQuery orderByIdStatusFeria($order = Criteria::ASC) Order by the id_status_feria column
 * @method     FeriaQuery orderByActivo($order = Criteria::ASC) Order by the activo column
 *
 * @method     FeriaQuery groupById() Group by the id column
 * @method     FeriaQuery groupByNombre() Group by the nombre column
 * @method     FeriaQuery groupByLema() Group by the lema column
 * @method     FeriaQuery groupByTema() Group by the tema column
 * @method     FeriaQuery groupByIdTipoFeria() Group by the id_tipo_feria column
 * @method     FeriaQuery groupByIdPaisHomenajeado() Group by the id_pais_homenajeado column
 * @method     FeriaQuery groupByEscritorHomenajeado() Group by the escritor_homenajeado column
 * @method     FeriaQuery groupByNombreEscritorHomenajeado() Group by the nombre_escritor_homenajeado column
 * @method     FeriaQuery groupByFechaInicio() Group by the fecha_inicio column
 * @method     FeriaQuery groupByFechaFin() Group by the fecha_fin column
 * @method     FeriaQuery groupByHoraInicio() Group by the hora_inicio column
 * @method     FeriaQuery groupByHoraFin() Group by the hora_fin column
 * @method     FeriaQuery groupByIdPais() Group by the id_pais column
 * @method     FeriaQuery groupByIdEstado() Group by the id_estado column
 * @method     FeriaQuery groupByIdMunicipio() Group by the id_municipio column
 * @method     FeriaQuery groupByIdParroquia() Group by the id_parroquia column
 * @method     FeriaQuery groupByIdRegion() Group by the id_region column
 * @method     FeriaQuery groupByDireccion() Group by the direccion column
 * @method     FeriaQuery groupByExtensionSuperficie() Group by the extension_superficie column
 * @method     FeriaQuery groupByLibroMasVendido() Group by the libro_mas_vendido column
 * @method     FeriaQuery groupByAutorLibroMasVendido() Group by the autor_libro_mas_vendido column
 * @method     FeriaQuery groupByCosto() Group by the costo column
 * @method     FeriaQuery groupByIdUsuario() Group by the id_usuario column
 * @method     FeriaQuery groupByIdStatusFeria() Group by the id_status_feria column
 * @method     FeriaQuery groupByActivo() Group by the activo column
 *
 * @method     FeriaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     FeriaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     FeriaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     FeriaQuery leftJoinTipoFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoFeria relation
 * @method     FeriaQuery rightJoinTipoFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoFeria relation
 * @method     FeriaQuery innerJoinTipoFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoFeria relation
 *
 * @method     FeriaQuery leftJoinPaisRelatedByIdPaisHomenajeado($relationAlias = null) Adds a LEFT JOIN clause to the query using the PaisRelatedByIdPaisHomenajeado relation
 * @method     FeriaQuery rightJoinPaisRelatedByIdPaisHomenajeado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PaisRelatedByIdPaisHomenajeado relation
 * @method     FeriaQuery innerJoinPaisRelatedByIdPaisHomenajeado($relationAlias = null) Adds a INNER JOIN clause to the query using the PaisRelatedByIdPaisHomenajeado relation
 *
 * @method     FeriaQuery leftJoinPaisRelatedByIdPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the PaisRelatedByIdPais relation
 * @method     FeriaQuery rightJoinPaisRelatedByIdPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PaisRelatedByIdPais relation
 * @method     FeriaQuery innerJoinPaisRelatedByIdPais($relationAlias = null) Adds a INNER JOIN clause to the query using the PaisRelatedByIdPais relation
 *
 * @method     FeriaQuery leftJoinEstado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Estado relation
 * @method     FeriaQuery rightJoinEstado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Estado relation
 * @method     FeriaQuery innerJoinEstado($relationAlias = null) Adds a INNER JOIN clause to the query using the Estado relation
 *
 * @method     FeriaQuery leftJoinMunicipio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Municipio relation
 * @method     FeriaQuery rightJoinMunicipio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Municipio relation
 * @method     FeriaQuery innerJoinMunicipio($relationAlias = null) Adds a INNER JOIN clause to the query using the Municipio relation
 *
 * @method     FeriaQuery leftJoinParroquia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Parroquia relation
 * @method     FeriaQuery rightJoinParroquia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Parroquia relation
 * @method     FeriaQuery innerJoinParroquia($relationAlias = null) Adds a INNER JOIN clause to the query using the Parroquia relation
 *
 * @method     FeriaQuery leftJoinRegion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Region relation
 * @method     FeriaQuery rightJoinRegion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Region relation
 * @method     FeriaQuery innerJoinRegion($relationAlias = null) Adds a INNER JOIN clause to the query using the Region relation
 *
 * @method     FeriaQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method     FeriaQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method     FeriaQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method     FeriaQuery leftJoinStatusFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the StatusFeria relation
 * @method     FeriaQuery rightJoinStatusFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the StatusFeria relation
 * @method     FeriaQuery innerJoinStatusFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the StatusFeria relation
 *
 * @method     FeriaQuery leftJoinActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Actividad relation
 * @method     FeriaQuery rightJoinActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Actividad relation
 * @method     FeriaQuery innerJoinActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the Actividad relation
 *
 * @method     FeriaQuery leftJoinActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadFinalizada relation
 * @method     FeriaQuery rightJoinActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadFinalizada relation
 * @method     FeriaQuery innerJoinActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadFinalizada relation
 *
 * @method     FeriaQuery leftJoinBanco($relationAlias = null) Adds a LEFT JOIN clause to the query using the Banco relation
 * @method     FeriaQuery rightJoinBanco($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Banco relation
 * @method     FeriaQuery innerJoinBanco($relationAlias = null) Adds a INNER JOIN clause to the query using the Banco relation
 *
 * @method     FeriaQuery leftJoinCuenta($relationAlias = null) Adds a LEFT JOIN clause to the query using the Cuenta relation
 * @method     FeriaQuery rightJoinCuenta($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Cuenta relation
 * @method     FeriaQuery innerJoinCuenta($relationAlias = null) Adds a INNER JOIN clause to the query using the Cuenta relation
 *
 * @method     FeriaQuery leftJoinExpositorFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorFeria relation
 * @method     FeriaQuery rightJoinExpositorFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorFeria relation
 * @method     FeriaQuery innerJoinExpositorFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorFeria relation
 *
 * @method     FeriaQuery leftJoinExpositorLineaeditorial($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorLineaeditorial relation
 * @method     FeriaQuery rightJoinExpositorLineaeditorial($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorLineaeditorial relation
 * @method     FeriaQuery innerJoinExpositorLineaeditorial($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorLineaeditorial relation
 *
 * @method     FeriaQuery leftJoinFeriaSelloeditorial($relationAlias = null) Adds a LEFT JOIN clause to the query using the FeriaSelloeditorial relation
 * @method     FeriaQuery rightJoinFeriaSelloeditorial($relationAlias = null) Adds a RIGHT JOIN clause to the query using the FeriaSelloeditorial relation
 * @method     FeriaQuery innerJoinFeriaSelloeditorial($relationAlias = null) Adds a INNER JOIN clause to the query using the FeriaSelloeditorial relation
 *
 * @method     FeriaQuery leftJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     FeriaQuery rightJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     FeriaQuery innerJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 *
 * @method     FeriaQuery leftJoinPagoExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the PagoExpositor relation
 * @method     FeriaQuery rightJoinPagoExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PagoExpositor relation
 * @method     FeriaQuery innerJoinPagoExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the PagoExpositor relation
 *
 * @method     FeriaQuery leftJoinPonenteActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the PonenteActividad relation
 * @method     FeriaQuery rightJoinPonenteActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PonenteActividad relation
 * @method     FeriaQuery innerJoinPonenteActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the PonenteActividad relation
 *
 * @method     FeriaQuery leftJoinStand($relationAlias = null) Adds a LEFT JOIN clause to the query using the Stand relation
 * @method     FeriaQuery rightJoinStand($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Stand relation
 * @method     FeriaQuery innerJoinStand($relationAlias = null) Adds a INNER JOIN clause to the query using the Stand relation
 *
 * @method     FeriaQuery leftJoinStatus($relationAlias = null) Adds a LEFT JOIN clause to the query using the Status relation
 * @method     FeriaQuery rightJoinStatus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Status relation
 * @method     FeriaQuery innerJoinStatus($relationAlias = null) Adds a INNER JOIN clause to the query using the Status relation
 *
 * @method     FeriaQuery leftJoinVisitante($relationAlias = null) Adds a LEFT JOIN clause to the query using the Visitante relation
 * @method     FeriaQuery rightJoinVisitante($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Visitante relation
 * @method     FeriaQuery innerJoinVisitante($relationAlias = null) Adds a INNER JOIN clause to the query using the Visitante relation
 *
 * @method     Feria findOne(PropelPDO $con = null) Return the first Feria matching the query
 * @method     Feria findOneOrCreate(PropelPDO $con = null) Return the first Feria matching the query, or a new Feria object populated from the query conditions when no match is found
 *
 * @method     Feria findOneById(string $id) Return the first Feria filtered by the id column
 * @method     Feria findOneByNombre(string $nombre) Return the first Feria filtered by the nombre column
 * @method     Feria findOneByLema(string $lema) Return the first Feria filtered by the lema column
 * @method     Feria findOneByTema(string $tema) Return the first Feria filtered by the tema column
 * @method     Feria findOneByIdTipoFeria(int $id_tipo_feria) Return the first Feria filtered by the id_tipo_feria column
 * @method     Feria findOneByIdPaisHomenajeado(int $id_pais_homenajeado) Return the first Feria filtered by the id_pais_homenajeado column
 * @method     Feria findOneByEscritorHomenajeado(boolean $escritor_homenajeado) Return the first Feria filtered by the escritor_homenajeado column
 * @method     Feria findOneByNombreEscritorHomenajeado(string $nombre_escritor_homenajeado) Return the first Feria filtered by the nombre_escritor_homenajeado column
 * @method     Feria findOneByFechaInicio(string $fecha_inicio) Return the first Feria filtered by the fecha_inicio column
 * @method     Feria findOneByFechaFin(string $fecha_fin) Return the first Feria filtered by the fecha_fin column
 * @method     Feria findOneByHoraInicio(string $hora_inicio) Return the first Feria filtered by the hora_inicio column
 * @method     Feria findOneByHoraFin(string $hora_fin) Return the first Feria filtered by the hora_fin column
 * @method     Feria findOneByIdPais(int $id_pais) Return the first Feria filtered by the id_pais column
 * @method     Feria findOneByIdEstado(int $id_estado) Return the first Feria filtered by the id_estado column
 * @method     Feria findOneByIdMunicipio(int $id_municipio) Return the first Feria filtered by the id_municipio column
 * @method     Feria findOneByIdParroquia(int $id_parroquia) Return the first Feria filtered by the id_parroquia column
 * @method     Feria findOneByIdRegion(int $id_region) Return the first Feria filtered by the id_region column
 * @method     Feria findOneByDireccion(string $direccion) Return the first Feria filtered by the direccion column
 * @method     Feria findOneByExtensionSuperficie(string $extension_superficie) Return the first Feria filtered by the extension_superficie column
 * @method     Feria findOneByLibroMasVendido(string $libro_mas_vendido) Return the first Feria filtered by the libro_mas_vendido column
 * @method     Feria findOneByAutorLibroMasVendido(string $autor_libro_mas_vendido) Return the first Feria filtered by the autor_libro_mas_vendido column
 * @method     Feria findOneByCosto(string $costo) Return the first Feria filtered by the costo column
 * @method     Feria findOneByIdUsuario(int $id_usuario) Return the first Feria filtered by the id_usuario column
 * @method     Feria findOneByIdStatusFeria(int $id_status_feria) Return the first Feria filtered by the id_status_feria column
 * @method     Feria findOneByActivo(boolean $activo) Return the first Feria filtered by the activo column
 *
 * @method     array findById(string $id) Return Feria objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Feria objects filtered by the nombre column
 * @method     array findByLema(string $lema) Return Feria objects filtered by the lema column
 * @method     array findByTema(string $tema) Return Feria objects filtered by the tema column
 * @method     array findByIdTipoFeria(int $id_tipo_feria) Return Feria objects filtered by the id_tipo_feria column
 * @method     array findByIdPaisHomenajeado(int $id_pais_homenajeado) Return Feria objects filtered by the id_pais_homenajeado column
 * @method     array findByEscritorHomenajeado(boolean $escritor_homenajeado) Return Feria objects filtered by the escritor_homenajeado column
 * @method     array findByNombreEscritorHomenajeado(string $nombre_escritor_homenajeado) Return Feria objects filtered by the nombre_escritor_homenajeado column
 * @method     array findByFechaInicio(string $fecha_inicio) Return Feria objects filtered by the fecha_inicio column
 * @method     array findByFechaFin(string $fecha_fin) Return Feria objects filtered by the fecha_fin column
 * @method     array findByHoraInicio(string $hora_inicio) Return Feria objects filtered by the hora_inicio column
 * @method     array findByHoraFin(string $hora_fin) Return Feria objects filtered by the hora_fin column
 * @method     array findByIdPais(int $id_pais) Return Feria objects filtered by the id_pais column
 * @method     array findByIdEstado(int $id_estado) Return Feria objects filtered by the id_estado column
 * @method     array findByIdMunicipio(int $id_municipio) Return Feria objects filtered by the id_municipio column
 * @method     array findByIdParroquia(int $id_parroquia) Return Feria objects filtered by the id_parroquia column
 * @method     array findByIdRegion(int $id_region) Return Feria objects filtered by the id_region column
 * @method     array findByDireccion(string $direccion) Return Feria objects filtered by the direccion column
 * @method     array findByExtensionSuperficie(string $extension_superficie) Return Feria objects filtered by the extension_superficie column
 * @method     array findByLibroMasVendido(string $libro_mas_vendido) Return Feria objects filtered by the libro_mas_vendido column
 * @method     array findByAutorLibroMasVendido(string $autor_libro_mas_vendido) Return Feria objects filtered by the autor_libro_mas_vendido column
 * @method     array findByCosto(string $costo) Return Feria objects filtered by the costo column
 * @method     array findByIdUsuario(int $id_usuario) Return Feria objects filtered by the id_usuario column
 * @method     array findByIdStatusFeria(int $id_status_feria) Return Feria objects filtered by the id_status_feria column
 * @method     array findByActivo(boolean $activo) Return Feria objects filtered by the activo column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseFeriaQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseFeriaQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Feria', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new FeriaQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    FeriaQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof FeriaQuery) {
			return $criteria;
		}
		$query = new FeriaQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Feria|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = FeriaPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(FeriaPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(FeriaPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(FeriaPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombre('fooValue');   // WHERE nombre = 'fooValue'
	 * $query->filterByNombre('%fooValue%'); // WHERE nombre LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombre The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the lema column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByLema('fooValue');   // WHERE lema = 'fooValue'
	 * $query->filterByLema('%fooValue%'); // WHERE lema LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $lema The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByLema($lema = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($lema)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $lema)) {
				$lema = str_replace('*', '%', $lema);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::LEMA, $lema, $comparison);
	}

	/**
	 * Filter the query on the tema column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTema('fooValue');   // WHERE tema = 'fooValue'
	 * $query->filterByTema('%fooValue%'); // WHERE tema LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $tema The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByTema($tema = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($tema)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $tema)) {
				$tema = str_replace('*', '%', $tema);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::TEMA, $tema, $comparison);
	}

	/**
	 * Filter the query on the id_tipo_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdTipoFeria(1234); // WHERE id_tipo_feria = 1234
	 * $query->filterByIdTipoFeria(array(12, 34)); // WHERE id_tipo_feria IN (12, 34)
	 * $query->filterByIdTipoFeria(array('min' => 12)); // WHERE id_tipo_feria > 12
	 * </code>
	 *
	 * @see       filterByTipoFeria()
	 *
	 * @param     mixed $idTipoFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdTipoFeria($idTipoFeria = null, $comparison = null)
	{
		if (is_array($idTipoFeria)) {
			$useMinMax = false;
			if (isset($idTipoFeria['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_TIPO_FERIA, $idTipoFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idTipoFeria['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_TIPO_FERIA, $idTipoFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_TIPO_FERIA, $idTipoFeria, $comparison);
	}

	/**
	 * Filter the query on the id_pais_homenajeado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdPaisHomenajeado(1234); // WHERE id_pais_homenajeado = 1234
	 * $query->filterByIdPaisHomenajeado(array(12, 34)); // WHERE id_pais_homenajeado IN (12, 34)
	 * $query->filterByIdPaisHomenajeado(array('min' => 12)); // WHERE id_pais_homenajeado > 12
	 * </code>
	 *
	 * @see       filterByPaisRelatedByIdPaisHomenajeado()
	 *
	 * @param     mixed $idPaisHomenajeado The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdPaisHomenajeado($idPaisHomenajeado = null, $comparison = null)
	{
		if (is_array($idPaisHomenajeado)) {
			$useMinMax = false;
			if (isset($idPaisHomenajeado['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_PAIS_HOMENAJEADO, $idPaisHomenajeado['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPaisHomenajeado['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_PAIS_HOMENAJEADO, $idPaisHomenajeado['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_PAIS_HOMENAJEADO, $idPaisHomenajeado, $comparison);
	}

	/**
	 * Filter the query on the escritor_homenajeado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEscritorHomenajeado(true); // WHERE escritor_homenajeado = true
	 * $query->filterByEscritorHomenajeado('yes'); // WHERE escritor_homenajeado = true
	 * </code>
	 *
	 * @param     boolean|string $escritorHomenajeado The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByEscritorHomenajeado($escritorHomenajeado = null, $comparison = null)
	{
		if (is_string($escritorHomenajeado)) {
			$escritor_homenajeado = in_array(strtolower($escritorHomenajeado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(FeriaPeer::ESCRITOR_HOMENAJEADO, $escritorHomenajeado, $comparison);
	}

	/**
	 * Filter the query on the nombre_escritor_homenajeado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreEscritorHomenajeado('fooValue');   // WHERE nombre_escritor_homenajeado = 'fooValue'
	 * $query->filterByNombreEscritorHomenajeado('%fooValue%'); // WHERE nombre_escritor_homenajeado LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreEscritorHomenajeado The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByNombreEscritorHomenajeado($nombreEscritorHomenajeado = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreEscritorHomenajeado)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreEscritorHomenajeado)) {
				$nombreEscritorHomenajeado = str_replace('*', '%', $nombreEscritorHomenajeado);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::NOMBRE_ESCRITOR_HOMENAJEADO, $nombreEscritorHomenajeado, $comparison);
	}

	/**
	 * Filter the query on the fecha_inicio column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFechaInicio('2011-03-14'); // WHERE fecha_inicio = '2011-03-14'
	 * $query->filterByFechaInicio('now'); // WHERE fecha_inicio = '2011-03-14'
	 * $query->filterByFechaInicio(array('max' => 'yesterday')); // WHERE fecha_inicio > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fechaInicio The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByFechaInicio($fechaInicio = null, $comparison = null)
	{
		if (is_array($fechaInicio)) {
			$useMinMax = false;
			if (isset($fechaInicio['min'])) {
				$this->addUsingAlias(FeriaPeer::FECHA_INICIO, $fechaInicio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fechaInicio['max'])) {
				$this->addUsingAlias(FeriaPeer::FECHA_INICIO, $fechaInicio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::FECHA_INICIO, $fechaInicio, $comparison);
	}

	/**
	 * Filter the query on the fecha_fin column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFechaFin('2011-03-14'); // WHERE fecha_fin = '2011-03-14'
	 * $query->filterByFechaFin('now'); // WHERE fecha_fin = '2011-03-14'
	 * $query->filterByFechaFin(array('max' => 'yesterday')); // WHERE fecha_fin > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fechaFin The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByFechaFin($fechaFin = null, $comparison = null)
	{
		if (is_array($fechaFin)) {
			$useMinMax = false;
			if (isset($fechaFin['min'])) {
				$this->addUsingAlias(FeriaPeer::FECHA_FIN, $fechaFin['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fechaFin['max'])) {
				$this->addUsingAlias(FeriaPeer::FECHA_FIN, $fechaFin['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::FECHA_FIN, $fechaFin, $comparison);
	}

	/**
	 * Filter the query on the hora_inicio column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHoraInicio('2011-03-14'); // WHERE hora_inicio = '2011-03-14'
	 * $query->filterByHoraInicio('now'); // WHERE hora_inicio = '2011-03-14'
	 * $query->filterByHoraInicio(array('max' => 'yesterday')); // WHERE hora_inicio > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $horaInicio The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByHoraInicio($horaInicio = null, $comparison = null)
	{
		if (is_array($horaInicio)) {
			$useMinMax = false;
			if (isset($horaInicio['min'])) {
				$this->addUsingAlias(FeriaPeer::HORA_INICIO, $horaInicio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($horaInicio['max'])) {
				$this->addUsingAlias(FeriaPeer::HORA_INICIO, $horaInicio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::HORA_INICIO, $horaInicio, $comparison);
	}

	/**
	 * Filter the query on the hora_fin column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHoraFin('2011-03-14'); // WHERE hora_fin = '2011-03-14'
	 * $query->filterByHoraFin('now'); // WHERE hora_fin = '2011-03-14'
	 * $query->filterByHoraFin(array('max' => 'yesterday')); // WHERE hora_fin > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $horaFin The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByHoraFin($horaFin = null, $comparison = null)
	{
		if (is_array($horaFin)) {
			$useMinMax = false;
			if (isset($horaFin['min'])) {
				$this->addUsingAlias(FeriaPeer::HORA_FIN, $horaFin['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($horaFin['max'])) {
				$this->addUsingAlias(FeriaPeer::HORA_FIN, $horaFin['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::HORA_FIN, $horaFin, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdPais(1234); // WHERE id_pais = 1234
	 * $query->filterByIdPais(array(12, 34)); // WHERE id_pais IN (12, 34)
	 * $query->filterByIdPais(array('min' => 12)); // WHERE id_pais > 12
	 * </code>
	 *
	 * @see       filterByPaisRelatedByIdPais()
	 *
	 * @param     mixed $idPais The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query on the id_estado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdEstado(1234); // WHERE id_estado = 1234
	 * $query->filterByIdEstado(array(12, 34)); // WHERE id_estado IN (12, 34)
	 * $query->filterByIdEstado(array('min' => 12)); // WHERE id_estado > 12
	 * </code>
	 *
	 * @see       filterByEstado()
	 *
	 * @param     mixed $idEstado The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdEstado($idEstado = null, $comparison = null)
	{
		if (is_array($idEstado)) {
			$useMinMax = false;
			if (isset($idEstado['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_ESTADO, $idEstado['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idEstado['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_ESTADO, $idEstado['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_ESTADO, $idEstado, $comparison);
	}

	/**
	 * Filter the query on the id_municipio column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdMunicipio(1234); // WHERE id_municipio = 1234
	 * $query->filterByIdMunicipio(array(12, 34)); // WHERE id_municipio IN (12, 34)
	 * $query->filterByIdMunicipio(array('min' => 12)); // WHERE id_municipio > 12
	 * </code>
	 *
	 * @see       filterByMunicipio()
	 *
	 * @param     mixed $idMunicipio The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdMunicipio($idMunicipio = null, $comparison = null)
	{
		if (is_array($idMunicipio)) {
			$useMinMax = false;
			if (isset($idMunicipio['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_MUNICIPIO, $idMunicipio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMunicipio['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_MUNICIPIO, $idMunicipio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_MUNICIPIO, $idMunicipio, $comparison);
	}

	/**
	 * Filter the query on the id_parroquia column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdParroquia(1234); // WHERE id_parroquia = 1234
	 * $query->filterByIdParroquia(array(12, 34)); // WHERE id_parroquia IN (12, 34)
	 * $query->filterByIdParroquia(array('min' => 12)); // WHERE id_parroquia > 12
	 * </code>
	 *
	 * @see       filterByParroquia()
	 *
	 * @param     mixed $idParroquia The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdParroquia($idParroquia = null, $comparison = null)
	{
		if (is_array($idParroquia)) {
			$useMinMax = false;
			if (isset($idParroquia['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_PARROQUIA, $idParroquia['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idParroquia['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_PARROQUIA, $idParroquia['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_PARROQUIA, $idParroquia, $comparison);
	}

	/**
	 * Filter the query on the id_region column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdRegion(1234); // WHERE id_region = 1234
	 * $query->filterByIdRegion(array(12, 34)); // WHERE id_region IN (12, 34)
	 * $query->filterByIdRegion(array('min' => 12)); // WHERE id_region > 12
	 * </code>
	 *
	 * @see       filterByRegion()
	 *
	 * @param     mixed $idRegion The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdRegion($idRegion = null, $comparison = null)
	{
		if (is_array($idRegion)) {
			$useMinMax = false;
			if (isset($idRegion['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_REGION, $idRegion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idRegion['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_REGION, $idRegion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_REGION, $idRegion, $comparison);
	}

	/**
	 * Filter the query on the direccion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDireccion('fooValue');   // WHERE direccion = 'fooValue'
	 * $query->filterByDireccion('%fooValue%'); // WHERE direccion LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $direccion The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByDireccion($direccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($direccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $direccion)) {
				$direccion = str_replace('*', '%', $direccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::DIRECCION, $direccion, $comparison);
	}

	/**
	 * Filter the query on the extension_superficie column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByExtensionSuperficie(1234); // WHERE extension_superficie = 1234
	 * $query->filterByExtensionSuperficie(array(12, 34)); // WHERE extension_superficie IN (12, 34)
	 * $query->filterByExtensionSuperficie(array('min' => 12)); // WHERE extension_superficie > 12
	 * </code>
	 *
	 * @param     mixed $extensionSuperficie The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByExtensionSuperficie($extensionSuperficie = null, $comparison = null)
	{
		if (is_array($extensionSuperficie)) {
			$useMinMax = false;
			if (isset($extensionSuperficie['min'])) {
				$this->addUsingAlias(FeriaPeer::EXTENSION_SUPERFICIE, $extensionSuperficie['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($extensionSuperficie['max'])) {
				$this->addUsingAlias(FeriaPeer::EXTENSION_SUPERFICIE, $extensionSuperficie['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::EXTENSION_SUPERFICIE, $extensionSuperficie, $comparison);
	}

	/**
	 * Filter the query on the libro_mas_vendido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByLibroMasVendido('fooValue');   // WHERE libro_mas_vendido = 'fooValue'
	 * $query->filterByLibroMasVendido('%fooValue%'); // WHERE libro_mas_vendido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $libroMasVendido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByLibroMasVendido($libroMasVendido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($libroMasVendido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $libroMasVendido)) {
				$libroMasVendido = str_replace('*', '%', $libroMasVendido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::LIBRO_MAS_VENDIDO, $libroMasVendido, $comparison);
	}

	/**
	 * Filter the query on the autor_libro_mas_vendido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByAutorLibroMasVendido('fooValue');   // WHERE autor_libro_mas_vendido = 'fooValue'
	 * $query->filterByAutorLibroMasVendido('%fooValue%'); // WHERE autor_libro_mas_vendido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $autorLibroMasVendido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByAutorLibroMasVendido($autorLibroMasVendido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($autorLibroMasVendido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $autorLibroMasVendido)) {
				$autorLibroMasVendido = str_replace('*', '%', $autorLibroMasVendido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(FeriaPeer::AUTOR_LIBRO_MAS_VENDIDO, $autorLibroMasVendido, $comparison);
	}

	/**
	 * Filter the query on the costo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCosto(1234); // WHERE costo = 1234
	 * $query->filterByCosto(array(12, 34)); // WHERE costo IN (12, 34)
	 * $query->filterByCosto(array('min' => 12)); // WHERE costo > 12
	 * </code>
	 *
	 * @param     mixed $costo The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByCosto($costo = null, $comparison = null)
	{
		if (is_array($costo)) {
			$useMinMax = false;
			if (isset($costo['min'])) {
				$this->addUsingAlias(FeriaPeer::COSTO, $costo['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($costo['max'])) {
				$this->addUsingAlias(FeriaPeer::COSTO, $costo['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::COSTO, $costo, $comparison);
	}

	/**
	 * Filter the query on the id_usuario column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdUsuario(1234); // WHERE id_usuario = 1234
	 * $query->filterByIdUsuario(array(12, 34)); // WHERE id_usuario IN (12, 34)
	 * $query->filterByIdUsuario(array('min' => 12)); // WHERE id_usuario > 12
	 * </code>
	 *
	 * @see       filterByUsuario()
	 *
	 * @param     mixed $idUsuario The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdUsuario($idUsuario = null, $comparison = null)
	{
		if (is_array($idUsuario)) {
			$useMinMax = false;
			if (isset($idUsuario['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_USUARIO, $idUsuario['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idUsuario['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_USUARIO, $idUsuario['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_USUARIO, $idUsuario, $comparison);
	}

	/**
	 * Filter the query on the id_status_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdStatusFeria(1234); // WHERE id_status_feria = 1234
	 * $query->filterByIdStatusFeria(array(12, 34)); // WHERE id_status_feria IN (12, 34)
	 * $query->filterByIdStatusFeria(array('min' => 12)); // WHERE id_status_feria > 12
	 * </code>
	 *
	 * @see       filterByStatusFeria()
	 *
	 * @param     mixed $idStatusFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIdStatusFeria($idStatusFeria = null, $comparison = null)
	{
		if (is_array($idStatusFeria)) {
			$useMinMax = false;
			if (isset($idStatusFeria['min'])) {
				$this->addUsingAlias(FeriaPeer::ID_STATUS_FERIA, $idStatusFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idStatusFeria['max'])) {
				$this->addUsingAlias(FeriaPeer::ID_STATUS_FERIA, $idStatusFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(FeriaPeer::ID_STATUS_FERIA, $idStatusFeria, $comparison);
	}

	/**
	 * Filter the query on the activo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByActivo(true); // WHERE activo = true
	 * $query->filterByActivo('yes'); // WHERE activo = true
	 * </code>
	 *
	 * @param     boolean|string $activo The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByActivo($activo = null, $comparison = null)
	{
		if (is_string($activo)) {
			$activo = in_array(strtolower($activo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(FeriaPeer::ACTIVO, $activo, $comparison);
	}

	/**
	 * Filter the query by a related TipoFeria object
	 *
	 * @param     TipoFeria|PropelCollection $tipoFeria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByTipoFeria($tipoFeria, $comparison = null)
	{
		if ($tipoFeria instanceof TipoFeria) {
			return $this
				->addUsingAlias(FeriaPeer::ID_TIPO_FERIA, $tipoFeria->getId(), $comparison);
		} elseif ($tipoFeria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_TIPO_FERIA, $tipoFeria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByTipoFeria() only accepts arguments of type TipoFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TipoFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinTipoFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TipoFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TipoFeria');
		}
		
		return $this;
	}

	/**
	 * Use the TipoFeria relation TipoFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipoFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useTipoFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTipoFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TipoFeria', 'TipoFeriaQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais|PropelCollection $pais The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPaisRelatedByIdPaisHomenajeado($pais, $comparison = null)
	{
		if ($pais instanceof Pais) {
			return $this
				->addUsingAlias(FeriaPeer::ID_PAIS_HOMENAJEADO, $pais->getId(), $comparison);
		} elseif ($pais instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_PAIS_HOMENAJEADO, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByPaisRelatedByIdPaisHomenajeado() only accepts arguments of type Pais or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PaisRelatedByIdPaisHomenajeado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinPaisRelatedByIdPaisHomenajeado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PaisRelatedByIdPaisHomenajeado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PaisRelatedByIdPaisHomenajeado');
		}
		
		return $this;
	}

	/**
	 * Use the PaisRelatedByIdPaisHomenajeado relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisRelatedByIdPaisHomenajeadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPaisRelatedByIdPaisHomenajeado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PaisRelatedByIdPaisHomenajeado', 'PaisQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais|PropelCollection $pais The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPaisRelatedByIdPais($pais, $comparison = null)
	{
		if ($pais instanceof Pais) {
			return $this
				->addUsingAlias(FeriaPeer::ID_PAIS, $pais->getId(), $comparison);
		} elseif ($pais instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_PAIS, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByPaisRelatedByIdPais() only accepts arguments of type Pais or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PaisRelatedByIdPais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinPaisRelatedByIdPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PaisRelatedByIdPais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PaisRelatedByIdPais');
		}
		
		return $this;
	}

	/**
	 * Use the PaisRelatedByIdPais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisRelatedByIdPaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPaisRelatedByIdPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PaisRelatedByIdPais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related Estado object
	 *
	 * @param     Estado|PropelCollection $estado The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByEstado($estado, $comparison = null)
	{
		if ($estado instanceof Estado) {
			return $this
				->addUsingAlias(FeriaPeer::ID_ESTADO, $estado->getId(), $comparison);
		} elseif ($estado instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_ESTADO, $estado->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByEstado() only accepts arguments of type Estado or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Estado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinEstado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Estado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Estado');
		}
		
		return $this;
	}

	/**
	 * Use the Estado relation Estado object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EstadoQuery A secondary query class using the current class as primary query
	 */
	public function useEstadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinEstado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Estado', 'EstadoQuery');
	}

	/**
	 * Filter the query by a related Municipio object
	 *
	 * @param     Municipio|PropelCollection $municipio The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByMunicipio($municipio, $comparison = null)
	{
		if ($municipio instanceof Municipio) {
			return $this
				->addUsingAlias(FeriaPeer::ID_MUNICIPIO, $municipio->getId(), $comparison);
		} elseif ($municipio instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_MUNICIPIO, $municipio->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByMunicipio() only accepts arguments of type Municipio or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Municipio relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinMunicipio($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Municipio');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Municipio');
		}
		
		return $this;
	}

	/**
	 * Use the Municipio relation Municipio object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MunicipioQuery A secondary query class using the current class as primary query
	 */
	public function useMunicipioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinMunicipio($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Municipio', 'MunicipioQuery');
	}

	/**
	 * Filter the query by a related Parroquia object
	 *
	 * @param     Parroquia|PropelCollection $parroquia The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByParroquia($parroquia, $comparison = null)
	{
		if ($parroquia instanceof Parroquia) {
			return $this
				->addUsingAlias(FeriaPeer::ID_PARROQUIA, $parroquia->getId(), $comparison);
		} elseif ($parroquia instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_PARROQUIA, $parroquia->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByParroquia() only accepts arguments of type Parroquia or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Parroquia relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinParroquia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Parroquia');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Parroquia');
		}
		
		return $this;
	}

	/**
	 * Use the Parroquia relation Parroquia object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ParroquiaQuery A secondary query class using the current class as primary query
	 */
	public function useParroquiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinParroquia($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Parroquia', 'ParroquiaQuery');
	}

	/**
	 * Filter the query by a related Region object
	 *
	 * @param     Region|PropelCollection $region The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByRegion($region, $comparison = null)
	{
		if ($region instanceof Region) {
			return $this
				->addUsingAlias(FeriaPeer::ID_REGION, $region->getId(), $comparison);
		} elseif ($region instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_REGION, $region->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByRegion() only accepts arguments of type Region or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Region relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinRegion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Region');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Region');
		}
		
		return $this;
	}

	/**
	 * Use the Region relation Region object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RegionQuery A secondary query class using the current class as primary query
	 */
	public function useRegionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRegion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Region', 'RegionQuery');
	}

	/**
	 * Filter the query by a related Usuario object
	 *
	 * @param     Usuario|PropelCollection $usuario The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByUsuario($usuario, $comparison = null)
	{
		if ($usuario instanceof Usuario) {
			return $this
				->addUsingAlias(FeriaPeer::ID_USUARIO, $usuario->getId(), $comparison);
		} elseif ($usuario instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_USUARIO, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Usuario relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Usuario');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Usuario');
		}
		
		return $this;
	}

	/**
	 * Use the Usuario relation Usuario object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery A secondary query class using the current class as primary query
	 */
	public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinUsuario($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
	}

	/**
	 * Filter the query by a related StatusFeria object
	 *
	 * @param     StatusFeria|PropelCollection $statusFeria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByStatusFeria($statusFeria, $comparison = null)
	{
		if ($statusFeria instanceof StatusFeria) {
			return $this
				->addUsingAlias(FeriaPeer::ID_STATUS_FERIA, $statusFeria->getId(), $comparison);
		} elseif ($statusFeria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(FeriaPeer::ID_STATUS_FERIA, $statusFeria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByStatusFeria() only accepts arguments of type StatusFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the StatusFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinStatusFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('StatusFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'StatusFeria');
		}
		
		return $this;
	}

	/**
	 * Use the StatusFeria relation StatusFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StatusFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useStatusFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStatusFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'StatusFeria', 'StatusFeriaQuery');
	}

	/**
	 * Filter the query by a related Actividad object
	 *
	 * @param     Actividad $actividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByActividad($actividad, $comparison = null)
	{
		if ($actividad instanceof Actividad) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $actividad->getIdFeria(), $comparison);
		} elseif ($actividad instanceof PropelCollection) {
			return $this
				->useActividadQuery()
					->filterByPrimaryKeys($actividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividad() only accepts arguments of type Actividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Actividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Actividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Actividad');
		}
		
		return $this;
	}

	/**
	 * Use the Actividad relation Actividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery A secondary query class using the current class as primary query
	 */
	public function useActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Actividad', 'ActividadQuery');
	}

	/**
	 * Filter the query by a related ActividadFinalizada object
	 *
	 * @param     ActividadFinalizada $actividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByActividadFinalizada($actividadFinalizada, $comparison = null)
	{
		if ($actividadFinalizada instanceof ActividadFinalizada) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $actividadFinalizada->getIdFeria(), $comparison);
		} elseif ($actividadFinalizada instanceof PropelCollection) {
			return $this
				->useActividadFinalizadaQuery()
					->filterByPrimaryKeys($actividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividadFinalizada() only accepts arguments of type ActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadFinalizada relation ActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadFinalizada', 'ActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related Banco object
	 *
	 * @param     Banco $banco  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByBanco($banco, $comparison = null)
	{
		if ($banco instanceof Banco) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $banco->getIdFeria(), $comparison);
		} elseif ($banco instanceof PropelCollection) {
			return $this
				->useBancoQuery()
					->filterByPrimaryKeys($banco->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByBanco() only accepts arguments of type Banco or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Banco relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinBanco($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Banco');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Banco');
		}
		
		return $this;
	}

	/**
	 * Use the Banco relation Banco object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    BancoQuery A secondary query class using the current class as primary query
	 */
	public function useBancoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinBanco($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Banco', 'BancoQuery');
	}

	/**
	 * Filter the query by a related Cuenta object
	 *
	 * @param     Cuenta $cuenta  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByCuenta($cuenta, $comparison = null)
	{
		if ($cuenta instanceof Cuenta) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $cuenta->getIdFeria(), $comparison);
		} elseif ($cuenta instanceof PropelCollection) {
			return $this
				->useCuentaQuery()
					->filterByPrimaryKeys($cuenta->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByCuenta() only accepts arguments of type Cuenta or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Cuenta relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinCuenta($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Cuenta');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Cuenta');
		}
		
		return $this;
	}

	/**
	 * Use the Cuenta relation Cuenta object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    CuentaQuery A secondary query class using the current class as primary query
	 */
	public function useCuentaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinCuenta($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Cuenta', 'CuentaQuery');
	}

	/**
	 * Filter the query by a related ExpositorFeria object
	 *
	 * @param     ExpositorFeria $expositorFeria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByExpositorFeria($expositorFeria, $comparison = null)
	{
		if ($expositorFeria instanceof ExpositorFeria) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $expositorFeria->getIdFeria(), $comparison);
		} elseif ($expositorFeria instanceof PropelCollection) {
			return $this
				->useExpositorFeriaQuery()
					->filterByPrimaryKeys($expositorFeria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositorFeria() only accepts arguments of type ExpositorFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinExpositorFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorFeria');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorFeria relation ExpositorFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorFeria', 'ExpositorFeriaQuery');
	}

	/**
	 * Filter the query by a related ExpositorLineaeditorial object
	 *
	 * @param     ExpositorLineaeditorial $expositorLineaeditorial  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByExpositorLineaeditorial($expositorLineaeditorial, $comparison = null)
	{
		if ($expositorLineaeditorial instanceof ExpositorLineaeditorial) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $expositorLineaeditorial->getIdFeria(), $comparison);
		} elseif ($expositorLineaeditorial instanceof PropelCollection) {
			return $this
				->useExpositorLineaeditorialQuery()
					->filterByPrimaryKeys($expositorLineaeditorial->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositorLineaeditorial() only accepts arguments of type ExpositorLineaeditorial or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorLineaeditorial relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinExpositorLineaeditorial($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorLineaeditorial');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorLineaeditorial');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorLineaeditorial relation ExpositorLineaeditorial object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorLineaeditorialQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorLineaeditorialQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorLineaeditorial($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorLineaeditorial', 'ExpositorLineaeditorialQuery');
	}

	/**
	 * Filter the query by a related FeriaSelloeditorial object
	 *
	 * @param     FeriaSelloeditorial $feriaSelloeditorial  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByFeriaSelloeditorial($feriaSelloeditorial, $comparison = null)
	{
		if ($feriaSelloeditorial instanceof FeriaSelloeditorial) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $feriaSelloeditorial->getIdFeria(), $comparison);
		} elseif ($feriaSelloeditorial instanceof PropelCollection) {
			return $this
				->useFeriaSelloeditorialQuery()
					->filterByPrimaryKeys($feriaSelloeditorial->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByFeriaSelloeditorial() only accepts arguments of type FeriaSelloeditorial or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the FeriaSelloeditorial relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinFeriaSelloeditorial($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('FeriaSelloeditorial');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'FeriaSelloeditorial');
		}
		
		return $this;
	}

	/**
	 * Use the FeriaSelloeditorial relation FeriaSelloeditorial object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaSelloeditorialQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaSelloeditorialQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeriaSelloeditorial($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'FeriaSelloeditorial', 'FeriaSelloeditorialQuery');
	}

	/**
	 * Filter the query by a related IncumplmientoActividadFinalizada object
	 *
	 * @param     IncumplmientoActividadFinalizada $incumplmientoActividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByIncumplmientoActividadFinalizada($incumplmientoActividadFinalizada, $comparison = null)
	{
		if ($incumplmientoActividadFinalizada instanceof IncumplmientoActividadFinalizada) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $incumplmientoActividadFinalizada->getIdFeria(), $comparison);
		} elseif ($incumplmientoActividadFinalizada instanceof PropelCollection) {
			return $this
				->useIncumplmientoActividadFinalizadaQuery()
					->filterByPrimaryKeys($incumplmientoActividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByIncumplmientoActividadFinalizada() only accepts arguments of type IncumplmientoActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the IncumplmientoActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinIncumplmientoActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('IncumplmientoActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'IncumplmientoActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the IncumplmientoActividadFinalizada relation IncumplmientoActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useIncumplmientoActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinIncumplmientoActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'IncumplmientoActividadFinalizada', 'IncumplmientoActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related PagoExpositor object
	 *
	 * @param     PagoExpositor $pagoExpositor  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPagoExpositor($pagoExpositor, $comparison = null)
	{
		if ($pagoExpositor instanceof PagoExpositor) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $pagoExpositor->getIdFeria(), $comparison);
		} elseif ($pagoExpositor instanceof PropelCollection) {
			return $this
				->usePagoExpositorQuery()
					->filterByPrimaryKeys($pagoExpositor->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPagoExpositor() only accepts arguments of type PagoExpositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PagoExpositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinPagoExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PagoExpositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PagoExpositor');
		}
		
		return $this;
	}

	/**
	 * Use the PagoExpositor relation PagoExpositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery A secondary query class using the current class as primary query
	 */
	public function usePagoExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPagoExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PagoExpositor', 'PagoExpositorQuery');
	}

	/**
	 * Filter the query by a related PonenteActividad object
	 *
	 * @param     PonenteActividad $ponenteActividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByPonenteActividad($ponenteActividad, $comparison = null)
	{
		if ($ponenteActividad instanceof PonenteActividad) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $ponenteActividad->getIdFeria(), $comparison);
		} elseif ($ponenteActividad instanceof PropelCollection) {
			return $this
				->usePonenteActividadQuery()
					->filterByPrimaryKeys($ponenteActividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPonenteActividad() only accepts arguments of type PonenteActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PonenteActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinPonenteActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PonenteActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PonenteActividad');
		}
		
		return $this;
	}

	/**
	 * Use the PonenteActividad relation PonenteActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PonenteActividadQuery A secondary query class using the current class as primary query
	 */
	public function usePonenteActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPonenteActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PonenteActividad', 'PonenteActividadQuery');
	}

	/**
	 * Filter the query by a related Stand object
	 *
	 * @param     Stand $stand  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByStand($stand, $comparison = null)
	{
		if ($stand instanceof Stand) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $stand->getIdFeria(), $comparison);
		} elseif ($stand instanceof PropelCollection) {
			return $this
				->useStandQuery()
					->filterByPrimaryKeys($stand->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByStand() only accepts arguments of type Stand or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Stand relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinStand($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Stand');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Stand');
		}
		
		return $this;
	}

	/**
	 * Use the Stand relation Stand object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StandQuery A secondary query class using the current class as primary query
	 */
	public function useStandQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStand($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Stand', 'StandQuery');
	}

	/**
	 * Filter the query by a related Status object
	 *
	 * @param     Status $status  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByStatus($status, $comparison = null)
	{
		if ($status instanceof Status) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $status->getIdFeria(), $comparison);
		} elseif ($status instanceof PropelCollection) {
			return $this
				->useStatusQuery()
					->filterByPrimaryKeys($status->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByStatus() only accepts arguments of type Status or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Status relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinStatus($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Status');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Status');
		}
		
		return $this;
	}

	/**
	 * Use the Status relation Status object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StatusQuery A secondary query class using the current class as primary query
	 */
	public function useStatusQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Status', 'StatusQuery');
	}

	/**
	 * Filter the query by a related Visitante object
	 *
	 * @param     Visitante $visitante  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function filterByVisitante($visitante, $comparison = null)
	{
		if ($visitante instanceof Visitante) {
			return $this
				->addUsingAlias(FeriaPeer::ID, $visitante->getIdFeria(), $comparison);
		} elseif ($visitante instanceof PropelCollection) {
			return $this
				->useVisitanteQuery()
					->filterByPrimaryKeys($visitante->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByVisitante() only accepts arguments of type Visitante or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Visitante relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function joinVisitante($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Visitante');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Visitante');
		}
		
		return $this;
	}

	/**
	 * Use the Visitante relation Visitante object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    VisitanteQuery A secondary query class using the current class as primary query
	 */
	public function useVisitanteQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinVisitante($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Visitante', 'VisitanteQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Feria $feria Object to remove from the list of results
	 *
	 * @return    FeriaQuery The current query, for fluid interface
	 */
	public function prune($feria = null)
	{
		if ($feria) {
			$this->addUsingAlias(FeriaPeer::ID, $feria->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseFeriaQuery
