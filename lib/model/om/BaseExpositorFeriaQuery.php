<?php


/**
 * Base class that represents a query for the 'expositor_feria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Fri May  1 16:52:44 2015
 *
 * @method     ExpositorFeriaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ExpositorFeriaQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     ExpositorFeriaQuery orderByIdExpositor($order = Criteria::ASC) Order by the id_expositor column
 * @method     ExpositorFeriaQuery orderByIdTipoDistribuidor($order = Criteria::ASC) Order by the id_tipo_distribuidor column
 * @method     ExpositorFeriaQuery orderBySelloEditorial($order = Criteria::ASC) Order by the sello_editorial column
 * @method     ExpositorFeriaQuery orderByDomicilioFiscal($order = Criteria::ASC) Order by the domicilio_fiscal column
 * @method     ExpositorFeriaQuery orderByResponsableStand($order = Criteria::ASC) Order by the responsable_stand column
 * @method     ExpositorFeriaQuery orderByIdStand($order = Criteria::ASC) Order by the id_stand column
 * @method     ExpositorFeriaQuery orderByNumeroTitulos($order = Criteria::ASC) Order by the numero_titulos column
 * @method     ExpositorFeriaQuery orderByNumeroNovedades($order = Criteria::ASC) Order by the numero_novedades column
 * @method     ExpositorFeriaQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method     ExpositorFeriaQuery orderByIdUsuario($order = Criteria::ASC) Order by the id_usuario column
 * @method     ExpositorFeriaQuery orderByNombreCenefa($order = Criteria::ASC) Order by the nombre_cenefa column
 *
 * @method     ExpositorFeriaQuery groupById() Group by the id column
 * @method     ExpositorFeriaQuery groupByIdFeria() Group by the id_feria column
 * @method     ExpositorFeriaQuery groupByIdExpositor() Group by the id_expositor column
 * @method     ExpositorFeriaQuery groupByIdTipoDistribuidor() Group by the id_tipo_distribuidor column
 * @method     ExpositorFeriaQuery groupBySelloEditorial() Group by the sello_editorial column
 * @method     ExpositorFeriaQuery groupByDomicilioFiscal() Group by the domicilio_fiscal column
 * @method     ExpositorFeriaQuery groupByResponsableStand() Group by the responsable_stand column
 * @method     ExpositorFeriaQuery groupByIdStand() Group by the id_stand column
 * @method     ExpositorFeriaQuery groupByNumeroTitulos() Group by the numero_titulos column
 * @method     ExpositorFeriaQuery groupByNumeroNovedades() Group by the numero_novedades column
 * @method     ExpositorFeriaQuery groupByObservaciones() Group by the observaciones column
 * @method     ExpositorFeriaQuery groupByIdUsuario() Group by the id_usuario column
 * @method     ExpositorFeriaQuery groupByNombreCenefa() Group by the nombre_cenefa column
 *
 * @method     ExpositorFeriaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ExpositorFeriaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ExpositorFeriaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ExpositorFeriaQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     ExpositorFeriaQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     ExpositorFeriaQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     ExpositorFeriaQuery leftJoinExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Expositor relation
 * @method     ExpositorFeriaQuery rightJoinExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Expositor relation
 * @method     ExpositorFeriaQuery innerJoinExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the Expositor relation
 *
 * @method     ExpositorFeriaQuery leftJoinTipoDistribuidor($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoDistribuidor relation
 * @method     ExpositorFeriaQuery rightJoinTipoDistribuidor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoDistribuidor relation
 * @method     ExpositorFeriaQuery innerJoinTipoDistribuidor($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoDistribuidor relation
 *
 * @method     ExpositorFeriaQuery leftJoinStand($relationAlias = null) Adds a LEFT JOIN clause to the query using the Stand relation
 * @method     ExpositorFeriaQuery rightJoinStand($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Stand relation
 * @method     ExpositorFeriaQuery innerJoinStand($relationAlias = null) Adds a INNER JOIN clause to the query using the Stand relation
 *
 * @method     ExpositorFeriaQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method     ExpositorFeriaQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method     ExpositorFeriaQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method     ExpositorFeriaQuery leftJoinPagoExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the PagoExpositor relation
 * @method     ExpositorFeriaQuery rightJoinPagoExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PagoExpositor relation
 * @method     ExpositorFeriaQuery innerJoinPagoExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the PagoExpositor relation
 *
 * @method     ExpositorFeriaQuery leftJoinStatus($relationAlias = null) Adds a LEFT JOIN clause to the query using the Status relation
 * @method     ExpositorFeriaQuery rightJoinStatus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Status relation
 * @method     ExpositorFeriaQuery innerJoinStatus($relationAlias = null) Adds a INNER JOIN clause to the query using the Status relation
 *
 * @method     ExpositorFeria findOne(PropelPDO $con = null) Return the first ExpositorFeria matching the query
 * @method     ExpositorFeria findOneOrCreate(PropelPDO $con = null) Return the first ExpositorFeria matching the query, or a new ExpositorFeria object populated from the query conditions when no match is found
 *
 * @method     ExpositorFeria findOneById(string $id) Return the first ExpositorFeria filtered by the id column
 * @method     ExpositorFeria findOneByIdFeria(int $id_feria) Return the first ExpositorFeria filtered by the id_feria column
 * @method     ExpositorFeria findOneByIdExpositor(int $id_expositor) Return the first ExpositorFeria filtered by the id_expositor column
 * @method     ExpositorFeria findOneByIdTipoDistribuidor(int $id_tipo_distribuidor) Return the first ExpositorFeria filtered by the id_tipo_distribuidor column
 * @method     ExpositorFeria findOneBySelloEditorial(string $sello_editorial) Return the first ExpositorFeria filtered by the sello_editorial column
 * @method     ExpositorFeria findOneByDomicilioFiscal(string $domicilio_fiscal) Return the first ExpositorFeria filtered by the domicilio_fiscal column
 * @method     ExpositorFeria findOneByResponsableStand(string $responsable_stand) Return the first ExpositorFeria filtered by the responsable_stand column
 * @method     ExpositorFeria findOneByIdStand(int $id_stand) Return the first ExpositorFeria filtered by the id_stand column
 * @method     ExpositorFeria findOneByNumeroTitulos(int $numero_titulos) Return the first ExpositorFeria filtered by the numero_titulos column
 * @method     ExpositorFeria findOneByNumeroNovedades(int $numero_novedades) Return the first ExpositorFeria filtered by the numero_novedades column
 * @method     ExpositorFeria findOneByObservaciones(string $observaciones) Return the first ExpositorFeria filtered by the observaciones column
 * @method     ExpositorFeria findOneByIdUsuario(int $id_usuario) Return the first ExpositorFeria filtered by the id_usuario column
 * @method     ExpositorFeria findOneByNombreCenefa(string $nombre_cenefa) Return the first ExpositorFeria filtered by the nombre_cenefa column
 *
 * @method     array findById(string $id) Return ExpositorFeria objects filtered by the id column
 * @method     array findByIdFeria(int $id_feria) Return ExpositorFeria objects filtered by the id_feria column
 * @method     array findByIdExpositor(int $id_expositor) Return ExpositorFeria objects filtered by the id_expositor column
 * @method     array findByIdTipoDistribuidor(int $id_tipo_distribuidor) Return ExpositorFeria objects filtered by the id_tipo_distribuidor column
 * @method     array findBySelloEditorial(string $sello_editorial) Return ExpositorFeria objects filtered by the sello_editorial column
 * @method     array findByDomicilioFiscal(string $domicilio_fiscal) Return ExpositorFeria objects filtered by the domicilio_fiscal column
 * @method     array findByResponsableStand(string $responsable_stand) Return ExpositorFeria objects filtered by the responsable_stand column
 * @method     array findByIdStand(int $id_stand) Return ExpositorFeria objects filtered by the id_stand column
 * @method     array findByNumeroTitulos(int $numero_titulos) Return ExpositorFeria objects filtered by the numero_titulos column
 * @method     array findByNumeroNovedades(int $numero_novedades) Return ExpositorFeria objects filtered by the numero_novedades column
 * @method     array findByObservaciones(string $observaciones) Return ExpositorFeria objects filtered by the observaciones column
 * @method     array findByIdUsuario(int $id_usuario) Return ExpositorFeria objects filtered by the id_usuario column
 * @method     array findByNombreCenefa(string $nombre_cenefa) Return ExpositorFeria objects filtered by the nombre_cenefa column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseExpositorFeriaQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseExpositorFeriaQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'ExpositorFeria', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ExpositorFeriaQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ExpositorFeriaQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ExpositorFeriaQuery) {
			return $criteria;
		}
		$query = new ExpositorFeriaQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    ExpositorFeria|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ExpositorFeriaPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_expositor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdExpositor(1234); // WHERE id_expositor = 1234
	 * $query->filterByIdExpositor(array(12, 34)); // WHERE id_expositor IN (12, 34)
	 * $query->filterByIdExpositor(array('min' => 12)); // WHERE id_expositor > 12
	 * </code>
	 *
	 * @see       filterByExpositor()
	 *
	 * @param     mixed $idExpositor The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdExpositor($idExpositor = null, $comparison = null)
	{
		if (is_array($idExpositor)) {
			$useMinMax = false;
			if (isset($idExpositor['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idExpositor['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor, $comparison);
	}

	/**
	 * Filter the query on the id_tipo_distribuidor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdTipoDistribuidor(1234); // WHERE id_tipo_distribuidor = 1234
	 * $query->filterByIdTipoDistribuidor(array(12, 34)); // WHERE id_tipo_distribuidor IN (12, 34)
	 * $query->filterByIdTipoDistribuidor(array('min' => 12)); // WHERE id_tipo_distribuidor > 12
	 * </code>
	 *
	 * @see       filterByTipoDistribuidor()
	 *
	 * @param     mixed $idTipoDistribuidor The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdTipoDistribuidor($idTipoDistribuidor = null, $comparison = null)
	{
		if (is_array($idTipoDistribuidor)) {
			$useMinMax = false;
			if (isset($idTipoDistribuidor['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_TIPO_DISTRIBUIDOR, $idTipoDistribuidor['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idTipoDistribuidor['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_TIPO_DISTRIBUIDOR, $idTipoDistribuidor['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_TIPO_DISTRIBUIDOR, $idTipoDistribuidor, $comparison);
	}

	/**
	 * Filter the query on the sello_editorial column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySelloEditorial('fooValue');   // WHERE sello_editorial = 'fooValue'
	 * $query->filterBySelloEditorial('%fooValue%'); // WHERE sello_editorial LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $selloEditorial The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterBySelloEditorial($selloEditorial = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($selloEditorial)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $selloEditorial)) {
				$selloEditorial = str_replace('*', '%', $selloEditorial);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::SELLO_EDITORIAL, $selloEditorial, $comparison);
	}

	/**
	 * Filter the query on the domicilio_fiscal column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDomicilioFiscal('fooValue');   // WHERE domicilio_fiscal = 'fooValue'
	 * $query->filterByDomicilioFiscal('%fooValue%'); // WHERE domicilio_fiscal LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $domicilioFiscal The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByDomicilioFiscal($domicilioFiscal = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($domicilioFiscal)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $domicilioFiscal)) {
				$domicilioFiscal = str_replace('*', '%', $domicilioFiscal);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::DOMICILIO_FISCAL, $domicilioFiscal, $comparison);
	}

	/**
	 * Filter the query on the responsable_stand column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByResponsableStand('fooValue');   // WHERE responsable_stand = 'fooValue'
	 * $query->filterByResponsableStand('%fooValue%'); // WHERE responsable_stand LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $responsableStand The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByResponsableStand($responsableStand = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($responsableStand)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $responsableStand)) {
				$responsableStand = str_replace('*', '%', $responsableStand);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::RESPONSABLE_STAND, $responsableStand, $comparison);
	}

	/**
	 * Filter the query on the id_stand column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdStand(1234); // WHERE id_stand = 1234
	 * $query->filterByIdStand(array(12, 34)); // WHERE id_stand IN (12, 34)
	 * $query->filterByIdStand(array('min' => 12)); // WHERE id_stand > 12
	 * </code>
	 *
	 * @see       filterByStand()
	 *
	 * @param     mixed $idStand The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdStand($idStand = null, $comparison = null)
	{
		if (is_array($idStand)) {
			$useMinMax = false;
			if (isset($idStand['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_STAND, $idStand['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idStand['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_STAND, $idStand['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_STAND, $idStand, $comparison);
	}

	/**
	 * Filter the query on the numero_titulos column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNumeroTitulos(1234); // WHERE numero_titulos = 1234
	 * $query->filterByNumeroTitulos(array(12, 34)); // WHERE numero_titulos IN (12, 34)
	 * $query->filterByNumeroTitulos(array('min' => 12)); // WHERE numero_titulos > 12
	 * </code>
	 *
	 * @param     mixed $numeroTitulos The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNumeroTitulos($numeroTitulos = null, $comparison = null)
	{
		if (is_array($numeroTitulos)) {
			$useMinMax = false;
			if (isset($numeroTitulos['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_TITULOS, $numeroTitulos['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($numeroTitulos['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_TITULOS, $numeroTitulos['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NUMERO_TITULOS, $numeroTitulos, $comparison);
	}

	/**
	 * Filter the query on the numero_novedades column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNumeroNovedades(1234); // WHERE numero_novedades = 1234
	 * $query->filterByNumeroNovedades(array(12, 34)); // WHERE numero_novedades IN (12, 34)
	 * $query->filterByNumeroNovedades(array('min' => 12)); // WHERE numero_novedades > 12
	 * </code>
	 *
	 * @param     mixed $numeroNovedades The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNumeroNovedades($numeroNovedades = null, $comparison = null)
	{
		if (is_array($numeroNovedades)) {
			$useMinMax = false;
			if (isset($numeroNovedades['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_NOVEDADES, $numeroNovedades['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($numeroNovedades['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_NOVEDADES, $numeroNovedades['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NUMERO_NOVEDADES, $numeroNovedades, $comparison);
	}

	/**
	 * Filter the query on the observaciones column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
	 * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $observaciones The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByObservaciones($observaciones = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observaciones)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observaciones)) {
				$observaciones = str_replace('*', '%', $observaciones);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::OBSERVACIONES, $observaciones, $comparison);
	}

	/**
	 * Filter the query on the id_usuario column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdUsuario(1234); // WHERE id_usuario = 1234
	 * $query->filterByIdUsuario(array(12, 34)); // WHERE id_usuario IN (12, 34)
	 * $query->filterByIdUsuario(array('min' => 12)); // WHERE id_usuario > 12
	 * </code>
	 *
	 * @see       filterByUsuario()
	 *
	 * @param     mixed $idUsuario The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdUsuario($idUsuario = null, $comparison = null)
	{
		if (is_array($idUsuario)) {
			$useMinMax = false;
			if (isset($idUsuario['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_USUARIO, $idUsuario['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idUsuario['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_USUARIO, $idUsuario['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_USUARIO, $idUsuario, $comparison);
	}

	/**
	 * Filter the query on the nombre_cenefa column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreCenefa('fooValue');   // WHERE nombre_cenefa = 'fooValue'
	 * $query->filterByNombreCenefa('%fooValue%'); // WHERE nombre_cenefa LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreCenefa The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNombreCenefa($nombreCenefa = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreCenefa)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreCenefa)) {
				$nombreCenefa = str_replace('*', '%', $nombreCenefa);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NOMBRE_CENEFA, $nombreCenefa, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Expositor object
	 *
	 * @param     Expositor|PropelCollection $expositor The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByExpositor($expositor, $comparison = null)
	{
		if ($expositor instanceof Expositor) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $expositor->getId(), $comparison);
		} elseif ($expositor instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $expositor->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByExpositor() only accepts arguments of type Expositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Expositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Expositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Expositor');
		}
		
		return $this;
	}

	/**
	 * Use the Expositor relation Expositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Expositor', 'ExpositorQuery');
	}

	/**
	 * Filter the query by a related TipoDistribuidor object
	 *
	 * @param     TipoDistribuidor|PropelCollection $tipoDistribuidor The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByTipoDistribuidor($tipoDistribuidor, $comparison = null)
	{
		if ($tipoDistribuidor instanceof TipoDistribuidor) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_TIPO_DISTRIBUIDOR, $tipoDistribuidor->getId(), $comparison);
		} elseif ($tipoDistribuidor instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_TIPO_DISTRIBUIDOR, $tipoDistribuidor->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByTipoDistribuidor() only accepts arguments of type TipoDistribuidor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TipoDistribuidor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinTipoDistribuidor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TipoDistribuidor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TipoDistribuidor');
		}
		
		return $this;
	}

	/**
	 * Use the TipoDistribuidor relation TipoDistribuidor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipoDistribuidorQuery A secondary query class using the current class as primary query
	 */
	public function useTipoDistribuidorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTipoDistribuidor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TipoDistribuidor', 'TipoDistribuidorQuery');
	}

	/**
	 * Filter the query by a related Stand object
	 *
	 * @param     Stand|PropelCollection $stand The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByStand($stand, $comparison = null)
	{
		if ($stand instanceof Stand) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_STAND, $stand->getId(), $comparison);
		} elseif ($stand instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_STAND, $stand->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByStand() only accepts arguments of type Stand or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Stand relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinStand($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Stand');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Stand');
		}
		
		return $this;
	}

	/**
	 * Use the Stand relation Stand object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StandQuery A secondary query class using the current class as primary query
	 */
	public function useStandQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStand($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Stand', 'StandQuery');
	}

	/**
	 * Filter the query by a related Usuario object
	 *
	 * @param     Usuario|PropelCollection $usuario The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByUsuario($usuario, $comparison = null)
	{
		if ($usuario instanceof Usuario) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_USUARIO, $usuario->getId(), $comparison);
		} elseif ($usuario instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_USUARIO, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Usuario relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Usuario');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Usuario');
		}
		
		return $this;
	}

	/**
	 * Use the Usuario relation Usuario object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery A secondary query class using the current class as primary query
	 */
	public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinUsuario($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
	}

	/**
	 * Filter the query by a related PagoExpositor object
	 *
	 * @param     PagoExpositor $pagoExpositor  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPagoExpositor($pagoExpositor, $comparison = null)
	{
		if ($pagoExpositor instanceof PagoExpositor) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID, $pagoExpositor->getIdExpositorFeria(), $comparison);
		} elseif ($pagoExpositor instanceof PropelCollection) {
			return $this
				->usePagoExpositorQuery()
					->filterByPrimaryKeys($pagoExpositor->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPagoExpositor() only accepts arguments of type PagoExpositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PagoExpositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinPagoExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PagoExpositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PagoExpositor');
		}
		
		return $this;
	}

	/**
	 * Use the PagoExpositor relation PagoExpositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery A secondary query class using the current class as primary query
	 */
	public function usePagoExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPagoExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PagoExpositor', 'PagoExpositorQuery');
	}

	/**
	 * Filter the query by a related Status object
	 *
	 * @param     Status $status  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByStatus($status, $comparison = null)
	{
		if ($status instanceof Status) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID, $status->getIdExpositorFeria(), $comparison);
		} elseif ($status instanceof PropelCollection) {
			return $this
				->useStatusQuery()
					->filterByPrimaryKeys($status->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByStatus() only accepts arguments of type Status or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Status relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinStatus($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Status');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Status');
		}
		
		return $this;
	}

	/**
	 * Use the Status relation Status object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StatusQuery A secondary query class using the current class as primary query
	 */
	public function useStatusQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Status', 'StatusQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     ExpositorFeria $expositorFeria Object to remove from the list of results
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function prune($expositorFeria = null)
	{
		if ($expositorFeria) {
			$this->addUsingAlias(ExpositorFeriaPeer::ID, $expositorFeria->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseExpositorFeriaQuery
