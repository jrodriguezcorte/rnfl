<?php


/**
 * Base class that represents a query for the 'expositor_feria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sat Oct  4 21:39:06 2014
 *
 * @method     ExpositorFeriaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ExpositorFeriaQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     ExpositorFeriaQuery orderByIdExpositor($order = Criteria::ASC) Order by the id_expositor column
 * @method     ExpositorFeriaQuery orderByNombeEmpresa($order = Criteria::ASC) Order by the nombe_empresa column
 * @method     ExpositorFeriaQuery orderByNombreDirector($order = Criteria::ASC) Order by the nombre_director column
 * @method     ExpositorFeriaQuery orderByNombreEjecutivoFeria($order = Criteria::ASC) Order by the nombre_ejecutivo_feria column
 * @method     ExpositorFeriaQuery orderByDireccion($order = Criteria::ASC) Order by the direccion column
 * @method     ExpositorFeriaQuery orderByCiudad($order = Criteria::ASC) Order by the ciudad column
 * @method     ExpositorFeriaQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method     ExpositorFeriaQuery orderByTelefonoLocal($order = Criteria::ASC) Order by the telefono_local column
 * @method     ExpositorFeriaQuery orderByTelefonoCelular($order = Criteria::ASC) Order by the telefono_celular column
 * @method     ExpositorFeriaQuery orderByFax($order = Criteria::ASC) Order by the fax column
 * @method     ExpositorFeriaQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     ExpositorFeriaQuery orderBySitioWeb($order = Criteria::ASC) Order by the sitio_web column
 * @method     ExpositorFeriaQuery orderByTipoExpositor($order = Criteria::ASC) Order by the tipo_expositor column
 * @method     ExpositorFeriaQuery orderByOtroTipoExpositor($order = Criteria::ASC) Order by the otro_tipo_expositor column
 * @method     ExpositorFeriaQuery orderByNumeroStand($order = Criteria::ASC) Order by the numero_stand column
 * @method     ExpositorFeriaQuery orderByCostoStand($order = Criteria::ASC) Order by the costo_stand column
 * @method     ExpositorFeriaQuery orderByMetrosStand($order = Criteria::ASC) Order by the metros_stand column
 * @method     ExpositorFeriaQuery orderByOtroLineaEditorial($order = Criteria::ASC) Order by the otro_linea_editorial column
 * @method     ExpositorFeriaQuery orderByLibroMasVendido($order = Criteria::ASC) Order by the libro_mas_vendido column
 * @method     ExpositorFeriaQuery orderByCostoLibro($order = Criteria::ASC) Order by the costo_libro column
 * @method     ExpositorFeriaQuery orderByCantidadLibroVendido($order = Criteria::ASC) Order by the cantidad_libro_vendido column
 * @method     ExpositorFeriaQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 *
 * @method     ExpositorFeriaQuery groupById() Group by the id column
 * @method     ExpositorFeriaQuery groupByIdFeria() Group by the id_feria column
 * @method     ExpositorFeriaQuery groupByIdExpositor() Group by the id_expositor column
 * @method     ExpositorFeriaQuery groupByNombeEmpresa() Group by the nombe_empresa column
 * @method     ExpositorFeriaQuery groupByNombreDirector() Group by the nombre_director column
 * @method     ExpositorFeriaQuery groupByNombreEjecutivoFeria() Group by the nombre_ejecutivo_feria column
 * @method     ExpositorFeriaQuery groupByDireccion() Group by the direccion column
 * @method     ExpositorFeriaQuery groupByCiudad() Group by the ciudad column
 * @method     ExpositorFeriaQuery groupByIdPais() Group by the id_pais column
 * @method     ExpositorFeriaQuery groupByTelefonoLocal() Group by the telefono_local column
 * @method     ExpositorFeriaQuery groupByTelefonoCelular() Group by the telefono_celular column
 * @method     ExpositorFeriaQuery groupByFax() Group by the fax column
 * @method     ExpositorFeriaQuery groupByEmail() Group by the email column
 * @method     ExpositorFeriaQuery groupBySitioWeb() Group by the sitio_web column
 * @method     ExpositorFeriaQuery groupByTipoExpositor() Group by the tipo_expositor column
 * @method     ExpositorFeriaQuery groupByOtroTipoExpositor() Group by the otro_tipo_expositor column
 * @method     ExpositorFeriaQuery groupByNumeroStand() Group by the numero_stand column
 * @method     ExpositorFeriaQuery groupByCostoStand() Group by the costo_stand column
 * @method     ExpositorFeriaQuery groupByMetrosStand() Group by the metros_stand column
 * @method     ExpositorFeriaQuery groupByOtroLineaEditorial() Group by the otro_linea_editorial column
 * @method     ExpositorFeriaQuery groupByLibroMasVendido() Group by the libro_mas_vendido column
 * @method     ExpositorFeriaQuery groupByCostoLibro() Group by the costo_libro column
 * @method     ExpositorFeriaQuery groupByCantidadLibroVendido() Group by the cantidad_libro_vendido column
 * @method     ExpositorFeriaQuery groupByObservaciones() Group by the observaciones column
 *
 * @method     ExpositorFeriaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ExpositorFeriaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ExpositorFeriaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ExpositorFeriaQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     ExpositorFeriaQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     ExpositorFeriaQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     ExpositorFeriaQuery leftJoinExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Expositor relation
 * @method     ExpositorFeriaQuery rightJoinExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Expositor relation
 * @method     ExpositorFeriaQuery innerJoinExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the Expositor relation
 *
 * @method     ExpositorFeriaQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method     ExpositorFeriaQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method     ExpositorFeriaQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method     ExpositorFeriaQuery leftJoinLineaEditorialExposiorFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the LineaEditorialExposiorFeria relation
 * @method     ExpositorFeriaQuery rightJoinLineaEditorialExposiorFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the LineaEditorialExposiorFeria relation
 * @method     ExpositorFeriaQuery innerJoinLineaEditorialExposiorFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the LineaEditorialExposiorFeria relation
 *
 * @method     ExpositorFeria findOne(PropelPDO $con = null) Return the first ExpositorFeria matching the query
 * @method     ExpositorFeria findOneOrCreate(PropelPDO $con = null) Return the first ExpositorFeria matching the query, or a new ExpositorFeria object populated from the query conditions when no match is found
 *
 * @method     ExpositorFeria findOneById(string $id) Return the first ExpositorFeria filtered by the id column
 * @method     ExpositorFeria findOneByIdFeria(int $id_feria) Return the first ExpositorFeria filtered by the id_feria column
 * @method     ExpositorFeria findOneByIdExpositor(int $id_expositor) Return the first ExpositorFeria filtered by the id_expositor column
 * @method     ExpositorFeria findOneByNombeEmpresa(string $nombe_empresa) Return the first ExpositorFeria filtered by the nombe_empresa column
 * @method     ExpositorFeria findOneByNombreDirector(string $nombre_director) Return the first ExpositorFeria filtered by the nombre_director column
 * @method     ExpositorFeria findOneByNombreEjecutivoFeria(string $nombre_ejecutivo_feria) Return the first ExpositorFeria filtered by the nombre_ejecutivo_feria column
 * @method     ExpositorFeria findOneByDireccion(string $direccion) Return the first ExpositorFeria filtered by the direccion column
 * @method     ExpositorFeria findOneByCiudad(string $ciudad) Return the first ExpositorFeria filtered by the ciudad column
 * @method     ExpositorFeria findOneByIdPais(int $id_pais) Return the first ExpositorFeria filtered by the id_pais column
 * @method     ExpositorFeria findOneByTelefonoLocal(string $telefono_local) Return the first ExpositorFeria filtered by the telefono_local column
 * @method     ExpositorFeria findOneByTelefonoCelular(string $telefono_celular) Return the first ExpositorFeria filtered by the telefono_celular column
 * @method     ExpositorFeria findOneByFax(string $fax) Return the first ExpositorFeria filtered by the fax column
 * @method     ExpositorFeria findOneByEmail(string $email) Return the first ExpositorFeria filtered by the email column
 * @method     ExpositorFeria findOneBySitioWeb(string $sitio_web) Return the first ExpositorFeria filtered by the sitio_web column
 * @method     ExpositorFeria findOneByTipoExpositor(string $tipo_expositor) Return the first ExpositorFeria filtered by the tipo_expositor column
 * @method     ExpositorFeria findOneByOtroTipoExpositor(string $otro_tipo_expositor) Return the first ExpositorFeria filtered by the otro_tipo_expositor column
 * @method     ExpositorFeria findOneByNumeroStand(int $numero_stand) Return the first ExpositorFeria filtered by the numero_stand column
 * @method     ExpositorFeria findOneByCostoStand(string $costo_stand) Return the first ExpositorFeria filtered by the costo_stand column
 * @method     ExpositorFeria findOneByMetrosStand(int $metros_stand) Return the first ExpositorFeria filtered by the metros_stand column
 * @method     ExpositorFeria findOneByOtroLineaEditorial(string $otro_linea_editorial) Return the first ExpositorFeria filtered by the otro_linea_editorial column
 * @method     ExpositorFeria findOneByLibroMasVendido(string $libro_mas_vendido) Return the first ExpositorFeria filtered by the libro_mas_vendido column
 * @method     ExpositorFeria findOneByCostoLibro(string $costo_libro) Return the first ExpositorFeria filtered by the costo_libro column
 * @method     ExpositorFeria findOneByCantidadLibroVendido(int $cantidad_libro_vendido) Return the first ExpositorFeria filtered by the cantidad_libro_vendido column
 * @method     ExpositorFeria findOneByObservaciones(string $observaciones) Return the first ExpositorFeria filtered by the observaciones column
 *
 * @method     array findById(string $id) Return ExpositorFeria objects filtered by the id column
 * @method     array findByIdFeria(int $id_feria) Return ExpositorFeria objects filtered by the id_feria column
 * @method     array findByIdExpositor(int $id_expositor) Return ExpositorFeria objects filtered by the id_expositor column
 * @method     array findByNombeEmpresa(string $nombe_empresa) Return ExpositorFeria objects filtered by the nombe_empresa column
 * @method     array findByNombreDirector(string $nombre_director) Return ExpositorFeria objects filtered by the nombre_director column
 * @method     array findByNombreEjecutivoFeria(string $nombre_ejecutivo_feria) Return ExpositorFeria objects filtered by the nombre_ejecutivo_feria column
 * @method     array findByDireccion(string $direccion) Return ExpositorFeria objects filtered by the direccion column
 * @method     array findByCiudad(string $ciudad) Return ExpositorFeria objects filtered by the ciudad column
 * @method     array findByIdPais(int $id_pais) Return ExpositorFeria objects filtered by the id_pais column
 * @method     array findByTelefonoLocal(string $telefono_local) Return ExpositorFeria objects filtered by the telefono_local column
 * @method     array findByTelefonoCelular(string $telefono_celular) Return ExpositorFeria objects filtered by the telefono_celular column
 * @method     array findByFax(string $fax) Return ExpositorFeria objects filtered by the fax column
 * @method     array findByEmail(string $email) Return ExpositorFeria objects filtered by the email column
 * @method     array findBySitioWeb(string $sitio_web) Return ExpositorFeria objects filtered by the sitio_web column
 * @method     array findByTipoExpositor(string $tipo_expositor) Return ExpositorFeria objects filtered by the tipo_expositor column
 * @method     array findByOtroTipoExpositor(string $otro_tipo_expositor) Return ExpositorFeria objects filtered by the otro_tipo_expositor column
 * @method     array findByNumeroStand(int $numero_stand) Return ExpositorFeria objects filtered by the numero_stand column
 * @method     array findByCostoStand(string $costo_stand) Return ExpositorFeria objects filtered by the costo_stand column
 * @method     array findByMetrosStand(int $metros_stand) Return ExpositorFeria objects filtered by the metros_stand column
 * @method     array findByOtroLineaEditorial(string $otro_linea_editorial) Return ExpositorFeria objects filtered by the otro_linea_editorial column
 * @method     array findByLibroMasVendido(string $libro_mas_vendido) Return ExpositorFeria objects filtered by the libro_mas_vendido column
 * @method     array findByCostoLibro(string $costo_libro) Return ExpositorFeria objects filtered by the costo_libro column
 * @method     array findByCantidadLibroVendido(int $cantidad_libro_vendido) Return ExpositorFeria objects filtered by the cantidad_libro_vendido column
 * @method     array findByObservaciones(string $observaciones) Return ExpositorFeria objects filtered by the observaciones column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseExpositorFeriaQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseExpositorFeriaQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'ExpositorFeria', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ExpositorFeriaQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ExpositorFeriaQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ExpositorFeriaQuery) {
			return $criteria;
		}
		$query = new ExpositorFeriaQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    ExpositorFeria|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ExpositorFeriaPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_expositor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdExpositor(1234); // WHERE id_expositor = 1234
	 * $query->filterByIdExpositor(array(12, 34)); // WHERE id_expositor IN (12, 34)
	 * $query->filterByIdExpositor(array('min' => 12)); // WHERE id_expositor > 12
	 * </code>
	 *
	 * @see       filterByExpositor()
	 *
	 * @param     mixed $idExpositor The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdExpositor($idExpositor = null, $comparison = null)
	{
		if (is_array($idExpositor)) {
			$useMinMax = false;
			if (isset($idExpositor['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idExpositor['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $idExpositor, $comparison);
	}

	/**
	 * Filter the query on the nombe_empresa column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombeEmpresa('fooValue');   // WHERE nombe_empresa = 'fooValue'
	 * $query->filterByNombeEmpresa('%fooValue%'); // WHERE nombe_empresa LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombeEmpresa The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNombeEmpresa($nombeEmpresa = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombeEmpresa)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombeEmpresa)) {
				$nombeEmpresa = str_replace('*', '%', $nombeEmpresa);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NOMBE_EMPRESA, $nombeEmpresa, $comparison);
	}

	/**
	 * Filter the query on the nombre_director column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreDirector('fooValue');   // WHERE nombre_director = 'fooValue'
	 * $query->filterByNombreDirector('%fooValue%'); // WHERE nombre_director LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreDirector The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNombreDirector($nombreDirector = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreDirector)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreDirector)) {
				$nombreDirector = str_replace('*', '%', $nombreDirector);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NOMBRE_DIRECTOR, $nombreDirector, $comparison);
	}

	/**
	 * Filter the query on the nombre_ejecutivo_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreEjecutivoFeria('fooValue');   // WHERE nombre_ejecutivo_feria = 'fooValue'
	 * $query->filterByNombreEjecutivoFeria('%fooValue%'); // WHERE nombre_ejecutivo_feria LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreEjecutivoFeria The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNombreEjecutivoFeria($nombreEjecutivoFeria = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreEjecutivoFeria)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreEjecutivoFeria)) {
				$nombreEjecutivoFeria = str_replace('*', '%', $nombreEjecutivoFeria);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NOMBRE_EJECUTIVO_FERIA, $nombreEjecutivoFeria, $comparison);
	}

	/**
	 * Filter the query on the direccion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDireccion('fooValue');   // WHERE direccion = 'fooValue'
	 * $query->filterByDireccion('%fooValue%'); // WHERE direccion LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $direccion The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByDireccion($direccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($direccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $direccion)) {
				$direccion = str_replace('*', '%', $direccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::DIRECCION, $direccion, $comparison);
	}

	/**
	 * Filter the query on the ciudad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCiudad('fooValue');   // WHERE ciudad = 'fooValue'
	 * $query->filterByCiudad('%fooValue%'); // WHERE ciudad LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $ciudad The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByCiudad($ciudad = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($ciudad)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $ciudad)) {
				$ciudad = str_replace('*', '%', $ciudad);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::CIUDAD, $ciudad, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdPais(1234); // WHERE id_pais = 1234
	 * $query->filterByIdPais(array(12, 34)); // WHERE id_pais IN (12, 34)
	 * $query->filterByIdPais(array('min' => 12)); // WHERE id_pais > 12
	 * </code>
	 *
	 * @see       filterByPais()
	 *
	 * @param     mixed $idPais The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query on the telefono_local column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTelefonoLocal('fooValue');   // WHERE telefono_local = 'fooValue'
	 * $query->filterByTelefonoLocal('%fooValue%'); // WHERE telefono_local LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $telefonoLocal The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByTelefonoLocal($telefonoLocal = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefonoLocal)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefonoLocal)) {
				$telefonoLocal = str_replace('*', '%', $telefonoLocal);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::TELEFONO_LOCAL, $telefonoLocal, $comparison);
	}

	/**
	 * Filter the query on the telefono_celular column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTelefonoCelular('fooValue');   // WHERE telefono_celular = 'fooValue'
	 * $query->filterByTelefonoCelular('%fooValue%'); // WHERE telefono_celular LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $telefonoCelular The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByTelefonoCelular($telefonoCelular = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefonoCelular)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefonoCelular)) {
				$telefonoCelular = str_replace('*', '%', $telefonoCelular);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::TELEFONO_CELULAR, $telefonoCelular, $comparison);
	}

	/**
	 * Filter the query on the fax column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFax('fooValue');   // WHERE fax = 'fooValue'
	 * $query->filterByFax('%fooValue%'); // WHERE fax LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $fax The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByFax($fax = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($fax)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $fax)) {
				$fax = str_replace('*', '%', $fax);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::FAX, $fax, $comparison);
	}

	/**
	 * Filter the query on the email column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
	 * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $email The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the sitio_web column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterBySitioWeb('fooValue');   // WHERE sitio_web = 'fooValue'
	 * $query->filterBySitioWeb('%fooValue%'); // WHERE sitio_web LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $sitioWeb The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterBySitioWeb($sitioWeb = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($sitioWeb)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $sitioWeb)) {
				$sitioWeb = str_replace('*', '%', $sitioWeb);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::SITIO_WEB, $sitioWeb, $comparison);
	}

	/**
	 * Filter the query on the tipo_expositor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTipoExpositor('fooValue');   // WHERE tipo_expositor = 'fooValue'
	 * $query->filterByTipoExpositor('%fooValue%'); // WHERE tipo_expositor LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $tipoExpositor The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByTipoExpositor($tipoExpositor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($tipoExpositor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $tipoExpositor)) {
				$tipoExpositor = str_replace('*', '%', $tipoExpositor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::TIPO_EXPOSITOR, $tipoExpositor, $comparison);
	}

	/**
	 * Filter the query on the otro_tipo_expositor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByOtroTipoExpositor('fooValue');   // WHERE otro_tipo_expositor = 'fooValue'
	 * $query->filterByOtroTipoExpositor('%fooValue%'); // WHERE otro_tipo_expositor LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $otroTipoExpositor The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByOtroTipoExpositor($otroTipoExpositor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($otroTipoExpositor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $otroTipoExpositor)) {
				$otroTipoExpositor = str_replace('*', '%', $otroTipoExpositor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::OTRO_TIPO_EXPOSITOR, $otroTipoExpositor, $comparison);
	}

	/**
	 * Filter the query on the numero_stand column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNumeroStand(1234); // WHERE numero_stand = 1234
	 * $query->filterByNumeroStand(array(12, 34)); // WHERE numero_stand IN (12, 34)
	 * $query->filterByNumeroStand(array('min' => 12)); // WHERE numero_stand > 12
	 * </code>
	 *
	 * @param     mixed $numeroStand The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByNumeroStand($numeroStand = null, $comparison = null)
	{
		if (is_array($numeroStand)) {
			$useMinMax = false;
			if (isset($numeroStand['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_STAND, $numeroStand['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($numeroStand['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::NUMERO_STAND, $numeroStand['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::NUMERO_STAND, $numeroStand, $comparison);
	}

	/**
	 * Filter the query on the costo_stand column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCostoStand(1234); // WHERE costo_stand = 1234
	 * $query->filterByCostoStand(array(12, 34)); // WHERE costo_stand IN (12, 34)
	 * $query->filterByCostoStand(array('min' => 12)); // WHERE costo_stand > 12
	 * </code>
	 *
	 * @param     mixed $costoStand The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByCostoStand($costoStand = null, $comparison = null)
	{
		if (is_array($costoStand)) {
			$useMinMax = false;
			if (isset($costoStand['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::COSTO_STAND, $costoStand['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($costoStand['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::COSTO_STAND, $costoStand['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::COSTO_STAND, $costoStand, $comparison);
	}

	/**
	 * Filter the query on the metros_stand column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByMetrosStand(1234); // WHERE metros_stand = 1234
	 * $query->filterByMetrosStand(array(12, 34)); // WHERE metros_stand IN (12, 34)
	 * $query->filterByMetrosStand(array('min' => 12)); // WHERE metros_stand > 12
	 * </code>
	 *
	 * @param     mixed $metrosStand The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByMetrosStand($metrosStand = null, $comparison = null)
	{
		if (is_array($metrosStand)) {
			$useMinMax = false;
			if (isset($metrosStand['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::METROS_STAND, $metrosStand['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($metrosStand['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::METROS_STAND, $metrosStand['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::METROS_STAND, $metrosStand, $comparison);
	}

	/**
	 * Filter the query on the otro_linea_editorial column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByOtroLineaEditorial('fooValue');   // WHERE otro_linea_editorial = 'fooValue'
	 * $query->filterByOtroLineaEditorial('%fooValue%'); // WHERE otro_linea_editorial LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $otroLineaEditorial The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByOtroLineaEditorial($otroLineaEditorial = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($otroLineaEditorial)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $otroLineaEditorial)) {
				$otroLineaEditorial = str_replace('*', '%', $otroLineaEditorial);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::OTRO_LINEA_EDITORIAL, $otroLineaEditorial, $comparison);
	}

	/**
	 * Filter the query on the libro_mas_vendido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByLibroMasVendido('fooValue');   // WHERE libro_mas_vendido = 'fooValue'
	 * $query->filterByLibroMasVendido('%fooValue%'); // WHERE libro_mas_vendido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $libroMasVendido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByLibroMasVendido($libroMasVendido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($libroMasVendido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $libroMasVendido)) {
				$libroMasVendido = str_replace('*', '%', $libroMasVendido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::LIBRO_MAS_VENDIDO, $libroMasVendido, $comparison);
	}

	/**
	 * Filter the query on the costo_libro column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCostoLibro(1234); // WHERE costo_libro = 1234
	 * $query->filterByCostoLibro(array(12, 34)); // WHERE costo_libro IN (12, 34)
	 * $query->filterByCostoLibro(array('min' => 12)); // WHERE costo_libro > 12
	 * </code>
	 *
	 * @param     mixed $costoLibro The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByCostoLibro($costoLibro = null, $comparison = null)
	{
		if (is_array($costoLibro)) {
			$useMinMax = false;
			if (isset($costoLibro['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::COSTO_LIBRO, $costoLibro['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($costoLibro['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::COSTO_LIBRO, $costoLibro['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::COSTO_LIBRO, $costoLibro, $comparison);
	}

	/**
	 * Filter the query on the cantidad_libro_vendido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCantidadLibroVendido(1234); // WHERE cantidad_libro_vendido = 1234
	 * $query->filterByCantidadLibroVendido(array(12, 34)); // WHERE cantidad_libro_vendido IN (12, 34)
	 * $query->filterByCantidadLibroVendido(array('min' => 12)); // WHERE cantidad_libro_vendido > 12
	 * </code>
	 *
	 * @param     mixed $cantidadLibroVendido The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByCantidadLibroVendido($cantidadLibroVendido = null, $comparison = null)
	{
		if (is_array($cantidadLibroVendido)) {
			$useMinMax = false;
			if (isset($cantidadLibroVendido['min'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO, $cantidadLibroVendido['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($cantidadLibroVendido['max'])) {
				$this->addUsingAlias(ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO, $cantidadLibroVendido['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::CANTIDAD_LIBRO_VENDIDO, $cantidadLibroVendido, $comparison);
	}

	/**
	 * Filter the query on the observaciones column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
	 * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $observaciones The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByObservaciones($observaciones = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observaciones)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observaciones)) {
				$observaciones = str_replace('*', '%', $observaciones);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorFeriaPeer::OBSERVACIONES, $observaciones, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Expositor object
	 *
	 * @param     Expositor|PropelCollection $expositor The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByExpositor($expositor, $comparison = null)
	{
		if ($expositor instanceof Expositor) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $expositor->getId(), $comparison);
		} elseif ($expositor instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_EXPOSITOR, $expositor->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByExpositor() only accepts arguments of type Expositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Expositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Expositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Expositor');
		}
		
		return $this;
	}

	/**
	 * Use the Expositor relation Expositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Expositor', 'ExpositorQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais|PropelCollection $pais The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByPais($pais, $comparison = null)
	{
		if ($pais instanceof Pais) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_PAIS, $pais->getId(), $comparison);
		} elseif ($pais instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID_PAIS, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByPais() only accepts arguments of type Pais or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Pais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Pais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Pais');
		}
		
		return $this;
	}

	/**
	 * Use the Pais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related LineaEditorialExposiorFeria object
	 *
	 * @param     LineaEditorialExposiorFeria $lineaEditorialExposiorFeria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function filterByLineaEditorialExposiorFeria($lineaEditorialExposiorFeria, $comparison = null)
	{
		if ($lineaEditorialExposiorFeria instanceof LineaEditorialExposiorFeria) {
			return $this
				->addUsingAlias(ExpositorFeriaPeer::ID, $lineaEditorialExposiorFeria->getIdExpositorFeria(), $comparison);
		} elseif ($lineaEditorialExposiorFeria instanceof PropelCollection) {
			return $this
				->useLineaEditorialExposiorFeriaQuery()
					->filterByPrimaryKeys($lineaEditorialExposiorFeria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByLineaEditorialExposiorFeria() only accepts arguments of type LineaEditorialExposiorFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the LineaEditorialExposiorFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function joinLineaEditorialExposiorFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('LineaEditorialExposiorFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'LineaEditorialExposiorFeria');
		}
		
		return $this;
	}

	/**
	 * Use the LineaEditorialExposiorFeria relation LineaEditorialExposiorFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    LineaEditorialExposiorFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useLineaEditorialExposiorFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinLineaEditorialExposiorFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'LineaEditorialExposiorFeria', 'LineaEditorialExposiorFeriaQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     ExpositorFeria $expositorFeria Object to remove from the list of results
	 *
	 * @return    ExpositorFeriaQuery The current query, for fluid interface
	 */
	public function prune($expositorFeria = null)
	{
		if ($expositorFeria) {
			$this->addUsingAlias(ExpositorFeriaPeer::ID, $expositorFeria->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseExpositorFeriaQuery
