<?php


/**
 * Base class that represents a query for the 'expositor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Thu Dec 25 22:47:29 2014
 *
 * @method     ExpositorQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ExpositorQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     ExpositorQuery orderByApellido($order = Criteria::ASC) Order by the apellido column
 * @method     ExpositorQuery orderByCedula($order = Criteria::ASC) Order by the cedula column
 * @method     ExpositorQuery orderByRif($order = Criteria::ASC) Order by the rif column
 * @method     ExpositorQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 *
 * @method     ExpositorQuery groupById() Group by the id column
 * @method     ExpositorQuery groupByNombre() Group by the nombre column
 * @method     ExpositorQuery groupByApellido() Group by the apellido column
 * @method     ExpositorQuery groupByCedula() Group by the cedula column
 * @method     ExpositorQuery groupByRif() Group by the rif column
 * @method     ExpositorQuery groupByIdPais() Group by the id_pais column
 *
 * @method     ExpositorQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ExpositorQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ExpositorQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ExpositorQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method     ExpositorQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method     ExpositorQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method     ExpositorQuery leftJoinExpositorFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorFeria relation
 * @method     ExpositorQuery rightJoinExpositorFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorFeria relation
 * @method     ExpositorQuery innerJoinExpositorFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorFeria relation
 *
 * @method     ExpositorQuery leftJoinExpositorLineaeditorial($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorLineaeditorial relation
 * @method     ExpositorQuery rightJoinExpositorLineaeditorial($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorLineaeditorial relation
 * @method     ExpositorQuery innerJoinExpositorLineaeditorial($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorLineaeditorial relation
 *
 * @method     ExpositorQuery leftJoinPagoExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the PagoExpositor relation
 * @method     ExpositorQuery rightJoinPagoExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PagoExpositor relation
 * @method     ExpositorQuery innerJoinPagoExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the PagoExpositor relation
 *
 * @method     ExpositorQuery leftJoinStatus($relationAlias = null) Adds a LEFT JOIN clause to the query using the Status relation
 * @method     ExpositorQuery rightJoinStatus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Status relation
 * @method     ExpositorQuery innerJoinStatus($relationAlias = null) Adds a INNER JOIN clause to the query using the Status relation
 *
 * @method     Expositor findOne(PropelPDO $con = null) Return the first Expositor matching the query
 * @method     Expositor findOneOrCreate(PropelPDO $con = null) Return the first Expositor matching the query, or a new Expositor object populated from the query conditions when no match is found
 *
 * @method     Expositor findOneById(string $id) Return the first Expositor filtered by the id column
 * @method     Expositor findOneByNombre(string $nombre) Return the first Expositor filtered by the nombre column
 * @method     Expositor findOneByApellido(string $apellido) Return the first Expositor filtered by the apellido column
 * @method     Expositor findOneByCedula(string $cedula) Return the first Expositor filtered by the cedula column
 * @method     Expositor findOneByRif(string $rif) Return the first Expositor filtered by the rif column
 * @method     Expositor findOneByIdPais(int $id_pais) Return the first Expositor filtered by the id_pais column
 *
 * @method     array findById(string $id) Return Expositor objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Expositor objects filtered by the nombre column
 * @method     array findByApellido(string $apellido) Return Expositor objects filtered by the apellido column
 * @method     array findByCedula(string $cedula) Return Expositor objects filtered by the cedula column
 * @method     array findByRif(string $rif) Return Expositor objects filtered by the rif column
 * @method     array findByIdPais(int $id_pais) Return Expositor objects filtered by the id_pais column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseExpositorQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseExpositorQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Expositor', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ExpositorQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ExpositorQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ExpositorQuery) {
			return $criteria;
		}
		$query = new ExpositorQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Expositor|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ExpositorPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ExpositorPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ExpositorPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ExpositorPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombre('fooValue');   // WHERE nombre = 'fooValue'
	 * $query->filterByNombre('%fooValue%'); // WHERE nombre LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombre The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the apellido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByApellido('fooValue');   // WHERE apellido = 'fooValue'
	 * $query->filterByApellido('%fooValue%'); // WHERE apellido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $apellido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByApellido($apellido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($apellido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $apellido)) {
				$apellido = str_replace('*', '%', $apellido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorPeer::APELLIDO, $apellido, $comparison);
	}

	/**
	 * Filter the query on the cedula column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCedula('fooValue');   // WHERE cedula = 'fooValue'
	 * $query->filterByCedula('%fooValue%'); // WHERE cedula LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $cedula The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByCedula($cedula = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($cedula)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $cedula)) {
				$cedula = str_replace('*', '%', $cedula);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorPeer::CEDULA, $cedula, $comparison);
	}

	/**
	 * Filter the query on the rif column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByRif('fooValue');   // WHERE rif = 'fooValue'
	 * $query->filterByRif('%fooValue%'); // WHERE rif LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $rif The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByRif($rif = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($rif)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $rif)) {
				$rif = str_replace('*', '%', $rif);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ExpositorPeer::RIF, $rif, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdPais(1234); // WHERE id_pais = 1234
	 * $query->filterByIdPais(array(12, 34)); // WHERE id_pais IN (12, 34)
	 * $query->filterByIdPais(array('min' => 12)); // WHERE id_pais > 12
	 * </code>
	 *
	 * @see       filterByPais()
	 *
	 * @param     mixed $idPais The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(ExpositorPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(ExpositorPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ExpositorPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais|PropelCollection $pais The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByPais($pais, $comparison = null)
	{
		if ($pais instanceof Pais) {
			return $this
				->addUsingAlias(ExpositorPeer::ID_PAIS, $pais->getId(), $comparison);
		} elseif ($pais instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ExpositorPeer::ID_PAIS, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByPais() only accepts arguments of type Pais or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Pais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Pais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Pais');
		}
		
		return $this;
	}

	/**
	 * Use the Pais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related ExpositorFeria object
	 *
	 * @param     ExpositorFeria $expositorFeria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByExpositorFeria($expositorFeria, $comparison = null)
	{
		if ($expositorFeria instanceof ExpositorFeria) {
			return $this
				->addUsingAlias(ExpositorPeer::ID, $expositorFeria->getIdExpositor(), $comparison);
		} elseif ($expositorFeria instanceof PropelCollection) {
			return $this
				->useExpositorFeriaQuery()
					->filterByPrimaryKeys($expositorFeria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositorFeria() only accepts arguments of type ExpositorFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function joinExpositorFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorFeria');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorFeria relation ExpositorFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorFeria', 'ExpositorFeriaQuery');
	}

	/**
	 * Filter the query by a related ExpositorLineaeditorial object
	 *
	 * @param     ExpositorLineaeditorial $expositorLineaeditorial  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByExpositorLineaeditorial($expositorLineaeditorial, $comparison = null)
	{
		if ($expositorLineaeditorial instanceof ExpositorLineaeditorial) {
			return $this
				->addUsingAlias(ExpositorPeer::ID, $expositorLineaeditorial->getIdExpositor(), $comparison);
		} elseif ($expositorLineaeditorial instanceof PropelCollection) {
			return $this
				->useExpositorLineaeditorialQuery()
					->filterByPrimaryKeys($expositorLineaeditorial->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositorLineaeditorial() only accepts arguments of type ExpositorLineaeditorial or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorLineaeditorial relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function joinExpositorLineaeditorial($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorLineaeditorial');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorLineaeditorial');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorLineaeditorial relation ExpositorLineaeditorial object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorLineaeditorialQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorLineaeditorialQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorLineaeditorial($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorLineaeditorial', 'ExpositorLineaeditorialQuery');
	}

	/**
	 * Filter the query by a related PagoExpositor object
	 *
	 * @param     PagoExpositor $pagoExpositor  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByPagoExpositor($pagoExpositor, $comparison = null)
	{
		if ($pagoExpositor instanceof PagoExpositor) {
			return $this
				->addUsingAlias(ExpositorPeer::ID, $pagoExpositor->getIdExpositor(), $comparison);
		} elseif ($pagoExpositor instanceof PropelCollection) {
			return $this
				->usePagoExpositorQuery()
					->filterByPrimaryKeys($pagoExpositor->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPagoExpositor() only accepts arguments of type PagoExpositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PagoExpositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function joinPagoExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PagoExpositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PagoExpositor');
		}
		
		return $this;
	}

	/**
	 * Use the PagoExpositor relation PagoExpositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery A secondary query class using the current class as primary query
	 */
	public function usePagoExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPagoExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PagoExpositor', 'PagoExpositorQuery');
	}

	/**
	 * Filter the query by a related Status object
	 *
	 * @param     Status $status  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function filterByStatus($status, $comparison = null)
	{
		if ($status instanceof Status) {
			return $this
				->addUsingAlias(ExpositorPeer::ID, $status->getIdExpositor(), $comparison);
		} elseif ($status instanceof PropelCollection) {
			return $this
				->useStatusQuery()
					->filterByPrimaryKeys($status->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByStatus() only accepts arguments of type Status or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Status relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function joinStatus($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Status');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Status');
		}
		
		return $this;
	}

	/**
	 * Use the Status relation Status object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StatusQuery A secondary query class using the current class as primary query
	 */
	public function useStatusQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Status', 'StatusQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Expositor $expositor Object to remove from the list of results
	 *
	 * @return    ExpositorQuery The current query, for fluid interface
	 */
	public function prune($expositor = null)
	{
		if ($expositor) {
			$this->addUsingAlias(ExpositorPeer::ID, $expositor->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseExpositorQuery
