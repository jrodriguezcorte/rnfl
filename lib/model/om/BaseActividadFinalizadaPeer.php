<?php


/**
 * Base static class for performing query and update operations on the 'actividad_finalizada' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Mon May 11 16:29:19 2015
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividadFinalizadaPeer {

	/** the default database name for this class */
	const DATABASE_NAME = 'propel';

	/** the table name for this class */
	const TABLE_NAME = 'actividad_finalizada';

	/** the related Propel class for this table */
	const OM_CLASS = 'ActividadFinalizada';

	/** A class that can be returned by this peer. */
	const CLASS_DEFAULT = 'lib.model.ActividadFinalizada';

	/** the related TableMap class for this table */
	const TM_CLASS = 'ActividadFinalizadaTableMap';
	
	/** The total number of columns. */
	const NUM_COLUMNS = 21;

	/** The number of lazy-loaded columns. */
	const NUM_LAZY_LOAD_COLUMNS = 0;

	/** The number of columns to hydrate (NUM_COLUMNS - NUM_LAZY_LOAD_COLUMNS) */
	const NUM_HYDRATE_COLUMNS = 21;

	/** the column name for the ID field */
	const ID = 'actividad_finalizada.ID';

	/** the column name for the ID_ACTIVIDAD field */
	const ID_ACTIVIDAD = 'actividad_finalizada.ID_ACTIVIDAD';

	/** the column name for the ID_FERIA field */
	const ID_FERIA = 'actividad_finalizada.ID_FERIA';

	/** the column name for the NOMBRE_RESPONSABLE field */
	const NOMBRE_RESPONSABLE = 'actividad_finalizada.NOMBRE_RESPONSABLE';

	/** the column name for the FECHA_EJECUCION field */
	const FECHA_EJECUCION = 'actividad_finalizada.FECHA_EJECUCION';

	/** the column name for the HORA_EJECUCION field */
	const HORA_EJECUCION = 'actividad_finalizada.HORA_EJECUCION';

	/** the column name for the HORA_FIN_EJECUCION field */
	const HORA_FIN_EJECUCION = 'actividad_finalizada.HORA_FIN_EJECUCION';

	/** the column name for the PARTICIPANTES_M field */
	const PARTICIPANTES_M = 'actividad_finalizada.PARTICIPANTES_M';

	/** the column name for the PARTICIPANTES_F field */
	const PARTICIPANTES_F = 'actividad_finalizada.PARTICIPANTES_F';

	/** the column name for the TOTAL field */
	const TOTAL = 'actividad_finalizada.TOTAL';

	/** the column name for the EVENTO_PUBLICO field */
	const EVENTO_PUBLICO = 'actividad_finalizada.EVENTO_PUBLICO';

	/** the column name for the OTRO_INCUMPLIMIENTO field */
	const OTRO_INCUMPLIMIENTO = 'actividad_finalizada.OTRO_INCUMPLIMIENTO';

	/** the column name for the NOMBRE_INSTITUCION field */
	const NOMBRE_INSTITUCION = 'actividad_finalizada.NOMBRE_INSTITUCION';

	/** the column name for the ID_PAIS field */
	const ID_PAIS = 'actividad_finalizada.ID_PAIS';

	/** the column name for the ID_ESTADO field */
	const ID_ESTADO = 'actividad_finalizada.ID_ESTADO';

	/** the column name for the ID_MUNICIPIO field */
	const ID_MUNICIPIO = 'actividad_finalizada.ID_MUNICIPIO';

	/** the column name for the ID_PARROQUIA field */
	const ID_PARROQUIA = 'actividad_finalizada.ID_PARROQUIA';

	/** the column name for the ID_REGION field */
	const ID_REGION = 'actividad_finalizada.ID_REGION';

	/** the column name for the INCLUIR_INFO_GEOGRAFICA field */
	const INCLUIR_INFO_GEOGRAFICA = 'actividad_finalizada.INCLUIR_INFO_GEOGRAFICA';

	/** the column name for the ID_USUARIO field */
	const ID_USUARIO = 'actividad_finalizada.ID_USUARIO';

	/** the column name for the ACTIVO field */
	const ACTIVO = 'actividad_finalizada.ACTIVO';

	/** The default string format for model objects of the related table **/
	const DEFAULT_STRING_FORMAT = 'YAML';
	
	/**
	 * An identiy map to hold any loaded instances of ActividadFinalizada objects.
	 * This must be public so that other peer classes can access this when hydrating from JOIN
	 * queries.
	 * @var        array ActividadFinalizada[]
	 */
	public static $instances = array();


	// symfony behavior
	
	/**
	 * Indicates whether the current model includes I18N.
	 */
	const IS_I18N = false;

	/**
	 * holds an array of fieldnames
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[self::TYPE_PHPNAME][0] = 'Id'
	 */
	protected static $fieldNames = array (
		BasePeer::TYPE_PHPNAME => array ('Id', 'IdActividad', 'IdFeria', 'NombreResponsable', 'FechaEjecucion', 'HoraEjecucion', 'HoraFinEjecucion', 'ParticipantesM', 'ParticipantesF', 'Total', 'EventoPublico', 'OtroIncumplimiento', 'NombreInstitucion', 'IdPais', 'IdEstado', 'IdMunicipio', 'IdParroquia', 'IdRegion', 'IncluirInfoGeografica', 'IdUsuario', 'Activo', ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id', 'idActividad', 'idFeria', 'nombreResponsable', 'fechaEjecucion', 'horaEjecucion', 'horaFinEjecucion', 'participantesM', 'participantesF', 'total', 'eventoPublico', 'otroIncumplimiento', 'nombreInstitucion', 'idPais', 'idEstado', 'idMunicipio', 'idParroquia', 'idRegion', 'incluirInfoGeografica', 'idUsuario', 'activo', ),
		BasePeer::TYPE_COLNAME => array (self::ID, self::ID_ACTIVIDAD, self::ID_FERIA, self::NOMBRE_RESPONSABLE, self::FECHA_EJECUCION, self::HORA_EJECUCION, self::HORA_FIN_EJECUCION, self::PARTICIPANTES_M, self::PARTICIPANTES_F, self::TOTAL, self::EVENTO_PUBLICO, self::OTRO_INCUMPLIMIENTO, self::NOMBRE_INSTITUCION, self::ID_PAIS, self::ID_ESTADO, self::ID_MUNICIPIO, self::ID_PARROQUIA, self::ID_REGION, self::INCLUIR_INFO_GEOGRAFICA, self::ID_USUARIO, self::ACTIVO, ),
		BasePeer::TYPE_RAW_COLNAME => array ('ID', 'ID_ACTIVIDAD', 'ID_FERIA', 'NOMBRE_RESPONSABLE', 'FECHA_EJECUCION', 'HORA_EJECUCION', 'HORA_FIN_EJECUCION', 'PARTICIPANTES_M', 'PARTICIPANTES_F', 'TOTAL', 'EVENTO_PUBLICO', 'OTRO_INCUMPLIMIENTO', 'NOMBRE_INSTITUCION', 'ID_PAIS', 'ID_ESTADO', 'ID_MUNICIPIO', 'ID_PARROQUIA', 'ID_REGION', 'INCLUIR_INFO_GEOGRAFICA', 'ID_USUARIO', 'ACTIVO', ),
		BasePeer::TYPE_FIELDNAME => array ('id', 'id_actividad', 'id_feria', 'nombre_responsable', 'fecha_ejecucion', 'hora_ejecucion', 'hora_fin_ejecucion', 'participantes_m', 'participantes_f', 'total', 'evento_publico', 'otro_incumplimiento', 'nombre_institucion', 'id_pais', 'id_estado', 'id_municipio', 'id_parroquia', 'id_region', 'incluir_info_geografica', 'id_usuario', 'activo', ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, )
	);

	/**
	 * holds an array of keys for quick access to the fieldnames array
	 *
	 * first dimension keys are the type constants
	 * e.g. self::$fieldNames[BasePeer::TYPE_PHPNAME]['Id'] = 0
	 */
	protected static $fieldKeys = array (
		BasePeer::TYPE_PHPNAME => array ('Id' => 0, 'IdActividad' => 1, 'IdFeria' => 2, 'NombreResponsable' => 3, 'FechaEjecucion' => 4, 'HoraEjecucion' => 5, 'HoraFinEjecucion' => 6, 'ParticipantesM' => 7, 'ParticipantesF' => 8, 'Total' => 9, 'EventoPublico' => 10, 'OtroIncumplimiento' => 11, 'NombreInstitucion' => 12, 'IdPais' => 13, 'IdEstado' => 14, 'IdMunicipio' => 15, 'IdParroquia' => 16, 'IdRegion' => 17, 'IncluirInfoGeografica' => 18, 'IdUsuario' => 19, 'Activo' => 20, ),
		BasePeer::TYPE_STUDLYPHPNAME => array ('id' => 0, 'idActividad' => 1, 'idFeria' => 2, 'nombreResponsable' => 3, 'fechaEjecucion' => 4, 'horaEjecucion' => 5, 'horaFinEjecucion' => 6, 'participantesM' => 7, 'participantesF' => 8, 'total' => 9, 'eventoPublico' => 10, 'otroIncumplimiento' => 11, 'nombreInstitucion' => 12, 'idPais' => 13, 'idEstado' => 14, 'idMunicipio' => 15, 'idParroquia' => 16, 'idRegion' => 17, 'incluirInfoGeografica' => 18, 'idUsuario' => 19, 'activo' => 20, ),
		BasePeer::TYPE_COLNAME => array (self::ID => 0, self::ID_ACTIVIDAD => 1, self::ID_FERIA => 2, self::NOMBRE_RESPONSABLE => 3, self::FECHA_EJECUCION => 4, self::HORA_EJECUCION => 5, self::HORA_FIN_EJECUCION => 6, self::PARTICIPANTES_M => 7, self::PARTICIPANTES_F => 8, self::TOTAL => 9, self::EVENTO_PUBLICO => 10, self::OTRO_INCUMPLIMIENTO => 11, self::NOMBRE_INSTITUCION => 12, self::ID_PAIS => 13, self::ID_ESTADO => 14, self::ID_MUNICIPIO => 15, self::ID_PARROQUIA => 16, self::ID_REGION => 17, self::INCLUIR_INFO_GEOGRAFICA => 18, self::ID_USUARIO => 19, self::ACTIVO => 20, ),
		BasePeer::TYPE_RAW_COLNAME => array ('ID' => 0, 'ID_ACTIVIDAD' => 1, 'ID_FERIA' => 2, 'NOMBRE_RESPONSABLE' => 3, 'FECHA_EJECUCION' => 4, 'HORA_EJECUCION' => 5, 'HORA_FIN_EJECUCION' => 6, 'PARTICIPANTES_M' => 7, 'PARTICIPANTES_F' => 8, 'TOTAL' => 9, 'EVENTO_PUBLICO' => 10, 'OTRO_INCUMPLIMIENTO' => 11, 'NOMBRE_INSTITUCION' => 12, 'ID_PAIS' => 13, 'ID_ESTADO' => 14, 'ID_MUNICIPIO' => 15, 'ID_PARROQUIA' => 16, 'ID_REGION' => 17, 'INCLUIR_INFO_GEOGRAFICA' => 18, 'ID_USUARIO' => 19, 'ACTIVO' => 20, ),
		BasePeer::TYPE_FIELDNAME => array ('id' => 0, 'id_actividad' => 1, 'id_feria' => 2, 'nombre_responsable' => 3, 'fecha_ejecucion' => 4, 'hora_ejecucion' => 5, 'hora_fin_ejecucion' => 6, 'participantes_m' => 7, 'participantes_f' => 8, 'total' => 9, 'evento_publico' => 10, 'otro_incumplimiento' => 11, 'nombre_institucion' => 12, 'id_pais' => 13, 'id_estado' => 14, 'id_municipio' => 15, 'id_parroquia' => 16, 'id_region' => 17, 'incluir_info_geografica' => 18, 'id_usuario' => 19, 'activo' => 20, ),
		BasePeer::TYPE_NUM => array (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, )
	);

	/**
	 * Translates a fieldname to another type
	 *
	 * @param      string $name field name
	 * @param      string $fromType One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                         BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @param      string $toType   One of the class type constants
	 * @return     string translated name of the field.
	 * @throws     PropelException - if the specified name could not be found in the fieldname mappings.
	 */
	static public function translateFieldName($name, $fromType, $toType)
	{
		$toNames = self::getFieldNames($toType);
		$key = isset(self::$fieldKeys[$fromType][$name]) ? self::$fieldKeys[$fromType][$name] : null;
		if ($key === null) {
			throw new PropelException("'$name' could not be found in the field names of type '$fromType'. These are: " . print_r(self::$fieldKeys[$fromType], true));
		}
		return $toNames[$key];
	}

	/**
	 * Returns an array of field names.
	 *
	 * @param      string $type The type of fieldnames to return:
	 *                      One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                      BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     array A list of field names
	 */

	static public function getFieldNames($type = BasePeer::TYPE_PHPNAME)
	{
		if (!array_key_exists($type, self::$fieldNames)) {
			throw new PropelException('Method getFieldNames() expects the parameter $type to be one of the class constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME, BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. ' . $type . ' was given.');
		}
		return self::$fieldNames[$type];
	}

	/**
	 * Convenience method which changes table.column to alias.column.
	 *
	 * Using this method you can maintain SQL abstraction while using column aliases.
	 * <code>
	 *		$c->addAlias("alias1", TablePeer::TABLE_NAME);
	 *		$c->addJoin(TablePeer::alias("alias1", TablePeer::PRIMARY_KEY_COLUMN), TablePeer::PRIMARY_KEY_COLUMN);
	 * </code>
	 * @param      string $alias The alias for the current table.
	 * @param      string $column The column name for current table. (i.e. ActividadFinalizadaPeer::COLUMN_NAME).
	 * @return     string
	 */
	public static function alias($alias, $column)
	{
		return str_replace(ActividadFinalizadaPeer::TABLE_NAME.'.', $alias.'.', $column);
	}

	/**
	 * Add all the columns needed to create a new object.
	 *
	 * Note: any columns that were marked with lazyLoad="true" in the
	 * XML schema will not be added to the select list and only loaded
	 * on demand.
	 *
	 * @param      Criteria $criteria object containing the columns to add.
	 * @param      string   $alias    optional table alias
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function addSelectColumns(Criteria $criteria, $alias = null)
	{
		if (null === $alias) {
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_ACTIVIDAD);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_FERIA);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::NOMBRE_RESPONSABLE);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::FECHA_EJECUCION);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::HORA_EJECUCION);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::HORA_FIN_EJECUCION);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::PARTICIPANTES_M);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::PARTICIPANTES_F);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::TOTAL);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::EVENTO_PUBLICO);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::OTRO_INCUMPLIMIENTO);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::NOMBRE_INSTITUCION);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_PAIS);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_ESTADO);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_MUNICIPIO);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_PARROQUIA);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_REGION);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::INCLUIR_INFO_GEOGRAFICA);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ID_USUARIO);
			$criteria->addSelectColumn(ActividadFinalizadaPeer::ACTIVO);
		} else {
			$criteria->addSelectColumn($alias . '.ID');
			$criteria->addSelectColumn($alias . '.ID_ACTIVIDAD');
			$criteria->addSelectColumn($alias . '.ID_FERIA');
			$criteria->addSelectColumn($alias . '.NOMBRE_RESPONSABLE');
			$criteria->addSelectColumn($alias . '.FECHA_EJECUCION');
			$criteria->addSelectColumn($alias . '.HORA_EJECUCION');
			$criteria->addSelectColumn($alias . '.HORA_FIN_EJECUCION');
			$criteria->addSelectColumn($alias . '.PARTICIPANTES_M');
			$criteria->addSelectColumn($alias . '.PARTICIPANTES_F');
			$criteria->addSelectColumn($alias . '.TOTAL');
			$criteria->addSelectColumn($alias . '.EVENTO_PUBLICO');
			$criteria->addSelectColumn($alias . '.OTRO_INCUMPLIMIENTO');
			$criteria->addSelectColumn($alias . '.NOMBRE_INSTITUCION');
			$criteria->addSelectColumn($alias . '.ID_PAIS');
			$criteria->addSelectColumn($alias . '.ID_ESTADO');
			$criteria->addSelectColumn($alias . '.ID_MUNICIPIO');
			$criteria->addSelectColumn($alias . '.ID_PARROQUIA');
			$criteria->addSelectColumn($alias . '.ID_REGION');
			$criteria->addSelectColumn($alias . '.INCLUIR_INFO_GEOGRAFICA');
			$criteria->addSelectColumn($alias . '.ID_USUARIO');
			$criteria->addSelectColumn($alias . '.ACTIVO');
		}
	}

	/**
	 * Returns the number of rows matching criteria.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @return     int Number of matching rows.
	 */
	public static function doCount(Criteria $criteria, $distinct = false, PropelPDO $con = null)
	{
		// we may modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}

		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		$criteria->setDbName(self::DATABASE_NAME); // Set the correct dbName

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		// BasePeer returns a PDOStatement
		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}
	/**
	 * Selects one object from the DB.
	 *
	 * @param      Criteria $criteria object used to create the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     ActividadFinalizada
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectOne(Criteria $criteria, PropelPDO $con = null)
	{
		$critcopy = clone $criteria;
		$critcopy->setLimit(1);
		$objects = ActividadFinalizadaPeer::doSelect($critcopy, $con);
		if ($objects) {
			return $objects[0];
		}
		return null;
	}
	/**
	 * Selects several row from the DB.
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con
	 * @return     array Array of selected Objects
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelect(Criteria $criteria, PropelPDO $con = null)
	{
		return ActividadFinalizadaPeer::populateObjects(ActividadFinalizadaPeer::doSelectStmt($criteria, $con));
	}
	/**
	 * Prepares the Criteria object and uses the parent doSelect() method to execute a PDOStatement.
	 *
	 * Use this method directly if you want to work with an executed statement durirectly (for example
	 * to perform your own object hydration).
	 *
	 * @param      Criteria $criteria The Criteria object used to build the SELECT statement.
	 * @param      PropelPDO $con The connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     PDOStatement The executed PDOStatement object.
	 * @see        BasePeer::doSelect()
	 */
	public static function doSelectStmt(Criteria $criteria, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		if (!$criteria->hasSelectClause()) {
			$criteria = clone $criteria;
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);
		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		// BasePeer returns a PDOStatement
		return BasePeer::doSelect($criteria, $con);
	}
	/**
	 * Adds an object to the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doSelect*()
	 * methods in your stub classes -- you may need to explicitly add objects
	 * to the cache in order to ensure that the same objects are always returned by doSelect*()
	 * and retrieveByPK*() calls.
	 *
	 * @param      ActividadFinalizada $value A ActividadFinalizada object.
	 * @param      string $key (optional) key to use for instance map (for performance boost if key was already calculated externally).
	 */
	public static function addInstanceToPool($obj, $key = null)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if ($key === null) {
				$key = (string) $obj->getId();
			} // if key === null
			self::$instances[$key] = $obj;
		}
	}

	/**
	 * Removes an object from the instance pool.
	 *
	 * Propel keeps cached copies of objects in an instance pool when they are retrieved
	 * from the database.  In some cases -- especially when you override doDelete
	 * methods in your stub classes -- you may need to explicitly remove objects
	 * from the cache in order to prevent returning objects that no longer exist.
	 *
	 * @param      mixed $value A ActividadFinalizada object or a primary key value.
	 */
	public static function removeInstanceFromPool($value)
	{
		if (Propel::isInstancePoolingEnabled() && $value !== null) {
			if (is_object($value) && $value instanceof ActividadFinalizada) {
				$key = (string) $value->getId();
			} elseif (is_scalar($value)) {
				// assume we've been passed a primary key
				$key = (string) $value;
			} else {
				$e = new PropelException("Invalid value passed to removeInstanceFromPool().  Expected primary key or ActividadFinalizada object; got " . (is_object($value) ? get_class($value) . ' object.' : var_export($value,true)));
				throw $e;
			}

			unset(self::$instances[$key]);
		}
	} // removeInstanceFromPool()

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      string $key The key (@see getPrimaryKeyHash()) for this instance.
	 * @return     ActividadFinalizada Found object or NULL if 1) no instance exists for specified key or 2) instance pooling has been disabled.
	 * @see        getPrimaryKeyHash()
	 */
	public static function getInstanceFromPool($key)
	{
		if (Propel::isInstancePoolingEnabled()) {
			if (isset(self::$instances[$key])) {
				return self::$instances[$key];
			}
		}
		return null; // just to be explicit
	}
	
	/**
	 * Clear the instance pool.
	 *
	 * @return     void
	 */
	public static function clearInstancePool()
	{
		self::$instances = array();
	}
	
	/**
	 * Method to invalidate the instance pool of all tables related to actividad_finalizada
	 * by a foreign key with ON DELETE CASCADE
	 */
	public static function clearRelatedInstancePool()
	{
		// Invalidate objects in IncumplmientoActividadFinalizadaPeer instance pool, 
		// since one or more of them may be deleted by ON DELETE CASCADE/SETNULL rule.
		IncumplmientoActividadFinalizadaPeer::clearInstancePool();
	}

	/**
	 * Retrieves a string version of the primary key from the DB resultset row that can be used to uniquely identify a row in this table.
	 *
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, a serialize()d version of the primary key will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     string A string version of PK or NULL if the components of primary key in result array are all null.
	 */
	public static function getPrimaryKeyHashFromRow($row, $startcol = 0)
	{
		// If the PK cannot be derived from the row, return NULL.
		if ($row[$startcol] === null) {
			return null;
		}
		return (string) $row[$startcol];
	}

	/**
	 * Retrieves the primary key from the DB resultset row 
	 * For tables with a single-column primary key, that simple pkey value will be returned.  For tables with
	 * a multi-column primary key, an array of the primary key columns will be returned.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @return     mixed The primary key of the row
	 */
	public static function getPrimaryKeyFromRow($row, $startcol = 0)
	{
		return (string) $row[$startcol];
	}
	
	/**
	 * The returned array will contain objects of the default type or
	 * objects that inherit from the default.
	 *
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function populateObjects(PDOStatement $stmt)
	{
		$results = array();
	
		// set the class once to avoid overhead in the loop
		$cls = ActividadFinalizadaPeer::getOMClass(false);
		// populate the object(s)
		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj = ActividadFinalizadaPeer::getInstanceFromPool($key))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj->hydrate($row, 0, true); // rehydrate
				$results[] = $obj;
			} else {
				$obj = new $cls();
				$obj->hydrate($row);
				$results[] = $obj;
				ActividadFinalizadaPeer::addInstanceToPool($obj, $key);
			} // if key exists
		}
		$stmt->closeCursor();
		return $results;
	}
	/**
	 * Populates an object of the default type or an object that inherit from the default.
	 *
	 * @param      array $row PropelPDO resultset row.
	 * @param      int $startcol The 0-based offset for reading from the resultset row.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 * @return     array (ActividadFinalizada object, last column rank)
	 */
	public static function populateObject($row, $startcol = 0)
	{
		$key = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, $startcol);
		if (null !== ($obj = ActividadFinalizadaPeer::getInstanceFromPool($key))) {
			// We no longer rehydrate the object, since this can cause data loss.
			// See http://www.propelorm.org/ticket/509
			// $obj->hydrate($row, $startcol, true); // rehydrate
			$col = $startcol + ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		} else {
			$cls = ActividadFinalizadaPeer::OM_CLASS;
			$obj = new $cls();
			$col = $obj->hydrate($row, $startcol);
			ActividadFinalizadaPeer::addInstanceToPool($obj, $key);
		}
		return array($obj, $col);
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Actividad table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinActividad(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Feria table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinFeria(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Pais table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinPais(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Estado table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinEstado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Municipio table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Parroquia table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinParroquia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Region table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinRegion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Usuario table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinUsuario(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Actividad objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinActividad(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		ActividadPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ActividadPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Feria objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinFeria(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		FeriaPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = FeriaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = FeriaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					FeriaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Feria)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Pais objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinPais(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		PaisPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = PaisPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = PaisPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					PaisPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Pais)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Estado objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinEstado(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		EstadoPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = EstadoPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = EstadoPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					EstadoPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Estado)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Municipio objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		MunicipioPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = MunicipioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = MunicipioPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					MunicipioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Municipio)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Parroquia objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinParroquia(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		ParroquiaPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = ParroquiaPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = ParroquiaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					ParroquiaPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Parroquia)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Region objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinRegion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		RegionPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = RegionPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = RegionPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					RegionPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Region)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with their Usuario objects.
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinUsuario(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;
		UsuarioPeer::addSelectColumns($criteria);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {

				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if $obj1 already loaded

			$key2 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol);
			if ($key2 !== null) {
				$obj2 = UsuarioPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = UsuarioPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol);
					UsuarioPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to $obj2 (Usuario)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row was not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining all related tables
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAll(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);

		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY won't ever affect the count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}

	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAll(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol10 = $startcol9 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

			// Add objects for joined Actividad rows

			$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
			if ($key2 !== null) {
				$obj2 = ActividadPeer::getInstanceFromPool($key2);
				if (!$obj2) {

					$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if obj2 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Feria rows

			$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
			if ($key3 !== null) {
				$obj3 = FeriaPeer::getInstanceFromPool($key3);
				if (!$obj3) {

					$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if obj3 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Pais rows

			$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
			if ($key4 !== null) {
				$obj4 = PaisPeer::getInstanceFromPool($key4);
				if (!$obj4) {

					$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if obj4 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Estado rows

			$key5 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
			if ($key5 !== null) {
				$obj5 = EstadoPeer::getInstanceFromPool($key5);
				if (!$obj5) {

					$cls = EstadoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					EstadoPeer::addInstanceToPool($obj5, $key5);
				} // if obj5 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Estado)
				$obj5->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Municipio rows

			$key6 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol6);
			if ($key6 !== null) {
				$obj6 = MunicipioPeer::getInstanceFromPool($key6);
				if (!$obj6) {

					$cls = MunicipioPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MunicipioPeer::addInstanceToPool($obj6, $key6);
				} // if obj6 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Municipio)
				$obj6->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Parroquia rows

			$key7 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
			if ($key7 !== null) {
				$obj7 = ParroquiaPeer::getInstanceFromPool($key7);
				if (!$obj7) {

					$cls = ParroquiaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ParroquiaPeer::addInstanceToPool($obj7, $key7);
				} // if obj7 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Parroquia)
				$obj7->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Region rows

			$key8 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
			if ($key8 !== null) {
				$obj8 = RegionPeer::getInstanceFromPool($key8);
				if (!$obj8) {

					$cls = RegionPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					RegionPeer::addInstanceToPool($obj8, $key8);
				} // if obj8 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Region)
				$obj8->addActividadFinalizada($obj1);
			} // if joined row not null

			// Add objects for joined Usuario rows

			$key9 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol9);
			if ($key9 !== null) {
				$obj9 = UsuarioPeer::getInstanceFromPool($key9);
				if (!$obj9) {

					$cls = UsuarioPeer::getOMClass(false);

					$obj9 = new $cls();
					$obj9->hydrate($row, $startcol9);
					UsuarioPeer::addInstanceToPool($obj9, $key9);
				} // if obj9 loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj9 (Usuario)
				$obj9->addActividadFinalizada($obj1);
			} // if joined row not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Actividad table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptActividad(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Feria table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptFeria(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Pais table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptPais(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Estado table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptEstado(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Municipio table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptMunicipio(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Parroquia table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptParroquia(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Region table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptRegion(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Returns the number of rows matching criteria, joining the related Usuario table
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct Whether to select only distinct columns; deprecated: use Criteria->setDistinct() instead.
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     int Number of matching rows.
	 */
	public static function doCountJoinAllExceptUsuario(Criteria $criteria, $distinct = false, PropelPDO $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		// we're going to modify criteria, so copy it first
		$criteria = clone $criteria;

		// We need to set the primary table name, since in the case that there are no WHERE columns
		// it will be impossible for the BasePeer::createSelectSql() method to determine which
		// tables go into the FROM clause.
		$criteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
		
		if ($distinct && !in_array(Criteria::DISTINCT, $criteria->getSelectModifiers())) {
			$criteria->setDistinct();
		}

		if (!$criteria->hasSelectClause()) {
			ActividadFinalizadaPeer::addSelectColumns($criteria);
		}
		
		$criteria->clearOrderByColumns(); // ORDER BY should not affect count
		
		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
	
		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}

		$stmt = BasePeer::doCount($criteria, $con);

		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$count = (int) $row[0];
		} else {
			$count = 0; // no rows returned; we infer that means 0 matches.
		}
		$stmt->closeCursor();
		return $count;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Actividad.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptActividad(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Feria rows

				$key2 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = FeriaPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					FeriaPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Feria)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key3 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = PaisPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					PaisPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Pais)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key4 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = EstadoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					EstadoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Estado)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MunicipioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Municipio)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key6 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ParroquiaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ParroquiaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Parroquia)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Feria.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptFeria(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key3 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = PaisPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					PaisPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Pais)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key4 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = EstadoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					EstadoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Estado)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MunicipioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Municipio)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key6 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ParroquiaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ParroquiaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Parroquia)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Pais.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptPais(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key4 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = EstadoPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					EstadoPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Estado)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MunicipioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Municipio)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key6 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ParroquiaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ParroquiaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Parroquia)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Estado.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptEstado(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key5 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = MunicipioPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					MunicipioPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Municipio)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key6 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ParroquiaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ParroquiaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Parroquia)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Municipio.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptMunicipio(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key5 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = EstadoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					EstadoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Estado)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key6 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = ParroquiaPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					ParroquiaPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Parroquia)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Parroquia.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptParroquia(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + RegionPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key5 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = EstadoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					EstadoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Estado)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key6 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MunicipioPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MunicipioPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Municipio)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key7 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = RegionPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					RegionPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Region)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Region.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptRegion(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		UsuarioPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + UsuarioPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_USUARIO, UsuarioPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key5 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = EstadoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					EstadoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Estado)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key6 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MunicipioPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MunicipioPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Municipio)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key7 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ParroquiaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ParroquiaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Parroquia)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Usuario rows

				$key8 = UsuarioPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = UsuarioPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = UsuarioPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					UsuarioPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Usuario)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}


	/**
	 * Selects a collection of ActividadFinalizada objects pre-filled with all related objects except Usuario.
	 *
	 * @param      Criteria  $criteria
	 * @param      PropelPDO $con
	 * @param      String    $join_behavior the type of joins to use, defaults to Criteria::LEFT_JOIN
	 * @return     array Array of ActividadFinalizada objects.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doSelectJoinAllExceptUsuario(Criteria $criteria, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$criteria = clone $criteria;

		// Set the correct dbName if it has not been overridden
		// $criteria->getDbName() will return the same object if not set to another value
		// so == check is okay and faster
		if ($criteria->getDbName() == Propel::getDefaultDB()) {
			$criteria->setDbName(self::DATABASE_NAME);
		}

		ActividadFinalizadaPeer::addSelectColumns($criteria);
		$startcol2 = ActividadFinalizadaPeer::NUM_HYDRATE_COLUMNS;

		ActividadPeer::addSelectColumns($criteria);
		$startcol3 = $startcol2 + ActividadPeer::NUM_HYDRATE_COLUMNS;

		FeriaPeer::addSelectColumns($criteria);
		$startcol4 = $startcol3 + FeriaPeer::NUM_HYDRATE_COLUMNS;

		PaisPeer::addSelectColumns($criteria);
		$startcol5 = $startcol4 + PaisPeer::NUM_HYDRATE_COLUMNS;

		EstadoPeer::addSelectColumns($criteria);
		$startcol6 = $startcol5 + EstadoPeer::NUM_HYDRATE_COLUMNS;

		MunicipioPeer::addSelectColumns($criteria);
		$startcol7 = $startcol6 + MunicipioPeer::NUM_HYDRATE_COLUMNS;

		ParroquiaPeer::addSelectColumns($criteria);
		$startcol8 = $startcol7 + ParroquiaPeer::NUM_HYDRATE_COLUMNS;

		RegionPeer::addSelectColumns($criteria);
		$startcol9 = $startcol8 + RegionPeer::NUM_HYDRATE_COLUMNS;

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ACTIVIDAD, ActividadPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_FERIA, FeriaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PAIS, PaisPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_ESTADO, EstadoPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_MUNICIPIO, MunicipioPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_PARROQUIA, ParroquiaPeer::ID, $join_behavior);

		$criteria->addJoin(ActividadFinalizadaPeer::ID_REGION, RegionPeer::ID, $join_behavior);

		// symfony_behaviors behavior
		foreach (sfMixer::getCallables(self::getMixerPreSelectHook(__FUNCTION__)) as $sf_hook)
		{
		  call_user_func($sf_hook, 'BaseActividadFinalizadaPeer', $criteria, $con);
		}


		$stmt = BasePeer::doSelect($criteria, $con);
		$results = array();

		while ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$key1 = ActividadFinalizadaPeer::getPrimaryKeyHashFromRow($row, 0);
			if (null !== ($obj1 = ActividadFinalizadaPeer::getInstanceFromPool($key1))) {
				// We no longer rehydrate the object, since this can cause data loss.
				// See http://www.propelorm.org/ticket/509
				// $obj1->hydrate($row, 0, true); // rehydrate
			} else {
				$cls = ActividadFinalizadaPeer::getOMClass(false);

				$obj1 = new $cls();
				$obj1->hydrate($row);
				ActividadFinalizadaPeer::addInstanceToPool($obj1, $key1);
			} // if obj1 already loaded

				// Add objects for joined Actividad rows

				$key2 = ActividadPeer::getPrimaryKeyHashFromRow($row, $startcol2);
				if ($key2 !== null) {
					$obj2 = ActividadPeer::getInstanceFromPool($key2);
					if (!$obj2) {
	
						$cls = ActividadPeer::getOMClass(false);

					$obj2 = new $cls();
					$obj2->hydrate($row, $startcol2);
					ActividadPeer::addInstanceToPool($obj2, $key2);
				} // if $obj2 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj2 (Actividad)
				$obj2->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Feria rows

				$key3 = FeriaPeer::getPrimaryKeyHashFromRow($row, $startcol3);
				if ($key3 !== null) {
					$obj3 = FeriaPeer::getInstanceFromPool($key3);
					if (!$obj3) {
	
						$cls = FeriaPeer::getOMClass(false);

					$obj3 = new $cls();
					$obj3->hydrate($row, $startcol3);
					FeriaPeer::addInstanceToPool($obj3, $key3);
				} // if $obj3 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj3 (Feria)
				$obj3->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Pais rows

				$key4 = PaisPeer::getPrimaryKeyHashFromRow($row, $startcol4);
				if ($key4 !== null) {
					$obj4 = PaisPeer::getInstanceFromPool($key4);
					if (!$obj4) {
	
						$cls = PaisPeer::getOMClass(false);

					$obj4 = new $cls();
					$obj4->hydrate($row, $startcol4);
					PaisPeer::addInstanceToPool($obj4, $key4);
				} // if $obj4 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj4 (Pais)
				$obj4->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Estado rows

				$key5 = EstadoPeer::getPrimaryKeyHashFromRow($row, $startcol5);
				if ($key5 !== null) {
					$obj5 = EstadoPeer::getInstanceFromPool($key5);
					if (!$obj5) {
	
						$cls = EstadoPeer::getOMClass(false);

					$obj5 = new $cls();
					$obj5->hydrate($row, $startcol5);
					EstadoPeer::addInstanceToPool($obj5, $key5);
				} // if $obj5 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj5 (Estado)
				$obj5->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Municipio rows

				$key6 = MunicipioPeer::getPrimaryKeyHashFromRow($row, $startcol6);
				if ($key6 !== null) {
					$obj6 = MunicipioPeer::getInstanceFromPool($key6);
					if (!$obj6) {
	
						$cls = MunicipioPeer::getOMClass(false);

					$obj6 = new $cls();
					$obj6->hydrate($row, $startcol6);
					MunicipioPeer::addInstanceToPool($obj6, $key6);
				} // if $obj6 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj6 (Municipio)
				$obj6->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Parroquia rows

				$key7 = ParroquiaPeer::getPrimaryKeyHashFromRow($row, $startcol7);
				if ($key7 !== null) {
					$obj7 = ParroquiaPeer::getInstanceFromPool($key7);
					if (!$obj7) {
	
						$cls = ParroquiaPeer::getOMClass(false);

					$obj7 = new $cls();
					$obj7->hydrate($row, $startcol7);
					ParroquiaPeer::addInstanceToPool($obj7, $key7);
				} // if $obj7 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj7 (Parroquia)
				$obj7->addActividadFinalizada($obj1);

			} // if joined row is not null

				// Add objects for joined Region rows

				$key8 = RegionPeer::getPrimaryKeyHashFromRow($row, $startcol8);
				if ($key8 !== null) {
					$obj8 = RegionPeer::getInstanceFromPool($key8);
					if (!$obj8) {
	
						$cls = RegionPeer::getOMClass(false);

					$obj8 = new $cls();
					$obj8->hydrate($row, $startcol8);
					RegionPeer::addInstanceToPool($obj8, $key8);
				} // if $obj8 already loaded

				// Add the $obj1 (ActividadFinalizada) to the collection in $obj8 (Region)
				$obj8->addActividadFinalizada($obj1);

			} // if joined row is not null

			$results[] = $obj1;
		}
		$stmt->closeCursor();
		return $results;
	}

	/**
	 * Returns the TableMap related to this peer.
	 * This method is not needed for general use but a specific application could have a need.
	 * @return     TableMap
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function getTableMap()
	{
		return Propel::getDatabaseMap(self::DATABASE_NAME)->getTable(self::TABLE_NAME);
	}

	/**
	 * Add a TableMap instance to the database for this peer class.
	 */
	public static function buildTableMap()
	{
	  $dbMap = Propel::getDatabaseMap(BaseActividadFinalizadaPeer::DATABASE_NAME);
	  if (!$dbMap->hasTable(BaseActividadFinalizadaPeer::TABLE_NAME))
	  {
	    $dbMap->addTableObject(new ActividadFinalizadaTableMap());
	  }
	}

	/**
	 * The class that the Peer will make instances of.
	 *
	 * If $withPrefix is true, the returned path
	 * uses a dot-path notation which is tranalted into a path
	 * relative to a location on the PHP include_path.
	 * (e.g. path.to.MyClass -> 'path/to/MyClass.php')
	 *
	 * @param      boolean $withPrefix Whether or not to return the path with the class name
	 * @return     string path.to.ClassName
	 */
	public static function getOMClass($withPrefix = true)
	{
		return $withPrefix ? ActividadFinalizadaPeer::CLASS_DEFAULT : ActividadFinalizadaPeer::OM_CLASS;
	}

	/**
	 * Performs an INSERT on the database, given a ActividadFinalizada or Criteria object.
	 *
	 * @param      mixed $values Criteria or ActividadFinalizada object containing data that is used to create the INSERT statement.
	 * @param      PropelPDO $con the PropelPDO connection to use
	 * @return     mixed The new primary key.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doInsert($values, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity
		} else {
			$criteria = $values->buildCriteria(); // build Criteria from ActividadFinalizada object
		}

		if ($criteria->containsKey(ActividadFinalizadaPeer::ID) && $criteria->keyContainsValue(ActividadFinalizadaPeer::ID) ) {
			throw new PropelException('Cannot insert a value for auto-increment primary key ('.ActividadFinalizadaPeer::ID.')');
		}


		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		try {
			// use transaction because $criteria could contain info
			// for more than one table (I guess, conceivably)
			$con->beginTransaction();
			$pk = BasePeer::doInsert($criteria, $con);
			$con->commit();
		} catch(PropelException $e) {
			$con->rollBack();
			throw $e;
		}

		return $pk;
	}

	/**
	 * Performs an UPDATE on the database, given a ActividadFinalizada or Criteria object.
	 *
	 * @param      mixed $values Criteria or ActividadFinalizada object containing data that is used to create the UPDATE statement.
	 * @param      PropelPDO $con The connection to use (specify PropelPDO connection object to exert more control over transactions).
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function doUpdate($values, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$selectCriteria = new Criteria(self::DATABASE_NAME);

		if ($values instanceof Criteria) {
			$criteria = clone $values; // rename for clarity

			$comparison = $criteria->getComparison(ActividadFinalizadaPeer::ID);
			$value = $criteria->remove(ActividadFinalizadaPeer::ID);
			if ($value) {
				$selectCriteria->add(ActividadFinalizadaPeer::ID, $value, $comparison);
			} else {
				$selectCriteria->setPrimaryTableName(ActividadFinalizadaPeer::TABLE_NAME);
			}

		} else { // $values is ActividadFinalizada object
			$criteria = $values->buildCriteria(); // gets full criteria
			$selectCriteria = $values->buildPkeyCriteria(); // gets criteria w/ primary key(s)
		}

		// set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		return BasePeer::doUpdate($selectCriteria, $criteria, $con);
	}

	/**
	 * Deletes all rows from the actividad_finalizada table.
	 *
	 * @param      PropelPDO $con the connection to use
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	public static function doDeleteAll(PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		$affectedRows = 0; // initialize var to track total num of affected rows
		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			$affectedRows += ActividadFinalizadaPeer::doOnDeleteCascade(new Criteria(ActividadFinalizadaPeer::DATABASE_NAME), $con);
			$affectedRows += BasePeer::doDeleteAll(ActividadFinalizadaPeer::TABLE_NAME, $con, ActividadFinalizadaPeer::DATABASE_NAME);
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			ActividadFinalizadaPeer::clearInstancePool();
			ActividadFinalizadaPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs a DELETE on the database, given a ActividadFinalizada or Criteria object OR a primary key value.
	 *
	 * @param      mixed $values Criteria or ActividadFinalizada object or primary key or array of primary keys
	 *              which is used to create the DELETE statement
	 * @param      PropelPDO $con the connection to use
	 * @return     int 	The number of affected rows (if supported by underlying database driver).  This includes CASCADE-related rows
	 *				if supported by native driver or if emulated using Propel.
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	 public static function doDelete($values, PropelPDO $con = null)
	 {
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		if ($values instanceof Criteria) {
			// rename for clarity
			$criteria = clone $values;
		} elseif ($values instanceof ActividadFinalizada) { // it's a model object
			// create criteria based on pk values
			$criteria = $values->buildPkeyCriteria();
		} else { // it's a primary key, or an array of pks
			$criteria = new Criteria(self::DATABASE_NAME);
			$criteria->add(ActividadFinalizadaPeer::ID, (array) $values, Criteria::IN);
		}

		// Set the correct dbName
		$criteria->setDbName(self::DATABASE_NAME);

		$affectedRows = 0; // initialize var to track total num of affected rows

		try {
			// use transaction because $criteria could contain info
			// for more than one table or we could emulating ON DELETE CASCADE, etc.
			$con->beginTransaction();
			
			// cloning the Criteria in case it's modified by doSelect() or doSelectStmt()
			$c = clone $criteria;
			$affectedRows += ActividadFinalizadaPeer::doOnDeleteCascade($c, $con);
			
			// Because this db requires some delete cascade/set null emulation, we have to
			// clear the cached instance *after* the emulation has happened (since
			// instances get re-added by the select statement contained therein).
			if ($values instanceof Criteria) {
				ActividadFinalizadaPeer::clearInstancePool();
			} elseif ($values instanceof ActividadFinalizada) { // it's a model object
				ActividadFinalizadaPeer::removeInstanceFromPool($values);
			} else { // it's a primary key, or an array of pks
				foreach ((array) $values as $singleval) {
					ActividadFinalizadaPeer::removeInstanceFromPool($singleval);
				}
			}
			
			$affectedRows += BasePeer::doDelete($criteria, $con);
			ActividadFinalizadaPeer::clearRelatedInstancePool();
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * This is a method for emulating ON DELETE CASCADE for DBs that don't support this
	 * feature (like MySQL or SQLite).
	 *
	 * This method is not very speedy because it must perform a query first to get
	 * the implicated records and then perform the deletes by calling those Peer classes.
	 *
	 * This method should be used within a transaction if possible.
	 *
	 * @param      Criteria $criteria
	 * @param      PropelPDO $con
	 * @return     int The number of affected rows (if supported by underlying database driver).
	 */
	protected static function doOnDeleteCascade(Criteria $criteria, PropelPDO $con)
	{
		// initialize var to track total num of affected rows
		$affectedRows = 0;

		// first find the objects that are implicated by the $criteria
		$objects = ActividadFinalizadaPeer::doSelect($criteria, $con);
		foreach ($objects as $obj) {


			// delete related IncumplmientoActividadFinalizada objects
			$criteria = new Criteria(IncumplmientoActividadFinalizadaPeer::DATABASE_NAME);
			
			$criteria->add(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $obj->getId());
			$affectedRows += IncumplmientoActividadFinalizadaPeer::doDelete($criteria, $con);
		}
		return $affectedRows;
	}

	/**
	 * Validates all modified columns of given ActividadFinalizada object.
	 * If parameter $columns is either a single column name or an array of column names
	 * than only those columns are validated.
	 *
	 * NOTICE: This does not apply to primary or foreign keys for now.
	 *
	 * @param      ActividadFinalizada $obj The object to validate.
	 * @param      mixed $cols Column name or array of column names.
	 *
	 * @return     mixed TRUE if all columns are valid or the error message of the first invalid column.
	 */
	public static function doValidate($obj, $cols = null)
	{
		$columns = array();

		if ($cols) {
			$dbMap = Propel::getDatabaseMap(ActividadFinalizadaPeer::DATABASE_NAME);
			$tableMap = $dbMap->getTable(ActividadFinalizadaPeer::TABLE_NAME);

			if (! is_array($cols)) {
				$cols = array($cols);
			}

			foreach ($cols as $colName) {
				if ($tableMap->containsColumn($colName)) {
					$get = 'get' . $tableMap->getColumn($colName)->getPhpName();
					$columns[$colName] = $obj->$get();
				}
			}
		} else {

		}

		return BasePeer::doValidate(ActividadFinalizadaPeer::DATABASE_NAME, ActividadFinalizadaPeer::TABLE_NAME, $columns);
	}

	/**
	 * Retrieve a single object by pkey.
	 *
	 * @param      string $pk the primary key.
	 * @param      PropelPDO $con the connection to use
	 * @return     ActividadFinalizada
	 */
	public static function retrieveByPK($pk, PropelPDO $con = null)
	{

		if (null !== ($obj = ActividadFinalizadaPeer::getInstanceFromPool((string) $pk))) {
			return $obj;
		}

		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$criteria = new Criteria(ActividadFinalizadaPeer::DATABASE_NAME);
		$criteria->add(ActividadFinalizadaPeer::ID, $pk);

		$v = ActividadFinalizadaPeer::doSelect($criteria, $con);

		return !empty($v) > 0 ? $v[0] : null;
	}

	/**
	 * Retrieve multiple objects by pkey.
	 *
	 * @param      array $pks List of primary keys
	 * @param      PropelPDO $con the connection to use
	 * @throws     PropelException Any exceptions caught during processing will be
	 *		 rethrown wrapped into a PropelException.
	 */
	public static function retrieveByPKs($pks, PropelPDO $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection(ActividadFinalizadaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		$objs = null;
		if (empty($pks)) {
			$objs = array();
		} else {
			$criteria = new Criteria(ActividadFinalizadaPeer::DATABASE_NAME);
			$criteria->add(ActividadFinalizadaPeer::ID, $pks, Criteria::IN);
			$objs = ActividadFinalizadaPeer::doSelect($criteria, $con);
		}
		return $objs;
	}

	// symfony behavior
	
	/**
	 * Returns an array of arrays that contain columns in each unique index.
	 *
	 * @return array
	 */
	static public function getUniqueColumnNames()
	{
	  return array();
	}

	// symfony_behaviors behavior
	
	/**
	 * Returns the name of the hook to call from inside the supplied method.
	 *
	 * @param string $method The calling method
	 *
	 * @return string A hook name for {@link sfMixer}
	 *
	 * @throws LogicException If the method name is not recognized
	 */
	static private function getMixerPreSelectHook($method)
	{
	  if (preg_match('/^do(Select|Count)(Join(All(Except)?)?|Stmt)?/', $method, $match))
	  {
	    return sprintf('BaseActividadFinalizadaPeer:%s:%1$s', 'Count' == $match[1] ? 'doCount' : $match[0]);
	  }
	
	  throw new LogicException(sprintf('Unrecognized function "%s"', $method));
	}

} // BaseActividadFinalizadaPeer

// This is the static code needed to register the TableMap for this table with the main Propel class.
//
BaseActividadFinalizadaPeer::buildTableMap();

