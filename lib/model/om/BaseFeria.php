<?php


/**
 * Base class that represents a row from the 'feria' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sun Nov  9 16:04:59 2014
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseFeria extends BaseObject  implements Persistent
{

	/**
	 * Peer class name
	 */
	const PEER = 'FeriaPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        FeriaPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the nombre field.
	 * @var        string
	 */
	protected $nombre;

	/**
	 * The value for the descripcion field.
	 * @var        string
	 */
	protected $descripcion;

	/**
	 * The value for the fecha_inicio field.
	 * @var        string
	 */
	protected $fecha_inicio;

	/**
	 * The value for the fecha_fin field.
	 * @var        string
	 */
	protected $fecha_fin;

	/**
	 * The value for the id_pais field.
	 * @var        int
	 */
	protected $id_pais;

	/**
	 * The value for the id_estado field.
	 * @var        int
	 */
	protected $id_estado;

	/**
	 * The value for the id_municipio field.
	 * @var        int
	 */
	protected $id_municipio;

	/**
	 * The value for the id_parroquia field.
	 * @var        int
	 */
	protected $id_parroquia;

	/**
	 * The value for the id_region field.
	 * @var        int
	 */
	protected $id_region;

	/**
	 * The value for the costo field.
	 * @var        string
	 */
	protected $costo;

	/**
	 * The value for the libro_mas_vendido field.
	 * @var        string
	 */
	protected $libro_mas_vendido;

	/**
	 * The value for the autor_libro_mas_vendido field.
	 * @var        string
	 */
	protected $autor_libro_mas_vendido;

	/**
	 * The value for the extension_superficie field.
	 * @var        string
	 */
	protected $extension_superficie;

	/**
	 * @var        Pais
	 */
	protected $aPais;

	/**
	 * @var        Estado
	 */
	protected $aEstado;

	/**
	 * @var        Municipio
	 */
	protected $aMunicipio;

	/**
	 * @var        Parroquia
	 */
	protected $aParroquia;

	/**
	 * @var        Region
	 */
	protected $aRegion;

	/**
	 * @var        array Actividad[] Collection to store aggregation of Actividad objects.
	 */
	protected $collActividads;

	/**
	 * @var        array ExpositorFeria[] Collection to store aggregation of ExpositorFeria objects.
	 */
	protected $collExpositorFerias;

	/**
	 * @var        array ExpositorSelloeditorial[] Collection to store aggregation of ExpositorSelloeditorial objects.
	 */
	protected $collExpositorSelloeditorials;

	/**
	 * @var        array FeriaSelloeditorial[] Collection to store aggregation of FeriaSelloeditorial objects.
	 */
	protected $collFeriaSelloeditorials;

	/**
	 * @var        array PonenteActividad[] Collection to store aggregation of PonenteActividad objects.
	 */
	protected $collPonenteActividads;

	/**
	 * @var        array Visitante[] Collection to store aggregation of Visitante objects.
	 */
	protected $collVisitantes;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [nombre] column value.
	 * 
	 * @return     string
	 */
	public function getNombre()
	{
		return $this->nombre;
	}

	/**
	 * Get the [descripcion] column value.
	 * 
	 * @return     string
	 */
	public function getDescripcion()
	{
		return $this->descripcion;
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_inicio] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaInicio($format = 'Y-m-d')
	{
		if ($this->fecha_inicio === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_inicio);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_inicio, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [fecha_fin] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFechaFin($format = 'Y-m-d')
	{
		if ($this->fecha_fin === null) {
			return null;
		}



		try {
			$dt = new DateTime($this->fecha_fin);
		} catch (Exception $x) {
			throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->fecha_fin, true), $x);
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [id_pais] column value.
	 * 
	 * @return     int
	 */
	public function getIdPais()
	{
		return $this->id_pais;
	}

	/**
	 * Get the [id_estado] column value.
	 * 
	 * @return     int
	 */
	public function getIdEstado()
	{
		return $this->id_estado;
	}

	/**
	 * Get the [id_municipio] column value.
	 * 
	 * @return     int
	 */
	public function getIdMunicipio()
	{
		return $this->id_municipio;
	}

	/**
	 * Get the [id_parroquia] column value.
	 * 
	 * @return     int
	 */
	public function getIdParroquia()
	{
		return $this->id_parroquia;
	}

	/**
	 * Get the [id_region] column value.
	 * 
	 * @return     int
	 */
	public function getIdRegion()
	{
		return $this->id_region;
	}

	/**
	 * Get the [costo] column value.
	 * 
	 * @return     string
	 */
	public function getCosto()
	{
		return $this->costo;
	}

	/**
	 * Get the [libro_mas_vendido] column value.
	 * 
	 * @return     string
	 */
	public function getLibroMasVendido()
	{
		return $this->libro_mas_vendido;
	}

	/**
	 * Get the [autor_libro_mas_vendido] column value.
	 * 
	 * @return     string
	 */
	public function getAutorLibroMasVendido()
	{
		return $this->autor_libro_mas_vendido;
	}

	/**
	 * Get the [extension_superficie] column value.
	 * 
	 * @return     string
	 */
	public function getExtensionSuperficie()
	{
		return $this->extension_superficie;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = FeriaPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [nombre] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setNombre($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->nombre !== $v) {
			$this->nombre = $v;
			$this->modifiedColumns[] = FeriaPeer::NOMBRE;
		}

		return $this;
	} // setNombre()

	/**
	 * Set the value of [descripcion] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setDescripcion($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->descripcion !== $v) {
			$this->descripcion = $v;
			$this->modifiedColumns[] = FeriaPeer::DESCRIPCION;
		}

		return $this;
	} // setDescripcion()

	/**
	 * Sets the value of [fecha_inicio] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setFechaInicio($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->fecha_inicio !== null || $dt !== null) {
			$currentDateAsString = ($this->fecha_inicio !== null && $tmpDt = new DateTime($this->fecha_inicio)) ? $tmpDt->format('Y-m-d') : null;
			$newDateAsString = $dt ? $dt->format('Y-m-d') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->fecha_inicio = $newDateAsString;
				$this->modifiedColumns[] = FeriaPeer::FECHA_INICIO;
			}
		} // if either are not null

		return $this;
	} // setFechaInicio()

	/**
	 * Sets the value of [fecha_fin] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.
	 *               Empty strings are treated as NULL.
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setFechaFin($v)
	{
		$dt = PropelDateTime::newInstance($v, null, 'DateTime');
		if ($this->fecha_fin !== null || $dt !== null) {
			$currentDateAsString = ($this->fecha_fin !== null && $tmpDt = new DateTime($this->fecha_fin)) ? $tmpDt->format('Y-m-d') : null;
			$newDateAsString = $dt ? $dt->format('Y-m-d') : null;
			if ($currentDateAsString !== $newDateAsString) {
				$this->fecha_fin = $newDateAsString;
				$this->modifiedColumns[] = FeriaPeer::FECHA_FIN;
			}
		} // if either are not null

		return $this;
	} // setFechaFin()

	/**
	 * Set the value of [id_pais] column.
	 * 
	 * @param      int $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setIdPais($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_pais !== $v) {
			$this->id_pais = $v;
			$this->modifiedColumns[] = FeriaPeer::ID_PAIS;
		}

		if ($this->aPais !== null && $this->aPais->getId() !== $v) {
			$this->aPais = null;
		}

		return $this;
	} // setIdPais()

	/**
	 * Set the value of [id_estado] column.
	 * 
	 * @param      int $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setIdEstado($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_estado !== $v) {
			$this->id_estado = $v;
			$this->modifiedColumns[] = FeriaPeer::ID_ESTADO;
		}

		if ($this->aEstado !== null && $this->aEstado->getId() !== $v) {
			$this->aEstado = null;
		}

		return $this;
	} // setIdEstado()

	/**
	 * Set the value of [id_municipio] column.
	 * 
	 * @param      int $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setIdMunicipio($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_municipio !== $v) {
			$this->id_municipio = $v;
			$this->modifiedColumns[] = FeriaPeer::ID_MUNICIPIO;
		}

		if ($this->aMunicipio !== null && $this->aMunicipio->getId() !== $v) {
			$this->aMunicipio = null;
		}

		return $this;
	} // setIdMunicipio()

	/**
	 * Set the value of [id_parroquia] column.
	 * 
	 * @param      int $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setIdParroquia($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_parroquia !== $v) {
			$this->id_parroquia = $v;
			$this->modifiedColumns[] = FeriaPeer::ID_PARROQUIA;
		}

		if ($this->aParroquia !== null && $this->aParroquia->getId() !== $v) {
			$this->aParroquia = null;
		}

		return $this;
	} // setIdParroquia()

	/**
	 * Set the value of [id_region] column.
	 * 
	 * @param      int $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setIdRegion($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id_region !== $v) {
			$this->id_region = $v;
			$this->modifiedColumns[] = FeriaPeer::ID_REGION;
		}

		if ($this->aRegion !== null && $this->aRegion->getId() !== $v) {
			$this->aRegion = null;
		}

		return $this;
	} // setIdRegion()

	/**
	 * Set the value of [costo] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setCosto($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->costo !== $v) {
			$this->costo = $v;
			$this->modifiedColumns[] = FeriaPeer::COSTO;
		}

		return $this;
	} // setCosto()

	/**
	 * Set the value of [libro_mas_vendido] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setLibroMasVendido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->libro_mas_vendido !== $v) {
			$this->libro_mas_vendido = $v;
			$this->modifiedColumns[] = FeriaPeer::LIBRO_MAS_VENDIDO;
		}

		return $this;
	} // setLibroMasVendido()

	/**
	 * Set the value of [autor_libro_mas_vendido] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setAutorLibroMasVendido($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->autor_libro_mas_vendido !== $v) {
			$this->autor_libro_mas_vendido = $v;
			$this->modifiedColumns[] = FeriaPeer::AUTOR_LIBRO_MAS_VENDIDO;
		}

		return $this;
	} // setAutorLibroMasVendido()

	/**
	 * Set the value of [extension_superficie] column.
	 * 
	 * @param      string $v new value
	 * @return     Feria The current object (for fluent API support)
	 */
	public function setExtensionSuperficie($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extension_superficie !== $v) {
			$this->extension_superficie = $v;
			$this->modifiedColumns[] = FeriaPeer::EXTENSION_SUPERFICIE;
		}

		return $this;
	} // setExtensionSuperficie()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->nombre = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->descripcion = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->fecha_inicio = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->fecha_fin = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->id_pais = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->id_estado = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->id_municipio = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->id_parroquia = ($row[$startcol + 8] !== null) ? (int) $row[$startcol + 8] : null;
			$this->id_region = ($row[$startcol + 9] !== null) ? (int) $row[$startcol + 9] : null;
			$this->costo = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->libro_mas_vendido = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->autor_libro_mas_vendido = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->extension_superficie = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			return $startcol + 14; // 14 = FeriaPeer::NUM_HYDRATE_COLUMNS.

		} catch (Exception $e) {
			throw new PropelException("Error populating Feria object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aPais !== null && $this->id_pais !== $this->aPais->getId()) {
			$this->aPais = null;
		}
		if ($this->aEstado !== null && $this->id_estado !== $this->aEstado->getId()) {
			$this->aEstado = null;
		}
		if ($this->aMunicipio !== null && $this->id_municipio !== $this->aMunicipio->getId()) {
			$this->aMunicipio = null;
		}
		if ($this->aParroquia !== null && $this->id_parroquia !== $this->aParroquia->getId()) {
			$this->aParroquia = null;
		}
		if ($this->aRegion !== null && $this->id_region !== $this->aRegion->getId()) {
			$this->aRegion = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeriaPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = FeriaPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aPais = null;
			$this->aEstado = null;
			$this->aMunicipio = null;
			$this->aParroquia = null;
			$this->aRegion = null;
			$this->collActividads = null;

			$this->collExpositorFerias = null;

			$this->collExpositorSelloeditorials = null;

			$this->collFeriaSelloeditorials = null;

			$this->collPonenteActividads = null;

			$this->collVisitantes = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeriaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		try {
			$ret = $this->preDelete($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFeria:delete:pre') as $callable)
			{
			  if (call_user_func($callable, $this, $con))
			  {
			    $con->commit();
			    return;
			  }
			}

			if ($ret) {
				FeriaQuery::create()
					->filterByPrimaryKey($this->getPrimaryKey())
					->delete($con);
				$this->postDelete($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFeria:delete:post') as $callable)
				{
				  call_user_func($callable, $this, $con);
				}

				$con->commit();
				$this->setDeleted(true);
			} else {
				$con->commit();
			}
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(FeriaPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}

		$con->beginTransaction();
		$isInsert = $this->isNew();
		try {
			$ret = $this->preSave($con);
			// symfony_behaviors behavior
			foreach (sfMixer::getCallables('BaseFeria:save:pre') as $callable)
			{
			  if (is_integer($affectedRows = call_user_func($callable, $this, $con)))
			  {
			  	$con->commit();
			    return $affectedRows;
			  }
			}

			if ($isInsert) {
				$ret = $ret && $this->preInsert($con);
			} else {
				$ret = $ret && $this->preUpdate($con);
			}
			if ($ret) {
				$affectedRows = $this->doSave($con);
				if ($isInsert) {
					$this->postInsert($con);
				} else {
					$this->postUpdate($con);
				}
				$this->postSave($con);
				// symfony_behaviors behavior
				foreach (sfMixer::getCallables('BaseFeria:save:post') as $callable)
				{
				  call_user_func($callable, $this, $con, $affectedRows);
				}

				FeriaPeer::addInstanceToPool($this);
			} else {
				$affectedRows = 0;
			}
			$con->commit();
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPais !== null) {
				if ($this->aPais->isModified() || $this->aPais->isNew()) {
					$affectedRows += $this->aPais->save($con);
				}
				$this->setPais($this->aPais);
			}

			if ($this->aEstado !== null) {
				if ($this->aEstado->isModified() || $this->aEstado->isNew()) {
					$affectedRows += $this->aEstado->save($con);
				}
				$this->setEstado($this->aEstado);
			}

			if ($this->aMunicipio !== null) {
				if ($this->aMunicipio->isModified() || $this->aMunicipio->isNew()) {
					$affectedRows += $this->aMunicipio->save($con);
				}
				$this->setMunicipio($this->aMunicipio);
			}

			if ($this->aParroquia !== null) {
				if ($this->aParroquia->isModified() || $this->aParroquia->isNew()) {
					$affectedRows += $this->aParroquia->save($con);
				}
				$this->setParroquia($this->aParroquia);
			}

			if ($this->aRegion !== null) {
				if ($this->aRegion->isModified() || $this->aRegion->isNew()) {
					$affectedRows += $this->aRegion->save($con);
				}
				$this->setRegion($this->aRegion);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = FeriaPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$criteria = $this->buildCriteria();
					if ($criteria->keyContainsValue(FeriaPeer::ID) ) {
						throw new PropelException('Cannot insert a value for auto-increment primary key ('.FeriaPeer::ID.')');
					}

					$pk = BasePeer::doInsert($criteria, $con);
					$affectedRows += 1;
					$this->setId($pk);  //[IMV] update autoincrement primary key
					$this->setNew(false);
				} else {
					$affectedRows += FeriaPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collActividads !== null) {
				foreach ($this->collActividads as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExpositorFerias !== null) {
				foreach ($this->collExpositorFerias as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collExpositorSelloeditorials !== null) {
				foreach ($this->collExpositorSelloeditorials as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFeriaSelloeditorials !== null) {
				foreach ($this->collFeriaSelloeditorials as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collPonenteActividads !== null) {
				foreach ($this->collPonenteActividads as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collVisitantes !== null) {
				foreach ($this->collVisitantes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aPais !== null) {
				if (!$this->aPais->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aPais->getValidationFailures());
				}
			}

			if ($this->aEstado !== null) {
				if (!$this->aEstado->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEstado->getValidationFailures());
				}
			}

			if ($this->aMunicipio !== null) {
				if (!$this->aMunicipio->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aMunicipio->getValidationFailures());
				}
			}

			if ($this->aParroquia !== null) {
				if (!$this->aParroquia->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aParroquia->getValidationFailures());
				}
			}

			if ($this->aRegion !== null) {
				if (!$this->aRegion->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aRegion->getValidationFailures());
				}
			}


			if (($retval = FeriaPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collActividads !== null) {
					foreach ($this->collActividads as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExpositorFerias !== null) {
					foreach ($this->collExpositorFerias as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collExpositorSelloeditorials !== null) {
					foreach ($this->collExpositorSelloeditorials as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFeriaSelloeditorials !== null) {
					foreach ($this->collFeriaSelloeditorials as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collPonenteActividads !== null) {
					foreach ($this->collPonenteActividads as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collVisitantes !== null) {
					foreach ($this->collVisitantes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FeriaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getNombre();
				break;
			case 2:
				return $this->getDescripcion();
				break;
			case 3:
				return $this->getFechaInicio();
				break;
			case 4:
				return $this->getFechaFin();
				break;
			case 5:
				return $this->getIdPais();
				break;
			case 6:
				return $this->getIdEstado();
				break;
			case 7:
				return $this->getIdMunicipio();
				break;
			case 8:
				return $this->getIdParroquia();
				break;
			case 9:
				return $this->getIdRegion();
				break;
			case 10:
				return $this->getCosto();
				break;
			case 11:
				return $this->getLibroMasVendido();
				break;
			case 12:
				return $this->getAutorLibroMasVendido();
				break;
			case 13:
				return $this->getExtensionSuperficie();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param     string  $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 *                    BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 *                    Defaults to BasePeer::TYPE_PHPNAME.
	 * @param     boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns. Defaults to TRUE.
	 * @param     array $alreadyDumpedObjects List of objects to skip to avoid recursion
	 * @param     boolean $includeForeignObjects (optional) Whether to include hydrated related objects. Default to FALSE.
	 *
	 * @return    array an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true, $alreadyDumpedObjects = array(), $includeForeignObjects = false)
	{
		if (isset($alreadyDumpedObjects['Feria'][$this->getPrimaryKey()])) {
			return '*RECURSION*';
		}
		$alreadyDumpedObjects['Feria'][$this->getPrimaryKey()] = true;
		$keys = FeriaPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getNombre(),
			$keys[2] => $this->getDescripcion(),
			$keys[3] => $this->getFechaInicio(),
			$keys[4] => $this->getFechaFin(),
			$keys[5] => $this->getIdPais(),
			$keys[6] => $this->getIdEstado(),
			$keys[7] => $this->getIdMunicipio(),
			$keys[8] => $this->getIdParroquia(),
			$keys[9] => $this->getIdRegion(),
			$keys[10] => $this->getCosto(),
			$keys[11] => $this->getLibroMasVendido(),
			$keys[12] => $this->getAutorLibroMasVendido(),
			$keys[13] => $this->getExtensionSuperficie(),
		);
		if ($includeForeignObjects) {
			if (null !== $this->aPais) {
				$result['Pais'] = $this->aPais->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aEstado) {
				$result['Estado'] = $this->aEstado->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aMunicipio) {
				$result['Municipio'] = $this->aMunicipio->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aParroquia) {
				$result['Parroquia'] = $this->aParroquia->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->aRegion) {
				$result['Region'] = $this->aRegion->toArray($keyType, $includeLazyLoadColumns,  $alreadyDumpedObjects, true);
			}
			if (null !== $this->collActividads) {
				$result['Actividads'] = $this->collActividads->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collExpositorFerias) {
				$result['ExpositorFerias'] = $this->collExpositorFerias->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collExpositorSelloeditorials) {
				$result['ExpositorSelloeditorials'] = $this->collExpositorSelloeditorials->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collFeriaSelloeditorials) {
				$result['FeriaSelloeditorials'] = $this->collFeriaSelloeditorials->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collPonenteActividads) {
				$result['PonenteActividads'] = $this->collPonenteActividads->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
			if (null !== $this->collVisitantes) {
				$result['Visitantes'] = $this->collVisitantes->toArray(null, true, $keyType, $includeLazyLoadColumns, $alreadyDumpedObjects);
			}
		}
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = FeriaPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setNombre($value);
				break;
			case 2:
				$this->setDescripcion($value);
				break;
			case 3:
				$this->setFechaInicio($value);
				break;
			case 4:
				$this->setFechaFin($value);
				break;
			case 5:
				$this->setIdPais($value);
				break;
			case 6:
				$this->setIdEstado($value);
				break;
			case 7:
				$this->setIdMunicipio($value);
				break;
			case 8:
				$this->setIdParroquia($value);
				break;
			case 9:
				$this->setIdRegion($value);
				break;
			case 10:
				$this->setCosto($value);
				break;
			case 11:
				$this->setLibroMasVendido($value);
				break;
			case 12:
				$this->setAutorLibroMasVendido($value);
				break;
			case 13:
				$this->setExtensionSuperficie($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = FeriaPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setNombre($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setDescripcion($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setFechaInicio($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setFechaFin($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setIdPais($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setIdEstado($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setIdMunicipio($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setIdParroquia($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIdRegion($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setCosto($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setLibroMasVendido($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setAutorLibroMasVendido($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setExtensionSuperficie($arr[$keys[13]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(FeriaPeer::DATABASE_NAME);

		if ($this->isColumnModified(FeriaPeer::ID)) $criteria->add(FeriaPeer::ID, $this->id);
		if ($this->isColumnModified(FeriaPeer::NOMBRE)) $criteria->add(FeriaPeer::NOMBRE, $this->nombre);
		if ($this->isColumnModified(FeriaPeer::DESCRIPCION)) $criteria->add(FeriaPeer::DESCRIPCION, $this->descripcion);
		if ($this->isColumnModified(FeriaPeer::FECHA_INICIO)) $criteria->add(FeriaPeer::FECHA_INICIO, $this->fecha_inicio);
		if ($this->isColumnModified(FeriaPeer::FECHA_FIN)) $criteria->add(FeriaPeer::FECHA_FIN, $this->fecha_fin);
		if ($this->isColumnModified(FeriaPeer::ID_PAIS)) $criteria->add(FeriaPeer::ID_PAIS, $this->id_pais);
		if ($this->isColumnModified(FeriaPeer::ID_ESTADO)) $criteria->add(FeriaPeer::ID_ESTADO, $this->id_estado);
		if ($this->isColumnModified(FeriaPeer::ID_MUNICIPIO)) $criteria->add(FeriaPeer::ID_MUNICIPIO, $this->id_municipio);
		if ($this->isColumnModified(FeriaPeer::ID_PARROQUIA)) $criteria->add(FeriaPeer::ID_PARROQUIA, $this->id_parroquia);
		if ($this->isColumnModified(FeriaPeer::ID_REGION)) $criteria->add(FeriaPeer::ID_REGION, $this->id_region);
		if ($this->isColumnModified(FeriaPeer::COSTO)) $criteria->add(FeriaPeer::COSTO, $this->costo);
		if ($this->isColumnModified(FeriaPeer::LIBRO_MAS_VENDIDO)) $criteria->add(FeriaPeer::LIBRO_MAS_VENDIDO, $this->libro_mas_vendido);
		if ($this->isColumnModified(FeriaPeer::AUTOR_LIBRO_MAS_VENDIDO)) $criteria->add(FeriaPeer::AUTOR_LIBRO_MAS_VENDIDO, $this->autor_libro_mas_vendido);
		if ($this->isColumnModified(FeriaPeer::EXTENSION_SUPERFICIE)) $criteria->add(FeriaPeer::EXTENSION_SUPERFICIE, $this->extension_superficie);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(FeriaPeer::DATABASE_NAME);
		$criteria->add(FeriaPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Returns true if the primary key for this object is null.
	 * @return     boolean
	 */
	public function isPrimaryKeyNull()
	{
		return null === $this->getId();
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Feria (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @param      boolean $makeNew Whether to reset autoincrement PKs and make the object new.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false, $makeNew = true)
	{
		$copyObj->setNombre($this->getNombre());
		$copyObj->setDescripcion($this->getDescripcion());
		$copyObj->setFechaInicio($this->getFechaInicio());
		$copyObj->setFechaFin($this->getFechaFin());
		$copyObj->setIdPais($this->getIdPais());
		$copyObj->setIdEstado($this->getIdEstado());
		$copyObj->setIdMunicipio($this->getIdMunicipio());
		$copyObj->setIdParroquia($this->getIdParroquia());
		$copyObj->setIdRegion($this->getIdRegion());
		$copyObj->setCosto($this->getCosto());
		$copyObj->setLibroMasVendido($this->getLibroMasVendido());
		$copyObj->setAutorLibroMasVendido($this->getAutorLibroMasVendido());
		$copyObj->setExtensionSuperficie($this->getExtensionSuperficie());

		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getActividads() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActividad($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExpositorFerias() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExpositorFeria($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getExpositorSelloeditorials() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addExpositorSelloeditorial($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFeriaSelloeditorials() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFeriaSelloeditorial($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getPonenteActividads() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addPonenteActividad($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getVisitantes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addVisitante($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)

		if ($makeNew) {
			$copyObj->setNew(true);
			$copyObj->setId(NULL); // this is a auto-increment column, so set to default value
		}
	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Feria Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     FeriaPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new FeriaPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Pais object.
	 *
	 * @param      Pais $v
	 * @return     Feria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setPais(Pais $v = null)
	{
		if ($v === null) {
			$this->setIdPais(NULL);
		} else {
			$this->setIdPais($v->getId());
		}

		$this->aPais = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Pais object, it will not be re-added.
		if ($v !== null) {
			$v->addFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Pais object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Pais The associated Pais object.
	 * @throws     PropelException
	 */
	public function getPais(PropelPDO $con = null)
	{
		if ($this->aPais === null && ($this->id_pais !== null)) {
			$this->aPais = PaisQuery::create()->findPk($this->id_pais, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aPais->addFerias($this);
			 */
		}
		return $this->aPais;
	}

	/**
	 * Declares an association between this object and a Estado object.
	 *
	 * @param      Estado $v
	 * @return     Feria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEstado(Estado $v = null)
	{
		if ($v === null) {
			$this->setIdEstado(NULL);
		} else {
			$this->setIdEstado($v->getId());
		}

		$this->aEstado = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Estado object, it will not be re-added.
		if ($v !== null) {
			$v->addFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Estado object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Estado The associated Estado object.
	 * @throws     PropelException
	 */
	public function getEstado(PropelPDO $con = null)
	{
		if ($this->aEstado === null && ($this->id_estado !== null)) {
			$this->aEstado = EstadoQuery::create()->findPk($this->id_estado, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aEstado->addFerias($this);
			 */
		}
		return $this->aEstado;
	}

	/**
	 * Declares an association between this object and a Municipio object.
	 *
	 * @param      Municipio $v
	 * @return     Feria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setMunicipio(Municipio $v = null)
	{
		if ($v === null) {
			$this->setIdMunicipio(NULL);
		} else {
			$this->setIdMunicipio($v->getId());
		}

		$this->aMunicipio = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Municipio object, it will not be re-added.
		if ($v !== null) {
			$v->addFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Municipio object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Municipio The associated Municipio object.
	 * @throws     PropelException
	 */
	public function getMunicipio(PropelPDO $con = null)
	{
		if ($this->aMunicipio === null && ($this->id_municipio !== null)) {
			$this->aMunicipio = MunicipioQuery::create()->findPk($this->id_municipio, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aMunicipio->addFerias($this);
			 */
		}
		return $this->aMunicipio;
	}

	/**
	 * Declares an association between this object and a Parroquia object.
	 *
	 * @param      Parroquia $v
	 * @return     Feria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setParroquia(Parroquia $v = null)
	{
		if ($v === null) {
			$this->setIdParroquia(NULL);
		} else {
			$this->setIdParroquia($v->getId());
		}

		$this->aParroquia = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Parroquia object, it will not be re-added.
		if ($v !== null) {
			$v->addFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Parroquia object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Parroquia The associated Parroquia object.
	 * @throws     PropelException
	 */
	public function getParroquia(PropelPDO $con = null)
	{
		if ($this->aParroquia === null && ($this->id_parroquia !== null)) {
			$this->aParroquia = ParroquiaQuery::create()->findPk($this->id_parroquia, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aParroquia->addFerias($this);
			 */
		}
		return $this->aParroquia;
	}

	/**
	 * Declares an association between this object and a Region object.
	 *
	 * @param      Region $v
	 * @return     Feria The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setRegion(Region $v = null)
	{
		if ($v === null) {
			$this->setIdRegion(NULL);
		} else {
			$this->setIdRegion($v->getId());
		}

		$this->aRegion = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Region object, it will not be re-added.
		if ($v !== null) {
			$v->addFeria($this);
		}

		return $this;
	}


	/**
	 * Get the associated Region object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Region The associated Region object.
	 * @throws     PropelException
	 */
	public function getRegion(PropelPDO $con = null)
	{
		if ($this->aRegion === null && ($this->id_region !== null)) {
			$this->aRegion = RegionQuery::create()->findPk($this->id_region, $con);
			/* The following can be used additionally to
				guarantee the related object contains a reference
				to this object.  This level of coupling may, however, be
				undesirable since it could result in an only partially populated collection
				in the referenced object.
				$this->aRegion->addFerias($this);
			 */
		}
		return $this->aRegion;
	}


	/**
	 * Initializes a collection based on the name of a relation.
	 * Avoids crafting an 'init[$relationName]s' method name 
	 * that wouldn't work when StandardEnglishPluralizer is used.
	 *
	 * @param      string $relationName The name of the relation to initialize
	 * @return     void
	 */
	public function initRelation($relationName)
	{
		if ('Actividad' == $relationName) {
			return $this->initActividads();
		}
		if ('ExpositorFeria' == $relationName) {
			return $this->initExpositorFerias();
		}
		if ('ExpositorSelloeditorial' == $relationName) {
			return $this->initExpositorSelloeditorials();
		}
		if ('FeriaSelloeditorial' == $relationName) {
			return $this->initFeriaSelloeditorials();
		}
		if ('PonenteActividad' == $relationName) {
			return $this->initPonenteActividads();
		}
		if ('Visitante' == $relationName) {
			return $this->initVisitantes();
		}
	}

	/**
	 * Clears out the collActividads collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActividads()
	 */
	public function clearActividads()
	{
		$this->collActividads = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActividads collection.
	 *
	 * By default this just sets the collActividads collection to an empty array (like clearcollActividads());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initActividads($overrideExisting = true)
	{
		if (null !== $this->collActividads && !$overrideExisting) {
			return;
		}
		$this->collActividads = new PropelObjectCollection();
		$this->collActividads->setModel('Actividad');
	}

	/**
	 * Gets an array of Actividad objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 * @throws     PropelException
	 */
	public function getActividads($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividads) {
				// return empty collection
				$this->initActividads();
			} else {
				$collActividads = ActividadQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collActividads;
				}
				$this->collActividads = $collActividads;
			}
		}
		return $this->collActividads;
	}

	/**
	 * Returns the number of related Actividad objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Actividad objects.
	 * @throws     PropelException
	 */
	public function countActividads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collActividads) {
				return 0;
			} else {
				$query = ActividadQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collActividads);
		}
	}

	/**
	 * Method called to associate a Actividad object to this object
	 * through the Actividad foreign key attribute.
	 *
	 * @param      Actividad $l Actividad
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActividad(Actividad $l)
	{
		if ($this->collActividads === null) {
			$this->initActividads();
		}
		if (!$this->collActividads->contains($l)) { // only add it if the **same** object is not already associated
			$this->collActividads[]= $l;
			$l->setFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related Actividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 */
	public function getActividadsJoinTipoActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadQuery::create(null, $criteria);
		$query->joinWith('TipoActividad', $join_behavior);

		return $this->getActividads($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related Actividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array Actividad[] List of Actividad objects
	 */
	public function getActividadsJoinUsuario($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ActividadQuery::create(null, $criteria);
		$query->joinWith('Usuario', $join_behavior);

		return $this->getActividads($query, $con);
	}

	/**
	 * Clears out the collExpositorFerias collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExpositorFerias()
	 */
	public function clearExpositorFerias()
	{
		$this->collExpositorFerias = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExpositorFerias collection.
	 *
	 * By default this just sets the collExpositorFerias collection to an empty array (like clearcollExpositorFerias());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initExpositorFerias($overrideExisting = true)
	{
		if (null !== $this->collExpositorFerias && !$overrideExisting) {
			return;
		}
		$this->collExpositorFerias = new PropelObjectCollection();
		$this->collExpositorFerias->setModel('ExpositorFeria');
	}

	/**
	 * Gets an array of ExpositorFeria objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 * @throws     PropelException
	 */
	public function getExpositorFerias($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collExpositorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorFerias) {
				// return empty collection
				$this->initExpositorFerias();
			} else {
				$collExpositorFerias = ExpositorFeriaQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collExpositorFerias;
				}
				$this->collExpositorFerias = $collExpositorFerias;
			}
		}
		return $this->collExpositorFerias;
	}

	/**
	 * Returns the number of related ExpositorFeria objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ExpositorFeria objects.
	 * @throws     PropelException
	 */
	public function countExpositorFerias(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collExpositorFerias || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorFerias) {
				return 0;
			} else {
				$query = ExpositorFeriaQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collExpositorFerias);
		}
	}

	/**
	 * Method called to associate a ExpositorFeria object to this object
	 * through the ExpositorFeria foreign key attribute.
	 *
	 * @param      ExpositorFeria $l ExpositorFeria
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExpositorFeria(ExpositorFeria $l)
	{
		if ($this->collExpositorFerias === null) {
			$this->initExpositorFerias();
		}
		if (!$this->collExpositorFerias->contains($l)) { // only add it if the **same** object is not already associated
			$this->collExpositorFerias[]= $l;
			$l->setFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinExpositor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('Expositor', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related ExpositorFerias from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorFeria[] List of ExpositorFeria objects
	 */
	public function getExpositorFeriasJoinPais($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorFeriaQuery::create(null, $criteria);
		$query->joinWith('Pais', $join_behavior);

		return $this->getExpositorFerias($query, $con);
	}

	/**
	 * Clears out the collExpositorSelloeditorials collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addExpositorSelloeditorials()
	 */
	public function clearExpositorSelloeditorials()
	{
		$this->collExpositorSelloeditorials = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collExpositorSelloeditorials collection.
	 *
	 * By default this just sets the collExpositorSelloeditorials collection to an empty array (like clearcollExpositorSelloeditorials());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initExpositorSelloeditorials($overrideExisting = true)
	{
		if (null !== $this->collExpositorSelloeditorials && !$overrideExisting) {
			return;
		}
		$this->collExpositorSelloeditorials = new PropelObjectCollection();
		$this->collExpositorSelloeditorials->setModel('ExpositorSelloeditorial');
	}

	/**
	 * Gets an array of ExpositorSelloeditorial objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array ExpositorSelloeditorial[] List of ExpositorSelloeditorial objects
	 * @throws     PropelException
	 */
	public function getExpositorSelloeditorials($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collExpositorSelloeditorials || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorSelloeditorials) {
				// return empty collection
				$this->initExpositorSelloeditorials();
			} else {
				$collExpositorSelloeditorials = ExpositorSelloeditorialQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collExpositorSelloeditorials;
				}
				$this->collExpositorSelloeditorials = $collExpositorSelloeditorials;
			}
		}
		return $this->collExpositorSelloeditorials;
	}

	/**
	 * Returns the number of related ExpositorSelloeditorial objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ExpositorSelloeditorial objects.
	 * @throws     PropelException
	 */
	public function countExpositorSelloeditorials(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collExpositorSelloeditorials || null !== $criteria) {
			if ($this->isNew() && null === $this->collExpositorSelloeditorials) {
				return 0;
			} else {
				$query = ExpositorSelloeditorialQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collExpositorSelloeditorials);
		}
	}

	/**
	 * Method called to associate a ExpositorSelloeditorial object to this object
	 * through the ExpositorSelloeditorial foreign key attribute.
	 *
	 * @param      ExpositorSelloeditorial $l ExpositorSelloeditorial
	 * @return     void
	 * @throws     PropelException
	 */
	public function addExpositorSelloeditorial(ExpositorSelloeditorial $l)
	{
		if ($this->collExpositorSelloeditorials === null) {
			$this->initExpositorSelloeditorials();
		}
		if (!$this->collExpositorSelloeditorials->contains($l)) { // only add it if the **same** object is not already associated
			$this->collExpositorSelloeditorials[]= $l;
			$l->setFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related ExpositorSelloeditorials from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorSelloeditorial[] List of ExpositorSelloeditorial objects
	 */
	public function getExpositorSelloeditorialsJoinExpositor($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorSelloeditorialQuery::create(null, $criteria);
		$query->joinWith('Expositor', $join_behavior);

		return $this->getExpositorSelloeditorials($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related ExpositorSelloeditorials from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array ExpositorSelloeditorial[] List of ExpositorSelloeditorial objects
	 */
	public function getExpositorSelloeditorialsJoinSelloEditorial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = ExpositorSelloeditorialQuery::create(null, $criteria);
		$query->joinWith('SelloEditorial', $join_behavior);

		return $this->getExpositorSelloeditorials($query, $con);
	}

	/**
	 * Clears out the collFeriaSelloeditorials collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFeriaSelloeditorials()
	 */
	public function clearFeriaSelloeditorials()
	{
		$this->collFeriaSelloeditorials = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFeriaSelloeditorials collection.
	 *
	 * By default this just sets the collFeriaSelloeditorials collection to an empty array (like clearcollFeriaSelloeditorials());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initFeriaSelloeditorials($overrideExisting = true)
	{
		if (null !== $this->collFeriaSelloeditorials && !$overrideExisting) {
			return;
		}
		$this->collFeriaSelloeditorials = new PropelObjectCollection();
		$this->collFeriaSelloeditorials->setModel('FeriaSelloeditorial');
	}

	/**
	 * Gets an array of FeriaSelloeditorial objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array FeriaSelloeditorial[] List of FeriaSelloeditorial objects
	 * @throws     PropelException
	 */
	public function getFeriaSelloeditorials($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collFeriaSelloeditorials || null !== $criteria) {
			if ($this->isNew() && null === $this->collFeriaSelloeditorials) {
				// return empty collection
				$this->initFeriaSelloeditorials();
			} else {
				$collFeriaSelloeditorials = FeriaSelloeditorialQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collFeriaSelloeditorials;
				}
				$this->collFeriaSelloeditorials = $collFeriaSelloeditorials;
			}
		}
		return $this->collFeriaSelloeditorials;
	}

	/**
	 * Returns the number of related FeriaSelloeditorial objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related FeriaSelloeditorial objects.
	 * @throws     PropelException
	 */
	public function countFeriaSelloeditorials(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collFeriaSelloeditorials || null !== $criteria) {
			if ($this->isNew() && null === $this->collFeriaSelloeditorials) {
				return 0;
			} else {
				$query = FeriaSelloeditorialQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collFeriaSelloeditorials);
		}
	}

	/**
	 * Method called to associate a FeriaSelloeditorial object to this object
	 * through the FeriaSelloeditorial foreign key attribute.
	 *
	 * @param      FeriaSelloeditorial $l FeriaSelloeditorial
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFeriaSelloeditorial(FeriaSelloeditorial $l)
	{
		if ($this->collFeriaSelloeditorials === null) {
			$this->initFeriaSelloeditorials();
		}
		if (!$this->collFeriaSelloeditorials->contains($l)) { // only add it if the **same** object is not already associated
			$this->collFeriaSelloeditorials[]= $l;
			$l->setFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related FeriaSelloeditorials from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array FeriaSelloeditorial[] List of FeriaSelloeditorial objects
	 */
	public function getFeriaSelloeditorialsJoinSelloEditorial($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = FeriaSelloeditorialQuery::create(null, $criteria);
		$query->joinWith('SelloEditorial', $join_behavior);

		return $this->getFeriaSelloeditorials($query, $con);
	}

	/**
	 * Clears out the collPonenteActividads collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addPonenteActividads()
	 */
	public function clearPonenteActividads()
	{
		$this->collPonenteActividads = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collPonenteActividads collection.
	 *
	 * By default this just sets the collPonenteActividads collection to an empty array (like clearcollPonenteActividads());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initPonenteActividads($overrideExisting = true)
	{
		if (null !== $this->collPonenteActividads && !$overrideExisting) {
			return;
		}
		$this->collPonenteActividads = new PropelObjectCollection();
		$this->collPonenteActividads->setModel('PonenteActividad');
	}

	/**
	 * Gets an array of PonenteActividad objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array PonenteActividad[] List of PonenteActividad objects
	 * @throws     PropelException
	 */
	public function getPonenteActividads($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collPonenteActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collPonenteActividads) {
				// return empty collection
				$this->initPonenteActividads();
			} else {
				$collPonenteActividads = PonenteActividadQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collPonenteActividads;
				}
				$this->collPonenteActividads = $collPonenteActividads;
			}
		}
		return $this->collPonenteActividads;
	}

	/**
	 * Returns the number of related PonenteActividad objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related PonenteActividad objects.
	 * @throws     PropelException
	 */
	public function countPonenteActividads(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collPonenteActividads || null !== $criteria) {
			if ($this->isNew() && null === $this->collPonenteActividads) {
				return 0;
			} else {
				$query = PonenteActividadQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collPonenteActividads);
		}
	}

	/**
	 * Method called to associate a PonenteActividad object to this object
	 * through the PonenteActividad foreign key attribute.
	 *
	 * @param      PonenteActividad $l PonenteActividad
	 * @return     void
	 * @throws     PropelException
	 */
	public function addPonenteActividad(PonenteActividad $l)
	{
		if ($this->collPonenteActividads === null) {
			$this->initPonenteActividads();
		}
		if (!$this->collPonenteActividads->contains($l)) { // only add it if the **same** object is not already associated
			$this->collPonenteActividads[]= $l;
			$l->setFeria($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related PonenteActividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PonenteActividad[] List of PonenteActividad objects
	 */
	public function getPonenteActividadsJoinPonente($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PonenteActividadQuery::create(null, $criteria);
		$query->joinWith('Ponente', $join_behavior);

		return $this->getPonenteActividads($query, $con);
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Feria is new, it will return
	 * an empty collection; or if this Feria has previously
	 * been saved, it will retrieve related PonenteActividads from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Feria.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @param      string $join_behavior optional join type to use (defaults to Criteria::LEFT_JOIN)
	 * @return     PropelCollection|array PonenteActividad[] List of PonenteActividad objects
	 */
	public function getPonenteActividadsJoinActividad($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		$query = PonenteActividadQuery::create(null, $criteria);
		$query->joinWith('Actividad', $join_behavior);

		return $this->getPonenteActividads($query, $con);
	}

	/**
	 * Clears out the collVisitantes collection
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addVisitantes()
	 */
	public function clearVisitantes()
	{
		$this->collVisitantes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collVisitantes collection.
	 *
	 * By default this just sets the collVisitantes collection to an empty array (like clearcollVisitantes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @param      boolean $overrideExisting If set to true, the method call initializes
	 *                                        the collection even if it is not empty
	 *
	 * @return     void
	 */
	public function initVisitantes($overrideExisting = true)
	{
		if (null !== $this->collVisitantes && !$overrideExisting) {
			return;
		}
		$this->collVisitantes = new PropelObjectCollection();
		$this->collVisitantes->setModel('Visitante');
	}

	/**
	 * Gets an array of Visitante objects which contain a foreign key that references this object.
	 *
	 * If the $criteria is not null, it is used to always fetch the results from the database.
	 * Otherwise the results are fetched from the database the first time, then cached.
	 * Next time the same method is called without $criteria, the cached collection is returned.
	 * If this Feria is new, it will return
	 * an empty collection or the current collection; the criteria is ignored on a new object.
	 *
	 * @param      Criteria $criteria optional Criteria object to narrow the query
	 * @param      PropelPDO $con optional connection object
	 * @return     PropelCollection|array Visitante[] List of Visitante objects
	 * @throws     PropelException
	 */
	public function getVisitantes($criteria = null, PropelPDO $con = null)
	{
		if(null === $this->collVisitantes || null !== $criteria) {
			if ($this->isNew() && null === $this->collVisitantes) {
				// return empty collection
				$this->initVisitantes();
			} else {
				$collVisitantes = VisitanteQuery::create(null, $criteria)
					->filterByFeria($this)
					->find($con);
				if (null !== $criteria) {
					return $collVisitantes;
				}
				$this->collVisitantes = $collVisitantes;
			}
		}
		return $this->collVisitantes;
	}

	/**
	 * Returns the number of related Visitante objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Visitante objects.
	 * @throws     PropelException
	 */
	public function countVisitantes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if(null === $this->collVisitantes || null !== $criteria) {
			if ($this->isNew() && null === $this->collVisitantes) {
				return 0;
			} else {
				$query = VisitanteQuery::create(null, $criteria);
				if($distinct) {
					$query->distinct();
				}
				return $query
					->filterByFeria($this)
					->count($con);
			}
		} else {
			return count($this->collVisitantes);
		}
	}

	/**
	 * Method called to associate a Visitante object to this object
	 * through the Visitante foreign key attribute.
	 *
	 * @param      Visitante $l Visitante
	 * @return     void
	 * @throws     PropelException
	 */
	public function addVisitante(Visitante $l)
	{
		if ($this->collVisitantes === null) {
			$this->initVisitantes();
		}
		if (!$this->collVisitantes->contains($l)) { // only add it if the **same** object is not already associated
			$this->collVisitantes[]= $l;
			$l->setFeria($this);
		}
	}

	/**
	 * Clears the current object and sets all attributes to their default values
	 */
	public function clear()
	{
		$this->id = null;
		$this->nombre = null;
		$this->descripcion = null;
		$this->fecha_inicio = null;
		$this->fecha_fin = null;
		$this->id_pais = null;
		$this->id_estado = null;
		$this->id_municipio = null;
		$this->id_parroquia = null;
		$this->id_region = null;
		$this->costo = null;
		$this->libro_mas_vendido = null;
		$this->autor_libro_mas_vendido = null;
		$this->extension_superficie = null;
		$this->alreadyInSave = false;
		$this->alreadyInValidation = false;
		$this->clearAllReferences();
		$this->resetModified();
		$this->setNew(true);
		$this->setDeleted(false);
	}

	/**
	 * Resets all references to other model objects or collections of model objects.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect
	 * objects with circular references (even in PHP 5.3). This is currently necessary
	 * when using Propel in certain daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all referrer objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collActividads) {
				foreach ($this->collActividads as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExpositorFerias) {
				foreach ($this->collExpositorFerias as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collExpositorSelloeditorials) {
				foreach ($this->collExpositorSelloeditorials as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFeriaSelloeditorials) {
				foreach ($this->collFeriaSelloeditorials as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collPonenteActividads) {
				foreach ($this->collPonenteActividads as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collVisitantes) {
				foreach ($this->collVisitantes as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		if ($this->collActividads instanceof PropelCollection) {
			$this->collActividads->clearIterator();
		}
		$this->collActividads = null;
		if ($this->collExpositorFerias instanceof PropelCollection) {
			$this->collExpositorFerias->clearIterator();
		}
		$this->collExpositorFerias = null;
		if ($this->collExpositorSelloeditorials instanceof PropelCollection) {
			$this->collExpositorSelloeditorials->clearIterator();
		}
		$this->collExpositorSelloeditorials = null;
		if ($this->collFeriaSelloeditorials instanceof PropelCollection) {
			$this->collFeriaSelloeditorials->clearIterator();
		}
		$this->collFeriaSelloeditorials = null;
		if ($this->collPonenteActividads instanceof PropelCollection) {
			$this->collPonenteActividads->clearIterator();
		}
		$this->collPonenteActividads = null;
		if ($this->collVisitantes instanceof PropelCollection) {
			$this->collVisitantes->clearIterator();
		}
		$this->collVisitantes = null;
		$this->aPais = null;
		$this->aEstado = null;
		$this->aMunicipio = null;
		$this->aParroquia = null;
		$this->aRegion = null;
	}

	/**
	 * Return the string representation of this object
	 *
	 * @return string
	 */
	public function __toString()
	{
		return (string) $this->exportTo(FeriaPeer::DEFAULT_STRING_FORMAT);
	}

	/**
	 * Catches calls to virtual methods
	 */
	public function __call($name, $params)
	{
		// symfony_behaviors behavior
		if ($callable = sfMixer::getCallable('BaseFeria:' . $name))
		{
		  array_unshift($params, $this);
		  return call_user_func_array($callable, $params);
		}

		if (preg_match('/get(\w+)/', $name, $matches)) {
			$virtualColumn = $matches[1];
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
			// no lcfirst in php<5.3...
			$virtualColumn[0] = strtolower($virtualColumn[0]);
			if ($this->hasVirtualColumn($virtualColumn)) {
				return $this->getVirtualColumn($virtualColumn);
			}
		}
		return parent::__call($name, $params);
	}

} // BaseFeria
