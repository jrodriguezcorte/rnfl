<?php


/**
 * Base class that represents a query for the 'actividad_finalizada' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Tue Feb 17 18:35:35 2015
 *
 * @method     ActividadFinalizadaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ActividadFinalizadaQuery orderByIdActividad($order = Criteria::ASC) Order by the id_actividad column
 * @method     ActividadFinalizadaQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     ActividadFinalizadaQuery orderByNombreResponsable($order = Criteria::ASC) Order by the nombre_responsable column
 * @method     ActividadFinalizadaQuery orderByFechaEjecucion($order = Criteria::ASC) Order by the fecha_ejecucion column
 * @method     ActividadFinalizadaQuery orderByHoraEjecucion($order = Criteria::ASC) Order by the hora_ejecucion column
 * @method     ActividadFinalizadaQuery orderByHoraFinEjecucion($order = Criteria::ASC) Order by the hora_fin_ejecucion column
 * @method     ActividadFinalizadaQuery orderByParticipantesM($order = Criteria::ASC) Order by the participantes_m column
 * @method     ActividadFinalizadaQuery orderByParticipantesF($order = Criteria::ASC) Order by the participantes_f column
 * @method     ActividadFinalizadaQuery orderByTotal($order = Criteria::ASC) Order by the total column
 * @method     ActividadFinalizadaQuery orderByEventoPublico($order = Criteria::ASC) Order by the evento_publico column
 * @method     ActividadFinalizadaQuery orderByOtroIncumplimiento($order = Criteria::ASC) Order by the otro_incumplimiento column
 * @method     ActividadFinalizadaQuery orderByNombreInstitucion($order = Criteria::ASC) Order by the nombre_institucion column
 * @method     ActividadFinalizadaQuery orderByIdPais($order = Criteria::ASC) Order by the id_pais column
 * @method     ActividadFinalizadaQuery orderByIdEstado($order = Criteria::ASC) Order by the id_estado column
 * @method     ActividadFinalizadaQuery orderByIdMunicipio($order = Criteria::ASC) Order by the id_municipio column
 * @method     ActividadFinalizadaQuery orderByIdParroquia($order = Criteria::ASC) Order by the id_parroquia column
 * @method     ActividadFinalizadaQuery orderByIdRegion($order = Criteria::ASC) Order by the id_region column
 * @method     ActividadFinalizadaQuery orderByIncluirInfoGeografica($order = Criteria::ASC) Order by the incluir_info_geografica column
 * @method     ActividadFinalizadaQuery orderByIdUsuario($order = Criteria::ASC) Order by the id_usuario column
 *
 * @method     ActividadFinalizadaQuery groupById() Group by the id column
 * @method     ActividadFinalizadaQuery groupByIdActividad() Group by the id_actividad column
 * @method     ActividadFinalizadaQuery groupByIdFeria() Group by the id_feria column
 * @method     ActividadFinalizadaQuery groupByNombreResponsable() Group by the nombre_responsable column
 * @method     ActividadFinalizadaQuery groupByFechaEjecucion() Group by the fecha_ejecucion column
 * @method     ActividadFinalizadaQuery groupByHoraEjecucion() Group by the hora_ejecucion column
 * @method     ActividadFinalizadaQuery groupByHoraFinEjecucion() Group by the hora_fin_ejecucion column
 * @method     ActividadFinalizadaQuery groupByParticipantesM() Group by the participantes_m column
 * @method     ActividadFinalizadaQuery groupByParticipantesF() Group by the participantes_f column
 * @method     ActividadFinalizadaQuery groupByTotal() Group by the total column
 * @method     ActividadFinalizadaQuery groupByEventoPublico() Group by the evento_publico column
 * @method     ActividadFinalizadaQuery groupByOtroIncumplimiento() Group by the otro_incumplimiento column
 * @method     ActividadFinalizadaQuery groupByNombreInstitucion() Group by the nombre_institucion column
 * @method     ActividadFinalizadaQuery groupByIdPais() Group by the id_pais column
 * @method     ActividadFinalizadaQuery groupByIdEstado() Group by the id_estado column
 * @method     ActividadFinalizadaQuery groupByIdMunicipio() Group by the id_municipio column
 * @method     ActividadFinalizadaQuery groupByIdParroquia() Group by the id_parroquia column
 * @method     ActividadFinalizadaQuery groupByIdRegion() Group by the id_region column
 * @method     ActividadFinalizadaQuery groupByIncluirInfoGeografica() Group by the incluir_info_geografica column
 * @method     ActividadFinalizadaQuery groupByIdUsuario() Group by the id_usuario column
 *
 * @method     ActividadFinalizadaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ActividadFinalizadaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ActividadFinalizadaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ActividadFinalizadaQuery leftJoinActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Actividad relation
 * @method     ActividadFinalizadaQuery rightJoinActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Actividad relation
 * @method     ActividadFinalizadaQuery innerJoinActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the Actividad relation
 *
 * @method     ActividadFinalizadaQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     ActividadFinalizadaQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     ActividadFinalizadaQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     ActividadFinalizadaQuery leftJoinPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the Pais relation
 * @method     ActividadFinalizadaQuery rightJoinPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Pais relation
 * @method     ActividadFinalizadaQuery innerJoinPais($relationAlias = null) Adds a INNER JOIN clause to the query using the Pais relation
 *
 * @method     ActividadFinalizadaQuery leftJoinEstado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Estado relation
 * @method     ActividadFinalizadaQuery rightJoinEstado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Estado relation
 * @method     ActividadFinalizadaQuery innerJoinEstado($relationAlias = null) Adds a INNER JOIN clause to the query using the Estado relation
 *
 * @method     ActividadFinalizadaQuery leftJoinMunicipio($relationAlias = null) Adds a LEFT JOIN clause to the query using the Municipio relation
 * @method     ActividadFinalizadaQuery rightJoinMunicipio($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Municipio relation
 * @method     ActividadFinalizadaQuery innerJoinMunicipio($relationAlias = null) Adds a INNER JOIN clause to the query using the Municipio relation
 *
 * @method     ActividadFinalizadaQuery leftJoinParroquia($relationAlias = null) Adds a LEFT JOIN clause to the query using the Parroquia relation
 * @method     ActividadFinalizadaQuery rightJoinParroquia($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Parroquia relation
 * @method     ActividadFinalizadaQuery innerJoinParroquia($relationAlias = null) Adds a INNER JOIN clause to the query using the Parroquia relation
 *
 * @method     ActividadFinalizadaQuery leftJoinRegion($relationAlias = null) Adds a LEFT JOIN clause to the query using the Region relation
 * @method     ActividadFinalizadaQuery rightJoinRegion($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Region relation
 * @method     ActividadFinalizadaQuery innerJoinRegion($relationAlias = null) Adds a INNER JOIN clause to the query using the Region relation
 *
 * @method     ActividadFinalizadaQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method     ActividadFinalizadaQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method     ActividadFinalizadaQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method     ActividadFinalizadaQuery leftJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     ActividadFinalizadaQuery rightJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     ActividadFinalizadaQuery innerJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 *
 * @method     ActividadFinalizada findOne(PropelPDO $con = null) Return the first ActividadFinalizada matching the query
 * @method     ActividadFinalizada findOneOrCreate(PropelPDO $con = null) Return the first ActividadFinalizada matching the query, or a new ActividadFinalizada object populated from the query conditions when no match is found
 *
 * @method     ActividadFinalizada findOneById(string $id) Return the first ActividadFinalizada filtered by the id column
 * @method     ActividadFinalizada findOneByIdActividad(int $id_actividad) Return the first ActividadFinalizada filtered by the id_actividad column
 * @method     ActividadFinalizada findOneByIdFeria(int $id_feria) Return the first ActividadFinalizada filtered by the id_feria column
 * @method     ActividadFinalizada findOneByNombreResponsable(string $nombre_responsable) Return the first ActividadFinalizada filtered by the nombre_responsable column
 * @method     ActividadFinalizada findOneByFechaEjecucion(string $fecha_ejecucion) Return the first ActividadFinalizada filtered by the fecha_ejecucion column
 * @method     ActividadFinalizada findOneByHoraEjecucion(string $hora_ejecucion) Return the first ActividadFinalizada filtered by the hora_ejecucion column
 * @method     ActividadFinalizada findOneByHoraFinEjecucion(string $hora_fin_ejecucion) Return the first ActividadFinalizada filtered by the hora_fin_ejecucion column
 * @method     ActividadFinalizada findOneByParticipantesM(int $participantes_m) Return the first ActividadFinalizada filtered by the participantes_m column
 * @method     ActividadFinalizada findOneByParticipantesF(int $participantes_f) Return the first ActividadFinalizada filtered by the participantes_f column
 * @method     ActividadFinalizada findOneByTotal(int $total) Return the first ActividadFinalizada filtered by the total column
 * @method     ActividadFinalizada findOneByEventoPublico(boolean $evento_publico) Return the first ActividadFinalizada filtered by the evento_publico column
 * @method     ActividadFinalizada findOneByOtroIncumplimiento(string $otro_incumplimiento) Return the first ActividadFinalizada filtered by the otro_incumplimiento column
 * @method     ActividadFinalizada findOneByNombreInstitucion(string $nombre_institucion) Return the first ActividadFinalizada filtered by the nombre_institucion column
 * @method     ActividadFinalizada findOneByIdPais(int $id_pais) Return the first ActividadFinalizada filtered by the id_pais column
 * @method     ActividadFinalizada findOneByIdEstado(int $id_estado) Return the first ActividadFinalizada filtered by the id_estado column
 * @method     ActividadFinalizada findOneByIdMunicipio(int $id_municipio) Return the first ActividadFinalizada filtered by the id_municipio column
 * @method     ActividadFinalizada findOneByIdParroquia(int $id_parroquia) Return the first ActividadFinalizada filtered by the id_parroquia column
 * @method     ActividadFinalizada findOneByIdRegion(int $id_region) Return the first ActividadFinalizada filtered by the id_region column
 * @method     ActividadFinalizada findOneByIncluirInfoGeografica(boolean $incluir_info_geografica) Return the first ActividadFinalizada filtered by the incluir_info_geografica column
 * @method     ActividadFinalizada findOneByIdUsuario(int $id_usuario) Return the first ActividadFinalizada filtered by the id_usuario column
 *
 * @method     array findById(string $id) Return ActividadFinalizada objects filtered by the id column
 * @method     array findByIdActividad(int $id_actividad) Return ActividadFinalizada objects filtered by the id_actividad column
 * @method     array findByIdFeria(int $id_feria) Return ActividadFinalizada objects filtered by the id_feria column
 * @method     array findByNombreResponsable(string $nombre_responsable) Return ActividadFinalizada objects filtered by the nombre_responsable column
 * @method     array findByFechaEjecucion(string $fecha_ejecucion) Return ActividadFinalizada objects filtered by the fecha_ejecucion column
 * @method     array findByHoraEjecucion(string $hora_ejecucion) Return ActividadFinalizada objects filtered by the hora_ejecucion column
 * @method     array findByHoraFinEjecucion(string $hora_fin_ejecucion) Return ActividadFinalizada objects filtered by the hora_fin_ejecucion column
 * @method     array findByParticipantesM(int $participantes_m) Return ActividadFinalizada objects filtered by the participantes_m column
 * @method     array findByParticipantesF(int $participantes_f) Return ActividadFinalizada objects filtered by the participantes_f column
 * @method     array findByTotal(int $total) Return ActividadFinalizada objects filtered by the total column
 * @method     array findByEventoPublico(boolean $evento_publico) Return ActividadFinalizada objects filtered by the evento_publico column
 * @method     array findByOtroIncumplimiento(string $otro_incumplimiento) Return ActividadFinalizada objects filtered by the otro_incumplimiento column
 * @method     array findByNombreInstitucion(string $nombre_institucion) Return ActividadFinalizada objects filtered by the nombre_institucion column
 * @method     array findByIdPais(int $id_pais) Return ActividadFinalizada objects filtered by the id_pais column
 * @method     array findByIdEstado(int $id_estado) Return ActividadFinalizada objects filtered by the id_estado column
 * @method     array findByIdMunicipio(int $id_municipio) Return ActividadFinalizada objects filtered by the id_municipio column
 * @method     array findByIdParroquia(int $id_parroquia) Return ActividadFinalizada objects filtered by the id_parroquia column
 * @method     array findByIdRegion(int $id_region) Return ActividadFinalizada objects filtered by the id_region column
 * @method     array findByIncluirInfoGeografica(boolean $incluir_info_geografica) Return ActividadFinalizada objects filtered by the incluir_info_geografica column
 * @method     array findByIdUsuario(int $id_usuario) Return ActividadFinalizada objects filtered by the id_usuario column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividadFinalizadaQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseActividadFinalizadaQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'ActividadFinalizada', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ActividadFinalizadaQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ActividadFinalizadaQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ActividadFinalizadaQuery) {
			return $criteria;
		}
		$query = new ActividadFinalizadaQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    ActividadFinalizada|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ActividadFinalizadaPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the id_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdActividad(1234); // WHERE id_actividad = 1234
	 * $query->filterByIdActividad(array(12, 34)); // WHERE id_actividad IN (12, 34)
	 * $query->filterByIdActividad(array('min' => 12)); // WHERE id_actividad > 12
	 * </code>
	 *
	 * @see       filterByActividad()
	 *
	 * @param     mixed $idActividad The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdActividad($idActividad = null, $comparison = null)
	{
		if (is_array($idActividad)) {
			$useMinMax = false;
			if (isset($idActividad['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idActividad['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the nombre_responsable column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreResponsable('fooValue');   // WHERE nombre_responsable = 'fooValue'
	 * $query->filterByNombreResponsable('%fooValue%'); // WHERE nombre_responsable LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreResponsable The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByNombreResponsable($nombreResponsable = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreResponsable)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreResponsable)) {
				$nombreResponsable = str_replace('*', '%', $nombreResponsable);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::NOMBRE_RESPONSABLE, $nombreResponsable, $comparison);
	}

	/**
	 * Filter the query on the fecha_ejecucion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFechaEjecucion('2011-03-14'); // WHERE fecha_ejecucion = '2011-03-14'
	 * $query->filterByFechaEjecucion('now'); // WHERE fecha_ejecucion = '2011-03-14'
	 * $query->filterByFechaEjecucion(array('max' => 'yesterday')); // WHERE fecha_ejecucion > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fechaEjecucion The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByFechaEjecucion($fechaEjecucion = null, $comparison = null)
	{
		if (is_array($fechaEjecucion)) {
			$useMinMax = false;
			if (isset($fechaEjecucion['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::FECHA_EJECUCION, $fechaEjecucion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fechaEjecucion['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::FECHA_EJECUCION, $fechaEjecucion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::FECHA_EJECUCION, $fechaEjecucion, $comparison);
	}

	/**
	 * Filter the query on the hora_ejecucion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHoraEjecucion('2011-03-14'); // WHERE hora_ejecucion = '2011-03-14'
	 * $query->filterByHoraEjecucion('now'); // WHERE hora_ejecucion = '2011-03-14'
	 * $query->filterByHoraEjecucion(array('max' => 'yesterday')); // WHERE hora_ejecucion > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $horaEjecucion The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByHoraEjecucion($horaEjecucion = null, $comparison = null)
	{
		if (is_array($horaEjecucion)) {
			$useMinMax = false;
			if (isset($horaEjecucion['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::HORA_EJECUCION, $horaEjecucion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($horaEjecucion['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::HORA_EJECUCION, $horaEjecucion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::HORA_EJECUCION, $horaEjecucion, $comparison);
	}

	/**
	 * Filter the query on the hora_fin_ejecucion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHoraFinEjecucion('2011-03-14'); // WHERE hora_fin_ejecucion = '2011-03-14'
	 * $query->filterByHoraFinEjecucion('now'); // WHERE hora_fin_ejecucion = '2011-03-14'
	 * $query->filterByHoraFinEjecucion(array('max' => 'yesterday')); // WHERE hora_fin_ejecucion > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $horaFinEjecucion The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByHoraFinEjecucion($horaFinEjecucion = null, $comparison = null)
	{
		if (is_array($horaFinEjecucion)) {
			$useMinMax = false;
			if (isset($horaFinEjecucion['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::HORA_FIN_EJECUCION, $horaFinEjecucion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($horaFinEjecucion['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::HORA_FIN_EJECUCION, $horaFinEjecucion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::HORA_FIN_EJECUCION, $horaFinEjecucion, $comparison);
	}

	/**
	 * Filter the query on the participantes_m column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByParticipantesM(1234); // WHERE participantes_m = 1234
	 * $query->filterByParticipantesM(array(12, 34)); // WHERE participantes_m IN (12, 34)
	 * $query->filterByParticipantesM(array('min' => 12)); // WHERE participantes_m > 12
	 * </code>
	 *
	 * @param     mixed $participantesM The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByParticipantesM($participantesM = null, $comparison = null)
	{
		if (is_array($participantesM)) {
			$useMinMax = false;
			if (isset($participantesM['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_M, $participantesM['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($participantesM['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_M, $participantesM['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_M, $participantesM, $comparison);
	}

	/**
	 * Filter the query on the participantes_f column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByParticipantesF(1234); // WHERE participantes_f = 1234
	 * $query->filterByParticipantesF(array(12, 34)); // WHERE participantes_f IN (12, 34)
	 * $query->filterByParticipantesF(array('min' => 12)); // WHERE participantes_f > 12
	 * </code>
	 *
	 * @param     mixed $participantesF The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByParticipantesF($participantesF = null, $comparison = null)
	{
		if (is_array($participantesF)) {
			$useMinMax = false;
			if (isset($participantesF['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_F, $participantesF['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($participantesF['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_F, $participantesF['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::PARTICIPANTES_F, $participantesF, $comparison);
	}

	/**
	 * Filter the query on the total column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTotal(1234); // WHERE total = 1234
	 * $query->filterByTotal(array(12, 34)); // WHERE total IN (12, 34)
	 * $query->filterByTotal(array('min' => 12)); // WHERE total > 12
	 * </code>
	 *
	 * @param     mixed $total The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByTotal($total = null, $comparison = null)
	{
		if (is_array($total)) {
			$useMinMax = false;
			if (isset($total['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::TOTAL, $total['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($total['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::TOTAL, $total['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::TOTAL, $total, $comparison);
	}

	/**
	 * Filter the query on the evento_publico column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEventoPublico(true); // WHERE evento_publico = true
	 * $query->filterByEventoPublico('yes'); // WHERE evento_publico = true
	 * </code>
	 *
	 * @param     boolean|string $eventoPublico The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByEventoPublico($eventoPublico = null, $comparison = null)
	{
		if (is_string($eventoPublico)) {
			$evento_publico = in_array(strtolower($eventoPublico), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::EVENTO_PUBLICO, $eventoPublico, $comparison);
	}

	/**
	 * Filter the query on the otro_incumplimiento column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByOtroIncumplimiento('fooValue');   // WHERE otro_incumplimiento = 'fooValue'
	 * $query->filterByOtroIncumplimiento('%fooValue%'); // WHERE otro_incumplimiento LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $otroIncumplimiento The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByOtroIncumplimiento($otroIncumplimiento = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($otroIncumplimiento)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $otroIncumplimiento)) {
				$otroIncumplimiento = str_replace('*', '%', $otroIncumplimiento);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::OTRO_INCUMPLIMIENTO, $otroIncumplimiento, $comparison);
	}

	/**
	 * Filter the query on the nombre_institucion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreInstitucion('fooValue');   // WHERE nombre_institucion = 'fooValue'
	 * $query->filterByNombreInstitucion('%fooValue%'); // WHERE nombre_institucion LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreInstitucion The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByNombreInstitucion($nombreInstitucion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreInstitucion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreInstitucion)) {
				$nombreInstitucion = str_replace('*', '%', $nombreInstitucion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::NOMBRE_INSTITUCION, $nombreInstitucion, $comparison);
	}

	/**
	 * Filter the query on the id_pais column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdPais(1234); // WHERE id_pais = 1234
	 * $query->filterByIdPais(array(12, 34)); // WHERE id_pais IN (12, 34)
	 * $query->filterByIdPais(array('min' => 12)); // WHERE id_pais > 12
	 * </code>
	 *
	 * @see       filterByPais()
	 *
	 * @param     mixed $idPais The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdPais($idPais = null, $comparison = null)
	{
		if (is_array($idPais)) {
			$useMinMax = false;
			if (isset($idPais['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_PAIS, $idPais['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idPais['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_PAIS, $idPais['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_PAIS, $idPais, $comparison);
	}

	/**
	 * Filter the query on the id_estado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdEstado(1234); // WHERE id_estado = 1234
	 * $query->filterByIdEstado(array(12, 34)); // WHERE id_estado IN (12, 34)
	 * $query->filterByIdEstado(array('min' => 12)); // WHERE id_estado > 12
	 * </code>
	 *
	 * @see       filterByEstado()
	 *
	 * @param     mixed $idEstado The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdEstado($idEstado = null, $comparison = null)
	{
		if (is_array($idEstado)) {
			$useMinMax = false;
			if (isset($idEstado['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_ESTADO, $idEstado['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idEstado['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_ESTADO, $idEstado['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_ESTADO, $idEstado, $comparison);
	}

	/**
	 * Filter the query on the id_municipio column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdMunicipio(1234); // WHERE id_municipio = 1234
	 * $query->filterByIdMunicipio(array(12, 34)); // WHERE id_municipio IN (12, 34)
	 * $query->filterByIdMunicipio(array('min' => 12)); // WHERE id_municipio > 12
	 * </code>
	 *
	 * @see       filterByMunicipio()
	 *
	 * @param     mixed $idMunicipio The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdMunicipio($idMunicipio = null, $comparison = null)
	{
		if (is_array($idMunicipio)) {
			$useMinMax = false;
			if (isset($idMunicipio['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_MUNICIPIO, $idMunicipio['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idMunicipio['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_MUNICIPIO, $idMunicipio['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_MUNICIPIO, $idMunicipio, $comparison);
	}

	/**
	 * Filter the query on the id_parroquia column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdParroquia(1234); // WHERE id_parroquia = 1234
	 * $query->filterByIdParroquia(array(12, 34)); // WHERE id_parroquia IN (12, 34)
	 * $query->filterByIdParroquia(array('min' => 12)); // WHERE id_parroquia > 12
	 * </code>
	 *
	 * @see       filterByParroquia()
	 *
	 * @param     mixed $idParroquia The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdParroquia($idParroquia = null, $comparison = null)
	{
		if (is_array($idParroquia)) {
			$useMinMax = false;
			if (isset($idParroquia['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_PARROQUIA, $idParroquia['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idParroquia['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_PARROQUIA, $idParroquia['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_PARROQUIA, $idParroquia, $comparison);
	}

	/**
	 * Filter the query on the id_region column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdRegion(1234); // WHERE id_region = 1234
	 * $query->filterByIdRegion(array(12, 34)); // WHERE id_region IN (12, 34)
	 * $query->filterByIdRegion(array('min' => 12)); // WHERE id_region > 12
	 * </code>
	 *
	 * @see       filterByRegion()
	 *
	 * @param     mixed $idRegion The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdRegion($idRegion = null, $comparison = null)
	{
		if (is_array($idRegion)) {
			$useMinMax = false;
			if (isset($idRegion['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_REGION, $idRegion['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idRegion['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_REGION, $idRegion['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_REGION, $idRegion, $comparison);
	}

	/**
	 * Filter the query on the incluir_info_geografica column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIncluirInfoGeografica(true); // WHERE incluir_info_geografica = true
	 * $query->filterByIncluirInfoGeografica('yes'); // WHERE incluir_info_geografica = true
	 * </code>
	 *
	 * @param     boolean|string $incluirInfoGeografica The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIncluirInfoGeografica($incluirInfoGeografica = null, $comparison = null)
	{
		if (is_string($incluirInfoGeografica)) {
			$incluir_info_geografica = in_array(strtolower($incluirInfoGeografica), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::INCLUIR_INFO_GEOGRAFICA, $incluirInfoGeografica, $comparison);
	}

	/**
	 * Filter the query on the id_usuario column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdUsuario(1234); // WHERE id_usuario = 1234
	 * $query->filterByIdUsuario(array(12, 34)); // WHERE id_usuario IN (12, 34)
	 * $query->filterByIdUsuario(array('min' => 12)); // WHERE id_usuario > 12
	 * </code>
	 *
	 * @see       filterByUsuario()
	 *
	 * @param     mixed $idUsuario The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdUsuario($idUsuario = null, $comparison = null)
	{
		if (is_array($idUsuario)) {
			$useMinMax = false;
			if (isset($idUsuario['min'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_USUARIO, $idUsuario['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idUsuario['max'])) {
				$this->addUsingAlias(ActividadFinalizadaPeer::ID_USUARIO, $idUsuario['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadFinalizadaPeer::ID_USUARIO, $idUsuario, $comparison);
	}

	/**
	 * Filter the query by a related Actividad object
	 *
	 * @param     Actividad|PropelCollection $actividad The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByActividad($actividad, $comparison = null)
	{
		if ($actividad instanceof Actividad) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_ACTIVIDAD, $actividad->getId(), $comparison);
		} elseif ($actividad instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_ACTIVIDAD, $actividad->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByActividad() only accepts arguments of type Actividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Actividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Actividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Actividad');
		}
		
		return $this;
	}

	/**
	 * Use the Actividad relation Actividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery A secondary query class using the current class as primary query
	 */
	public function useActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Actividad', 'ActividadQuery');
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Pais object
	 *
	 * @param     Pais|PropelCollection $pais The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByPais($pais, $comparison = null)
	{
		if ($pais instanceof Pais) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_PAIS, $pais->getId(), $comparison);
		} elseif ($pais instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_PAIS, $pais->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByPais() only accepts arguments of type Pais or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Pais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Pais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Pais');
		}
		
		return $this;
	}

	/**
	 * Use the Pais relation Pais object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery A secondary query class using the current class as primary query
	 */
	public function usePaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Pais', 'PaisQuery');
	}

	/**
	 * Filter the query by a related Estado object
	 *
	 * @param     Estado|PropelCollection $estado The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByEstado($estado, $comparison = null)
	{
		if ($estado instanceof Estado) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_ESTADO, $estado->getId(), $comparison);
		} elseif ($estado instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_ESTADO, $estado->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByEstado() only accepts arguments of type Estado or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Estado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinEstado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Estado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Estado');
		}
		
		return $this;
	}

	/**
	 * Use the Estado relation Estado object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EstadoQuery A secondary query class using the current class as primary query
	 */
	public function useEstadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinEstado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Estado', 'EstadoQuery');
	}

	/**
	 * Filter the query by a related Municipio object
	 *
	 * @param     Municipio|PropelCollection $municipio The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByMunicipio($municipio, $comparison = null)
	{
		if ($municipio instanceof Municipio) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_MUNICIPIO, $municipio->getId(), $comparison);
		} elseif ($municipio instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_MUNICIPIO, $municipio->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByMunicipio() only accepts arguments of type Municipio or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Municipio relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinMunicipio($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Municipio');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Municipio');
		}
		
		return $this;
	}

	/**
	 * Use the Municipio relation Municipio object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    MunicipioQuery A secondary query class using the current class as primary query
	 */
	public function useMunicipioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinMunicipio($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Municipio', 'MunicipioQuery');
	}

	/**
	 * Filter the query by a related Parroquia object
	 *
	 * @param     Parroquia|PropelCollection $parroquia The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByParroquia($parroquia, $comparison = null)
	{
		if ($parroquia instanceof Parroquia) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_PARROQUIA, $parroquia->getId(), $comparison);
		} elseif ($parroquia instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_PARROQUIA, $parroquia->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByParroquia() only accepts arguments of type Parroquia or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Parroquia relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinParroquia($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Parroquia');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Parroquia');
		}
		
		return $this;
	}

	/**
	 * Use the Parroquia relation Parroquia object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ParroquiaQuery A secondary query class using the current class as primary query
	 */
	public function useParroquiaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinParroquia($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Parroquia', 'ParroquiaQuery');
	}

	/**
	 * Filter the query by a related Region object
	 *
	 * @param     Region|PropelCollection $region The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByRegion($region, $comparison = null)
	{
		if ($region instanceof Region) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_REGION, $region->getId(), $comparison);
		} elseif ($region instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_REGION, $region->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByRegion() only accepts arguments of type Region or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Region relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinRegion($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Region');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Region');
		}
		
		return $this;
	}

	/**
	 * Use the Region relation Region object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    RegionQuery A secondary query class using the current class as primary query
	 */
	public function useRegionQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinRegion($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Region', 'RegionQuery');
	}

	/**
	 * Filter the query by a related Usuario object
	 *
	 * @param     Usuario|PropelCollection $usuario The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByUsuario($usuario, $comparison = null)
	{
		if ($usuario instanceof Usuario) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_USUARIO, $usuario->getId(), $comparison);
		} elseif ($usuario instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID_USUARIO, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Usuario relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Usuario');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Usuario');
		}
		
		return $this;
	}

	/**
	 * Use the Usuario relation Usuario object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery A secondary query class using the current class as primary query
	 */
	public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinUsuario($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
	}

	/**
	 * Filter the query by a related IncumplmientoActividadFinalizada object
	 *
	 * @param     IncumplmientoActividadFinalizada $incumplmientoActividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIncumplmientoActividadFinalizada($incumplmientoActividadFinalizada, $comparison = null)
	{
		if ($incumplmientoActividadFinalizada instanceof IncumplmientoActividadFinalizada) {
			return $this
				->addUsingAlias(ActividadFinalizadaPeer::ID, $incumplmientoActividadFinalizada->getIdActividadFinalizada(), $comparison);
		} elseif ($incumplmientoActividadFinalizada instanceof PropelCollection) {
			return $this
				->useIncumplmientoActividadFinalizadaQuery()
					->filterByPrimaryKeys($incumplmientoActividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByIncumplmientoActividadFinalizada() only accepts arguments of type IncumplmientoActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the IncumplmientoActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinIncumplmientoActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('IncumplmientoActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'IncumplmientoActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the IncumplmientoActividadFinalizada relation IncumplmientoActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useIncumplmientoActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinIncumplmientoActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'IncumplmientoActividadFinalizada', 'IncumplmientoActividadFinalizadaQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     ActividadFinalizada $actividadFinalizada Object to remove from the list of results
	 *
	 * @return    ActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function prune($actividadFinalizada = null)
	{
		if ($actividadFinalizada) {
			$this->addUsingAlias(ActividadFinalizadaPeer::ID, $actividadFinalizada->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseActividadFinalizadaQuery
