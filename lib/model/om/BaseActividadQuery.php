<?php


/**
 * Base class that represents a query for the 'actividad' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Tue Feb 17 18:35:35 2015
 *
 * @method     ActividadQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ActividadQuery orderByFechaSugerida($order = Criteria::ASC) Order by the fecha_sugerida column
 * @method     ActividadQuery orderByHora($order = Criteria::ASC) Order by the hora column
 * @method     ActividadQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     ActividadQuery orderByIdUsuario($order = Criteria::ASC) Order by the id_usuario column
 * @method     ActividadQuery orderByStandNumero($order = Criteria::ASC) Order by the stand_numero column
 * @method     ActividadQuery orderByNombreEmpresa($order = Criteria::ASC) Order by the nombre_empresa column
 * @method     ActividadQuery orderByDireccion($order = Criteria::ASC) Order by the direccion column
 * @method     ActividadQuery orderByNombreSolicitante($order = Criteria::ASC) Order by the nombre_solicitante column
 * @method     ActividadQuery orderByNombreRepresentante($order = Criteria::ASC) Order by the nombre_representante column
 * @method     ActividadQuery orderByTelefonoLocal($order = Criteria::ASC) Order by the telefono_local column
 * @method     ActividadQuery orderByTelefonoCelular($order = Criteria::ASC) Order by the telefono_celular column
 * @method     ActividadQuery orderByFax($order = Criteria::ASC) Order by the fax column
 * @method     ActividadQuery orderByEmail($order = Criteria::ASC) Order by the email column
 * @method     ActividadQuery orderByIdTipoActividad($order = Criteria::ASC) Order by the id_tipo_actividad column
 * @method     ActividadQuery orderByTitulo($order = Criteria::ASC) Order by the titulo column
 * @method     ActividadQuery orderByAutor($order = Criteria::ASC) Order by the autor column
 * @method     ActividadQuery orderByEditorial($order = Criteria::ASC) Order by the editorial column
 * @method     ActividadQuery orderByDescripcionActividad($order = Criteria::ASC) Order by the descripcion_actividad column
 * @method     ActividadQuery orderByPresenteAutor($order = Criteria::ASC) Order by the presente_autor column
 * @method     ActividadQuery orderByPublicoDirigido($order = Criteria::ASC) Order by the publico_dirigido column
 * @method     ActividadQuery orderByNumeroPonentes($order = Criteria::ASC) Order by the numero_ponentes column
 * @method     ActividadQuery orderByActividadCerrada($order = Criteria::ASC) Order by the actividad_cerrada column
 *
 * @method     ActividadQuery groupById() Group by the id column
 * @method     ActividadQuery groupByFechaSugerida() Group by the fecha_sugerida column
 * @method     ActividadQuery groupByHora() Group by the hora column
 * @method     ActividadQuery groupByIdFeria() Group by the id_feria column
 * @method     ActividadQuery groupByIdUsuario() Group by the id_usuario column
 * @method     ActividadQuery groupByStandNumero() Group by the stand_numero column
 * @method     ActividadQuery groupByNombreEmpresa() Group by the nombre_empresa column
 * @method     ActividadQuery groupByDireccion() Group by the direccion column
 * @method     ActividadQuery groupByNombreSolicitante() Group by the nombre_solicitante column
 * @method     ActividadQuery groupByNombreRepresentante() Group by the nombre_representante column
 * @method     ActividadQuery groupByTelefonoLocal() Group by the telefono_local column
 * @method     ActividadQuery groupByTelefonoCelular() Group by the telefono_celular column
 * @method     ActividadQuery groupByFax() Group by the fax column
 * @method     ActividadQuery groupByEmail() Group by the email column
 * @method     ActividadQuery groupByIdTipoActividad() Group by the id_tipo_actividad column
 * @method     ActividadQuery groupByTitulo() Group by the titulo column
 * @method     ActividadQuery groupByAutor() Group by the autor column
 * @method     ActividadQuery groupByEditorial() Group by the editorial column
 * @method     ActividadQuery groupByDescripcionActividad() Group by the descripcion_actividad column
 * @method     ActividadQuery groupByPresenteAutor() Group by the presente_autor column
 * @method     ActividadQuery groupByPublicoDirigido() Group by the publico_dirigido column
 * @method     ActividadQuery groupByNumeroPonentes() Group by the numero_ponentes column
 * @method     ActividadQuery groupByActividadCerrada() Group by the actividad_cerrada column
 *
 * @method     ActividadQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ActividadQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ActividadQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ActividadQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     ActividadQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     ActividadQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     ActividadQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method     ActividadQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method     ActividadQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method     ActividadQuery leftJoinTipoActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoActividad relation
 * @method     ActividadQuery rightJoinTipoActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoActividad relation
 * @method     ActividadQuery innerJoinTipoActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoActividad relation
 *
 * @method     ActividadQuery leftJoinActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadFinalizada relation
 * @method     ActividadQuery rightJoinActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadFinalizada relation
 * @method     ActividadQuery innerJoinActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadFinalizada relation
 *
 * @method     ActividadQuery leftJoinActividadTipoActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadTipoActividad relation
 * @method     ActividadQuery rightJoinActividadTipoActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadTipoActividad relation
 * @method     ActividadQuery innerJoinActividadTipoActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadTipoActividad relation
 *
 * @method     ActividadQuery leftJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     ActividadQuery rightJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 * @method     ActividadQuery innerJoinIncumplmientoActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the IncumplmientoActividadFinalizada relation
 *
 * @method     ActividadQuery leftJoinPonenteActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the PonenteActividad relation
 * @method     ActividadQuery rightJoinPonenteActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PonenteActividad relation
 * @method     ActividadQuery innerJoinPonenteActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the PonenteActividad relation
 *
 * @method     Actividad findOne(PropelPDO $con = null) Return the first Actividad matching the query
 * @method     Actividad findOneOrCreate(PropelPDO $con = null) Return the first Actividad matching the query, or a new Actividad object populated from the query conditions when no match is found
 *
 * @method     Actividad findOneById(string $id) Return the first Actividad filtered by the id column
 * @method     Actividad findOneByFechaSugerida(string $fecha_sugerida) Return the first Actividad filtered by the fecha_sugerida column
 * @method     Actividad findOneByHora(string $hora) Return the first Actividad filtered by the hora column
 * @method     Actividad findOneByIdFeria(int $id_feria) Return the first Actividad filtered by the id_feria column
 * @method     Actividad findOneByIdUsuario(int $id_usuario) Return the first Actividad filtered by the id_usuario column
 * @method     Actividad findOneByStandNumero(int $stand_numero) Return the first Actividad filtered by the stand_numero column
 * @method     Actividad findOneByNombreEmpresa(string $nombre_empresa) Return the first Actividad filtered by the nombre_empresa column
 * @method     Actividad findOneByDireccion(string $direccion) Return the first Actividad filtered by the direccion column
 * @method     Actividad findOneByNombreSolicitante(string $nombre_solicitante) Return the first Actividad filtered by the nombre_solicitante column
 * @method     Actividad findOneByNombreRepresentante(string $nombre_representante) Return the first Actividad filtered by the nombre_representante column
 * @method     Actividad findOneByTelefonoLocal(string $telefono_local) Return the first Actividad filtered by the telefono_local column
 * @method     Actividad findOneByTelefonoCelular(string $telefono_celular) Return the first Actividad filtered by the telefono_celular column
 * @method     Actividad findOneByFax(string $fax) Return the first Actividad filtered by the fax column
 * @method     Actividad findOneByEmail(string $email) Return the first Actividad filtered by the email column
 * @method     Actividad findOneByIdTipoActividad(int $id_tipo_actividad) Return the first Actividad filtered by the id_tipo_actividad column
 * @method     Actividad findOneByTitulo(string $titulo) Return the first Actividad filtered by the titulo column
 * @method     Actividad findOneByAutor(string $autor) Return the first Actividad filtered by the autor column
 * @method     Actividad findOneByEditorial(string $editorial) Return the first Actividad filtered by the editorial column
 * @method     Actividad findOneByDescripcionActividad(string $descripcion_actividad) Return the first Actividad filtered by the descripcion_actividad column
 * @method     Actividad findOneByPresenteAutor(boolean $presente_autor) Return the first Actividad filtered by the presente_autor column
 * @method     Actividad findOneByPublicoDirigido(string $publico_dirigido) Return the first Actividad filtered by the publico_dirigido column
 * @method     Actividad findOneByNumeroPonentes(string $numero_ponentes) Return the first Actividad filtered by the numero_ponentes column
 * @method     Actividad findOneByActividadCerrada(boolean $actividad_cerrada) Return the first Actividad filtered by the actividad_cerrada column
 *
 * @method     array findById(string $id) Return Actividad objects filtered by the id column
 * @method     array findByFechaSugerida(string $fecha_sugerida) Return Actividad objects filtered by the fecha_sugerida column
 * @method     array findByHora(string $hora) Return Actividad objects filtered by the hora column
 * @method     array findByIdFeria(int $id_feria) Return Actividad objects filtered by the id_feria column
 * @method     array findByIdUsuario(int $id_usuario) Return Actividad objects filtered by the id_usuario column
 * @method     array findByStandNumero(int $stand_numero) Return Actividad objects filtered by the stand_numero column
 * @method     array findByNombreEmpresa(string $nombre_empresa) Return Actividad objects filtered by the nombre_empresa column
 * @method     array findByDireccion(string $direccion) Return Actividad objects filtered by the direccion column
 * @method     array findByNombreSolicitante(string $nombre_solicitante) Return Actividad objects filtered by the nombre_solicitante column
 * @method     array findByNombreRepresentante(string $nombre_representante) Return Actividad objects filtered by the nombre_representante column
 * @method     array findByTelefonoLocal(string $telefono_local) Return Actividad objects filtered by the telefono_local column
 * @method     array findByTelefonoCelular(string $telefono_celular) Return Actividad objects filtered by the telefono_celular column
 * @method     array findByFax(string $fax) Return Actividad objects filtered by the fax column
 * @method     array findByEmail(string $email) Return Actividad objects filtered by the email column
 * @method     array findByIdTipoActividad(int $id_tipo_actividad) Return Actividad objects filtered by the id_tipo_actividad column
 * @method     array findByTitulo(string $titulo) Return Actividad objects filtered by the titulo column
 * @method     array findByAutor(string $autor) Return Actividad objects filtered by the autor column
 * @method     array findByEditorial(string $editorial) Return Actividad objects filtered by the editorial column
 * @method     array findByDescripcionActividad(string $descripcion_actividad) Return Actividad objects filtered by the descripcion_actividad column
 * @method     array findByPresenteAutor(boolean $presente_autor) Return Actividad objects filtered by the presente_autor column
 * @method     array findByPublicoDirigido(string $publico_dirigido) Return Actividad objects filtered by the publico_dirigido column
 * @method     array findByNumeroPonentes(string $numero_ponentes) Return Actividad objects filtered by the numero_ponentes column
 * @method     array findByActividadCerrada(boolean $actividad_cerrada) Return Actividad objects filtered by the actividad_cerrada column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividadQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseActividadQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Actividad', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ActividadQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ActividadQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ActividadQuery) {
			return $criteria;
		}
		$query = new ActividadQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Actividad|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ActividadPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ActividadPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ActividadPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ActividadPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the fecha_sugerida column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFechaSugerida('2011-03-14'); // WHERE fecha_sugerida = '2011-03-14'
	 * $query->filterByFechaSugerida('now'); // WHERE fecha_sugerida = '2011-03-14'
	 * $query->filterByFechaSugerida(array('max' => 'yesterday')); // WHERE fecha_sugerida > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fechaSugerida The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFechaSugerida($fechaSugerida = null, $comparison = null)
	{
		if (is_array($fechaSugerida)) {
			$useMinMax = false;
			if (isset($fechaSugerida['min'])) {
				$this->addUsingAlias(ActividadPeer::FECHA_SUGERIDA, $fechaSugerida['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fechaSugerida['max'])) {
				$this->addUsingAlias(ActividadPeer::FECHA_SUGERIDA, $fechaSugerida['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::FECHA_SUGERIDA, $fechaSugerida, $comparison);
	}

	/**
	 * Filter the query on the hora column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHora('2011-03-14'); // WHERE hora = '2011-03-14'
	 * $query->filterByHora('now'); // WHERE hora = '2011-03-14'
	 * $query->filterByHora(array('max' => 'yesterday')); // WHERE hora > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $hora The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByHora($hora = null, $comparison = null)
	{
		if (is_array($hora)) {
			$useMinMax = false;
			if (isset($hora['min'])) {
				$this->addUsingAlias(ActividadPeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($hora['max'])) {
				$this->addUsingAlias(ActividadPeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::HORA, $hora, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_usuario column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdUsuario(1234); // WHERE id_usuario = 1234
	 * $query->filterByIdUsuario(array(12, 34)); // WHERE id_usuario IN (12, 34)
	 * $query->filterByIdUsuario(array('min' => 12)); // WHERE id_usuario > 12
	 * </code>
	 *
	 * @see       filterByUsuario()
	 *
	 * @param     mixed $idUsuario The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIdUsuario($idUsuario = null, $comparison = null)
	{
		if (is_array($idUsuario)) {
			$useMinMax = false;
			if (isset($idUsuario['min'])) {
				$this->addUsingAlias(ActividadPeer::ID_USUARIO, $idUsuario['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idUsuario['max'])) {
				$this->addUsingAlias(ActividadPeer::ID_USUARIO, $idUsuario['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::ID_USUARIO, $idUsuario, $comparison);
	}

	/**
	 * Filter the query on the stand_numero column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByStandNumero(1234); // WHERE stand_numero = 1234
	 * $query->filterByStandNumero(array(12, 34)); // WHERE stand_numero IN (12, 34)
	 * $query->filterByStandNumero(array('min' => 12)); // WHERE stand_numero > 12
	 * </code>
	 *
	 * @param     mixed $standNumero The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByStandNumero($standNumero = null, $comparison = null)
	{
		if (is_array($standNumero)) {
			$useMinMax = false;
			if (isset($standNumero['min'])) {
				$this->addUsingAlias(ActividadPeer::STAND_NUMERO, $standNumero['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($standNumero['max'])) {
				$this->addUsingAlias(ActividadPeer::STAND_NUMERO, $standNumero['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::STAND_NUMERO, $standNumero, $comparison);
	}

	/**
	 * Filter the query on the nombre_empresa column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreEmpresa('fooValue');   // WHERE nombre_empresa = 'fooValue'
	 * $query->filterByNombreEmpresa('%fooValue%'); // WHERE nombre_empresa LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreEmpresa The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByNombreEmpresa($nombreEmpresa = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreEmpresa)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreEmpresa)) {
				$nombreEmpresa = str_replace('*', '%', $nombreEmpresa);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::NOMBRE_EMPRESA, $nombreEmpresa, $comparison);
	}

	/**
	 * Filter the query on the direccion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDireccion('fooValue');   // WHERE direccion = 'fooValue'
	 * $query->filterByDireccion('%fooValue%'); // WHERE direccion LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $direccion The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByDireccion($direccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($direccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $direccion)) {
				$direccion = str_replace('*', '%', $direccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::DIRECCION, $direccion, $comparison);
	}

	/**
	 * Filter the query on the nombre_solicitante column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreSolicitante('fooValue');   // WHERE nombre_solicitante = 'fooValue'
	 * $query->filterByNombreSolicitante('%fooValue%'); // WHERE nombre_solicitante LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreSolicitante The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByNombreSolicitante($nombreSolicitante = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreSolicitante)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreSolicitante)) {
				$nombreSolicitante = str_replace('*', '%', $nombreSolicitante);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::NOMBRE_SOLICITANTE, $nombreSolicitante, $comparison);
	}

	/**
	 * Filter the query on the nombre_representante column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombreRepresentante('fooValue');   // WHERE nombre_representante = 'fooValue'
	 * $query->filterByNombreRepresentante('%fooValue%'); // WHERE nombre_representante LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombreRepresentante The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByNombreRepresentante($nombreRepresentante = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombreRepresentante)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombreRepresentante)) {
				$nombreRepresentante = str_replace('*', '%', $nombreRepresentante);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::NOMBRE_REPRESENTANTE, $nombreRepresentante, $comparison);
	}

	/**
	 * Filter the query on the telefono_local column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTelefonoLocal('fooValue');   // WHERE telefono_local = 'fooValue'
	 * $query->filterByTelefonoLocal('%fooValue%'); // WHERE telefono_local LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $telefonoLocal The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByTelefonoLocal($telefonoLocal = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefonoLocal)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefonoLocal)) {
				$telefonoLocal = str_replace('*', '%', $telefonoLocal);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::TELEFONO_LOCAL, $telefonoLocal, $comparison);
	}

	/**
	 * Filter the query on the telefono_celular column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTelefonoCelular('fooValue');   // WHERE telefono_celular = 'fooValue'
	 * $query->filterByTelefonoCelular('%fooValue%'); // WHERE telefono_celular LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $telefonoCelular The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByTelefonoCelular($telefonoCelular = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($telefonoCelular)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $telefonoCelular)) {
				$telefonoCelular = str_replace('*', '%', $telefonoCelular);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::TELEFONO_CELULAR, $telefonoCelular, $comparison);
	}

	/**
	 * Filter the query on the fax column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFax('fooValue');   // WHERE fax = 'fooValue'
	 * $query->filterByFax('%fooValue%'); // WHERE fax LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $fax The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFax($fax = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($fax)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $fax)) {
				$fax = str_replace('*', '%', $fax);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::FAX, $fax, $comparison);
	}

	/**
	 * Filter the query on the email column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEmail('fooValue');   // WHERE email = 'fooValue'
	 * $query->filterByEmail('%fooValue%'); // WHERE email LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $email The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByEmail($email = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($email)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $email)) {
				$email = str_replace('*', '%', $email);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::EMAIL, $email, $comparison);
	}

	/**
	 * Filter the query on the id_tipo_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdTipoActividad(1234); // WHERE id_tipo_actividad = 1234
	 * $query->filterByIdTipoActividad(array(12, 34)); // WHERE id_tipo_actividad IN (12, 34)
	 * $query->filterByIdTipoActividad(array('min' => 12)); // WHERE id_tipo_actividad > 12
	 * </code>
	 *
	 * @see       filterByTipoActividad()
	 *
	 * @param     mixed $idTipoActividad The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIdTipoActividad($idTipoActividad = null, $comparison = null)
	{
		if (is_array($idTipoActividad)) {
			$useMinMax = false;
			if (isset($idTipoActividad['min'])) {
				$this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idTipoActividad['max'])) {
				$this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad, $comparison);
	}

	/**
	 * Filter the query on the titulo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTitulo('fooValue');   // WHERE titulo = 'fooValue'
	 * $query->filterByTitulo('%fooValue%'); // WHERE titulo LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $titulo The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByTitulo($titulo = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($titulo)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $titulo)) {
				$titulo = str_replace('*', '%', $titulo);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::TITULO, $titulo, $comparison);
	}

	/**
	 * Filter the query on the autor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByAutor('fooValue');   // WHERE autor = 'fooValue'
	 * $query->filterByAutor('%fooValue%'); // WHERE autor LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $autor The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByAutor($autor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($autor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $autor)) {
				$autor = str_replace('*', '%', $autor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::AUTOR, $autor, $comparison);
	}

	/**
	 * Filter the query on the editorial column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEditorial('fooValue');   // WHERE editorial = 'fooValue'
	 * $query->filterByEditorial('%fooValue%'); // WHERE editorial LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $editorial The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByEditorial($editorial = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($editorial)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $editorial)) {
				$editorial = str_replace('*', '%', $editorial);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::EDITORIAL, $editorial, $comparison);
	}

	/**
	 * Filter the query on the descripcion_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDescripcionActividad('fooValue');   // WHERE descripcion_actividad = 'fooValue'
	 * $query->filterByDescripcionActividad('%fooValue%'); // WHERE descripcion_actividad LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $descripcionActividad The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByDescripcionActividad($descripcionActividad = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($descripcionActividad)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $descripcionActividad)) {
				$descripcionActividad = str_replace('*', '%', $descripcionActividad);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::DESCRIPCION_ACTIVIDAD, $descripcionActividad, $comparison);
	}

	/**
	 * Filter the query on the presente_autor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByPresenteAutor(true); // WHERE presente_autor = true
	 * $query->filterByPresenteAutor('yes'); // WHERE presente_autor = true
	 * </code>
	 *
	 * @param     boolean|string $presenteAutor The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPresenteAutor($presenteAutor = null, $comparison = null)
	{
		if (is_string($presenteAutor)) {
			$presente_autor = in_array(strtolower($presenteAutor), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadPeer::PRESENTE_AUTOR, $presenteAutor, $comparison);
	}

	/**
	 * Filter the query on the publico_dirigido column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByPublicoDirigido('fooValue');   // WHERE publico_dirigido = 'fooValue'
	 * $query->filterByPublicoDirigido('%fooValue%'); // WHERE publico_dirigido LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $publicoDirigido The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPublicoDirigido($publicoDirigido = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($publicoDirigido)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $publicoDirigido)) {
				$publicoDirigido = str_replace('*', '%', $publicoDirigido);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::PUBLICO_DIRIGIDO, $publicoDirigido, $comparison);
	}

	/**
	 * Filter the query on the numero_ponentes column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNumeroPonentes('fooValue');   // WHERE numero_ponentes = 'fooValue'
	 * $query->filterByNumeroPonentes('%fooValue%'); // WHERE numero_ponentes LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $numeroPonentes The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByNumeroPonentes($numeroPonentes = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($numeroPonentes)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $numeroPonentes)) {
				$numeroPonentes = str_replace('*', '%', $numeroPonentes);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::NUMERO_PONENTES, $numeroPonentes, $comparison);
	}

	/**
	 * Filter the query on the actividad_cerrada column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByActividadCerrada(true); // WHERE actividad_cerrada = true
	 * $query->filterByActividadCerrada('yes'); // WHERE actividad_cerrada = true
	 * </code>
	 *
	 * @param     boolean|string $actividadCerrada The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByActividadCerrada($actividadCerrada = null, $comparison = null)
	{
		if (is_string($actividadCerrada)) {
			$actividad_cerrada = in_array(strtolower($actividadCerrada), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadPeer::ACTIVIDAD_CERRADA, $actividadCerrada, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(ActividadPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Usuario object
	 *
	 * @param     Usuario|PropelCollection $usuario The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByUsuario($usuario, $comparison = null)
	{
		if ($usuario instanceof Usuario) {
			return $this
				->addUsingAlias(ActividadPeer::ID_USUARIO, $usuario->getId(), $comparison);
		} elseif ($usuario instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadPeer::ID_USUARIO, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Usuario relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Usuario');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Usuario');
		}
		
		return $this;
	}

	/**
	 * Use the Usuario relation Usuario object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery A secondary query class using the current class as primary query
	 */
	public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinUsuario($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
	}

	/**
	 * Filter the query by a related TipoActividad object
	 *
	 * @param     TipoActividad|PropelCollection $tipoActividad The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByTipoActividad($tipoActividad, $comparison = null)
	{
		if ($tipoActividad instanceof TipoActividad) {
			return $this
				->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $tipoActividad->getId(), $comparison);
		} elseif ($tipoActividad instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $tipoActividad->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByTipoActividad() only accepts arguments of type TipoActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TipoActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinTipoActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TipoActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TipoActividad');
		}
		
		return $this;
	}

	/**
	 * Use the TipoActividad relation TipoActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipoActividadQuery A secondary query class using the current class as primary query
	 */
	public function useTipoActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTipoActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TipoActividad', 'TipoActividadQuery');
	}

	/**
	 * Filter the query by a related ActividadFinalizada object
	 *
	 * @param     ActividadFinalizada $actividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByActividadFinalizada($actividadFinalizada, $comparison = null)
	{
		if ($actividadFinalizada instanceof ActividadFinalizada) {
			return $this
				->addUsingAlias(ActividadPeer::ID, $actividadFinalizada->getIdActividad(), $comparison);
		} elseif ($actividadFinalizada instanceof PropelCollection) {
			return $this
				->useActividadFinalizadaQuery()
					->filterByPrimaryKeys($actividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividadFinalizada() only accepts arguments of type ActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadFinalizada relation ActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadFinalizada', 'ActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related ActividadTipoActividad object
	 *
	 * @param     ActividadTipoActividad $actividadTipoActividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByActividadTipoActividad($actividadTipoActividad, $comparison = null)
	{
		if ($actividadTipoActividad instanceof ActividadTipoActividad) {
			return $this
				->addUsingAlias(ActividadPeer::ID, $actividadTipoActividad->getIdActividad(), $comparison);
		} elseif ($actividadTipoActividad instanceof PropelCollection) {
			return $this
				->useActividadTipoActividadQuery()
					->filterByPrimaryKeys($actividadTipoActividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividadTipoActividad() only accepts arguments of type ActividadTipoActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadTipoActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinActividadTipoActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadTipoActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadTipoActividad');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadTipoActividad relation ActividadTipoActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadTipoActividadQuery A secondary query class using the current class as primary query
	 */
	public function useActividadTipoActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadTipoActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadTipoActividad', 'ActividadTipoActividadQuery');
	}

	/**
	 * Filter the query by a related IncumplmientoActividadFinalizada object
	 *
	 * @param     IncumplmientoActividadFinalizada $incumplmientoActividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIncumplmientoActividadFinalizada($incumplmientoActividadFinalizada, $comparison = null)
	{
		if ($incumplmientoActividadFinalizada instanceof IncumplmientoActividadFinalizada) {
			return $this
				->addUsingAlias(ActividadPeer::ID, $incumplmientoActividadFinalizada->getIdActividad(), $comparison);
		} elseif ($incumplmientoActividadFinalizada instanceof PropelCollection) {
			return $this
				->useIncumplmientoActividadFinalizadaQuery()
					->filterByPrimaryKeys($incumplmientoActividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByIncumplmientoActividadFinalizada() only accepts arguments of type IncumplmientoActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the IncumplmientoActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinIncumplmientoActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('IncumplmientoActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'IncumplmientoActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the IncumplmientoActividadFinalizada relation IncumplmientoActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useIncumplmientoActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinIncumplmientoActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'IncumplmientoActividadFinalizada', 'IncumplmientoActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related PonenteActividad object
	 *
	 * @param     PonenteActividad $ponenteActividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPonenteActividad($ponenteActividad, $comparison = null)
	{
		if ($ponenteActividad instanceof PonenteActividad) {
			return $this
				->addUsingAlias(ActividadPeer::ID, $ponenteActividad->getIdActividad(), $comparison);
		} elseif ($ponenteActividad instanceof PropelCollection) {
			return $this
				->usePonenteActividadQuery()
					->filterByPrimaryKeys($ponenteActividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPonenteActividad() only accepts arguments of type PonenteActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PonenteActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinPonenteActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PonenteActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PonenteActividad');
		}
		
		return $this;
	}

	/**
	 * Use the PonenteActividad relation PonenteActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PonenteActividadQuery A secondary query class using the current class as primary query
	 */
	public function usePonenteActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPonenteActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PonenteActividad', 'PonenteActividadQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Actividad $actividad Object to remove from the list of results
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function prune($actividad = null)
	{
		if ($actividad) {
			$this->addUsingAlias(ActividadPeer::ID, $actividad->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseActividadQuery
