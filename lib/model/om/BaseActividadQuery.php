<?php


/**
 * Base class that represents a query for the 'actividad' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sat Oct  4 21:39:06 2014
 *
 * @method     ActividadQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     ActividadQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 * @method     ActividadQuery orderByEjecutada($order = Criteria::ASC) Order by the ejecutada column
 * @method     ActividadQuery orderByCantidadParticipantesM($order = Criteria::ASC) Order by the cantidad_participantes_m column
 * @method     ActividadQuery orderByCantidadParticipantesF($order = Criteria::ASC) Order by the cantidad_participantes_f column
 * @method     ActividadQuery orderByAlcanzoTiempo($order = Criteria::ASC) Order by the alcanzo_tiempo column
 * @method     ActividadQuery orderByCausasIncumplimiento($order = Criteria::ASC) Order by the causas_incumplimiento column
 * @method     ActividadQuery orderByObservaciones($order = Criteria::ASC) Order by the observaciones column
 * @method     ActividadQuery orderByIdTipoActividad($order = Criteria::ASC) Order by the id_tipo_actividad column
 * @method     ActividadQuery orderByObservacionTipoActividad($order = Criteria::ASC) Order by the observacion_tipo_actividad column
 * @method     ActividadQuery orderByFecha($order = Criteria::ASC) Order by the fecha column
 * @method     ActividadQuery orderByHora($order = Criteria::ASC) Order by the hora column
 * @method     ActividadQuery orderByFacilitador($order = Criteria::ASC) Order by the facilitador column
 * @method     ActividadQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 *
 * @method     ActividadQuery groupById() Group by the id column
 * @method     ActividadQuery groupByNombre() Group by the nombre column
 * @method     ActividadQuery groupByEjecutada() Group by the ejecutada column
 * @method     ActividadQuery groupByCantidadParticipantesM() Group by the cantidad_participantes_m column
 * @method     ActividadQuery groupByCantidadParticipantesF() Group by the cantidad_participantes_f column
 * @method     ActividadQuery groupByAlcanzoTiempo() Group by the alcanzo_tiempo column
 * @method     ActividadQuery groupByCausasIncumplimiento() Group by the causas_incumplimiento column
 * @method     ActividadQuery groupByObservaciones() Group by the observaciones column
 * @method     ActividadQuery groupByIdTipoActividad() Group by the id_tipo_actividad column
 * @method     ActividadQuery groupByObservacionTipoActividad() Group by the observacion_tipo_actividad column
 * @method     ActividadQuery groupByFecha() Group by the fecha column
 * @method     ActividadQuery groupByHora() Group by the hora column
 * @method     ActividadQuery groupByFacilitador() Group by the facilitador column
 * @method     ActividadQuery groupByIdFeria() Group by the id_feria column
 *
 * @method     ActividadQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     ActividadQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     ActividadQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     ActividadQuery leftJoinTipoActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the TipoActividad relation
 * @method     ActividadQuery rightJoinTipoActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the TipoActividad relation
 * @method     ActividadQuery innerJoinTipoActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the TipoActividad relation
 *
 * @method     ActividadQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     ActividadQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     ActividadQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     ActividadQuery leftJoinPonenteActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the PonenteActividad relation
 * @method     ActividadQuery rightJoinPonenteActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the PonenteActividad relation
 * @method     ActividadQuery innerJoinPonenteActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the PonenteActividad relation
 *
 * @method     Actividad findOne(PropelPDO $con = null) Return the first Actividad matching the query
 * @method     Actividad findOneOrCreate(PropelPDO $con = null) Return the first Actividad matching the query, or a new Actividad object populated from the query conditions when no match is found
 *
 * @method     Actividad findOneById(string $id) Return the first Actividad filtered by the id column
 * @method     Actividad findOneByNombre(string $nombre) Return the first Actividad filtered by the nombre column
 * @method     Actividad findOneByEjecutada(boolean $ejecutada) Return the first Actividad filtered by the ejecutada column
 * @method     Actividad findOneByCantidadParticipantesM(int $cantidad_participantes_m) Return the first Actividad filtered by the cantidad_participantes_m column
 * @method     Actividad findOneByCantidadParticipantesF(int $cantidad_participantes_f) Return the first Actividad filtered by the cantidad_participantes_f column
 * @method     Actividad findOneByAlcanzoTiempo(boolean $alcanzo_tiempo) Return the first Actividad filtered by the alcanzo_tiempo column
 * @method     Actividad findOneByCausasIncumplimiento(string $causas_incumplimiento) Return the first Actividad filtered by the causas_incumplimiento column
 * @method     Actividad findOneByObservaciones(string $observaciones) Return the first Actividad filtered by the observaciones column
 * @method     Actividad findOneByIdTipoActividad(int $id_tipo_actividad) Return the first Actividad filtered by the id_tipo_actividad column
 * @method     Actividad findOneByObservacionTipoActividad(string $observacion_tipo_actividad) Return the first Actividad filtered by the observacion_tipo_actividad column
 * @method     Actividad findOneByFecha(string $fecha) Return the first Actividad filtered by the fecha column
 * @method     Actividad findOneByHora(string $hora) Return the first Actividad filtered by the hora column
 * @method     Actividad findOneByFacilitador(string $facilitador) Return the first Actividad filtered by the facilitador column
 * @method     Actividad findOneByIdFeria(int $id_feria) Return the first Actividad filtered by the id_feria column
 *
 * @method     array findById(string $id) Return Actividad objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Actividad objects filtered by the nombre column
 * @method     array findByEjecutada(boolean $ejecutada) Return Actividad objects filtered by the ejecutada column
 * @method     array findByCantidadParticipantesM(int $cantidad_participantes_m) Return Actividad objects filtered by the cantidad_participantes_m column
 * @method     array findByCantidadParticipantesF(int $cantidad_participantes_f) Return Actividad objects filtered by the cantidad_participantes_f column
 * @method     array findByAlcanzoTiempo(boolean $alcanzo_tiempo) Return Actividad objects filtered by the alcanzo_tiempo column
 * @method     array findByCausasIncumplimiento(string $causas_incumplimiento) Return Actividad objects filtered by the causas_incumplimiento column
 * @method     array findByObservaciones(string $observaciones) Return Actividad objects filtered by the observaciones column
 * @method     array findByIdTipoActividad(int $id_tipo_actividad) Return Actividad objects filtered by the id_tipo_actividad column
 * @method     array findByObservacionTipoActividad(string $observacion_tipo_actividad) Return Actividad objects filtered by the observacion_tipo_actividad column
 * @method     array findByFecha(string $fecha) Return Actividad objects filtered by the fecha column
 * @method     array findByHora(string $hora) Return Actividad objects filtered by the hora column
 * @method     array findByFacilitador(string $facilitador) Return Actividad objects filtered by the facilitador column
 * @method     array findByIdFeria(int $id_feria) Return Actividad objects filtered by the id_feria column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseActividadQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseActividadQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Actividad', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new ActividadQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    ActividadQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof ActividadQuery) {
			return $criteria;
		}
		$query = new ActividadQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Actividad|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = ActividadPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(ActividadPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(ActividadPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(ActividadPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombre('fooValue');   // WHERE nombre = 'fooValue'
	 * $query->filterByNombre('%fooValue%'); // WHERE nombre LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombre The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query on the ejecutada column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByEjecutada(true); // WHERE ejecutada = true
	 * $query->filterByEjecutada('yes'); // WHERE ejecutada = true
	 * </code>
	 *
	 * @param     boolean|string $ejecutada The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByEjecutada($ejecutada = null, $comparison = null)
	{
		if (is_string($ejecutada)) {
			$ejecutada = in_array(strtolower($ejecutada), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadPeer::EJECUTADA, $ejecutada, $comparison);
	}

	/**
	 * Filter the query on the cantidad_participantes_m column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCantidadParticipantesM(1234); // WHERE cantidad_participantes_m = 1234
	 * $query->filterByCantidadParticipantesM(array(12, 34)); // WHERE cantidad_participantes_m IN (12, 34)
	 * $query->filterByCantidadParticipantesM(array('min' => 12)); // WHERE cantidad_participantes_m > 12
	 * </code>
	 *
	 * @param     mixed $cantidadParticipantesM The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByCantidadParticipantesM($cantidadParticipantesM = null, $comparison = null)
	{
		if (is_array($cantidadParticipantesM)) {
			$useMinMax = false;
			if (isset($cantidadParticipantesM['min'])) {
				$this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_M, $cantidadParticipantesM['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($cantidadParticipantesM['max'])) {
				$this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_M, $cantidadParticipantesM['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_M, $cantidadParticipantesM, $comparison);
	}

	/**
	 * Filter the query on the cantidad_participantes_f column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCantidadParticipantesF(1234); // WHERE cantidad_participantes_f = 1234
	 * $query->filterByCantidadParticipantesF(array(12, 34)); // WHERE cantidad_participantes_f IN (12, 34)
	 * $query->filterByCantidadParticipantesF(array('min' => 12)); // WHERE cantidad_participantes_f > 12
	 * </code>
	 *
	 * @param     mixed $cantidadParticipantesF The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByCantidadParticipantesF($cantidadParticipantesF = null, $comparison = null)
	{
		if (is_array($cantidadParticipantesF)) {
			$useMinMax = false;
			if (isset($cantidadParticipantesF['min'])) {
				$this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_F, $cantidadParticipantesF['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($cantidadParticipantesF['max'])) {
				$this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_F, $cantidadParticipantesF['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::CANTIDAD_PARTICIPANTES_F, $cantidadParticipantesF, $comparison);
	}

	/**
	 * Filter the query on the alcanzo_tiempo column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByAlcanzoTiempo(true); // WHERE alcanzo_tiempo = true
	 * $query->filterByAlcanzoTiempo('yes'); // WHERE alcanzo_tiempo = true
	 * </code>
	 *
	 * @param     boolean|string $alcanzoTiempo The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByAlcanzoTiempo($alcanzoTiempo = null, $comparison = null)
	{
		if (is_string($alcanzoTiempo)) {
			$alcanzo_tiempo = in_array(strtolower($alcanzoTiempo), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(ActividadPeer::ALCANZO_TIEMPO, $alcanzoTiempo, $comparison);
	}

	/**
	 * Filter the query on the causas_incumplimiento column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByCausasIncumplimiento('fooValue');   // WHERE causas_incumplimiento = 'fooValue'
	 * $query->filterByCausasIncumplimiento('%fooValue%'); // WHERE causas_incumplimiento LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $causasIncumplimiento The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByCausasIncumplimiento($causasIncumplimiento = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($causasIncumplimiento)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $causasIncumplimiento)) {
				$causasIncumplimiento = str_replace('*', '%', $causasIncumplimiento);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::CAUSAS_INCUMPLIMIENTO, $causasIncumplimiento, $comparison);
	}

	/**
	 * Filter the query on the observaciones column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByObservaciones('fooValue');   // WHERE observaciones = 'fooValue'
	 * $query->filterByObservaciones('%fooValue%'); // WHERE observaciones LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $observaciones The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByObservaciones($observaciones = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observaciones)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observaciones)) {
				$observaciones = str_replace('*', '%', $observaciones);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::OBSERVACIONES, $observaciones, $comparison);
	}

	/**
	 * Filter the query on the id_tipo_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdTipoActividad(1234); // WHERE id_tipo_actividad = 1234
	 * $query->filterByIdTipoActividad(array(12, 34)); // WHERE id_tipo_actividad IN (12, 34)
	 * $query->filterByIdTipoActividad(array('min' => 12)); // WHERE id_tipo_actividad > 12
	 * </code>
	 *
	 * @see       filterByTipoActividad()
	 *
	 * @param     mixed $idTipoActividad The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIdTipoActividad($idTipoActividad = null, $comparison = null)
	{
		if (is_array($idTipoActividad)) {
			$useMinMax = false;
			if (isset($idTipoActividad['min'])) {
				$this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idTipoActividad['max'])) {
				$this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $idTipoActividad, $comparison);
	}

	/**
	 * Filter the query on the observacion_tipo_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByObservacionTipoActividad('fooValue');   // WHERE observacion_tipo_actividad = 'fooValue'
	 * $query->filterByObservacionTipoActividad('%fooValue%'); // WHERE observacion_tipo_actividad LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $observacionTipoActividad The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByObservacionTipoActividad($observacionTipoActividad = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($observacionTipoActividad)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $observacionTipoActividad)) {
				$observacionTipoActividad = str_replace('*', '%', $observacionTipoActividad);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::OBSERVACION_TIPO_ACTIVIDAD, $observacionTipoActividad, $comparison);
	}

	/**
	 * Filter the query on the fecha column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFecha('2011-03-14'); // WHERE fecha = '2011-03-14'
	 * $query->filterByFecha('now'); // WHERE fecha = '2011-03-14'
	 * $query->filterByFecha(array('max' => 'yesterday')); // WHERE fecha > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fecha The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFecha($fecha = null, $comparison = null)
	{
		if (is_array($fecha)) {
			$useMinMax = false;
			if (isset($fecha['min'])) {
				$this->addUsingAlias(ActividadPeer::FECHA, $fecha['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fecha['max'])) {
				$this->addUsingAlias(ActividadPeer::FECHA, $fecha['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::FECHA, $fecha, $comparison);
	}

	/**
	 * Filter the query on the hora column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByHora('2011-03-14'); // WHERE hora = '2011-03-14'
	 * $query->filterByHora('now'); // WHERE hora = '2011-03-14'
	 * $query->filterByHora(array('max' => 'yesterday')); // WHERE hora > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $hora The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByHora($hora = null, $comparison = null)
	{
		if (is_array($hora)) {
			$useMinMax = false;
			if (isset($hora['min'])) {
				$this->addUsingAlias(ActividadPeer::HORA, $hora['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($hora['max'])) {
				$this->addUsingAlias(ActividadPeer::HORA, $hora['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::HORA, $hora, $comparison);
	}

	/**
	 * Filter the query on the facilitador column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFacilitador('fooValue');   // WHERE facilitador = 'fooValue'
	 * $query->filterByFacilitador('%fooValue%'); // WHERE facilitador LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $facilitador The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFacilitador($facilitador = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($facilitador)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $facilitador)) {
				$facilitador = str_replace('*', '%', $facilitador);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(ActividadPeer::FACILITADOR, $facilitador, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(ActividadPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query by a related TipoActividad object
	 *
	 * @param     TipoActividad|PropelCollection $tipoActividad The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByTipoActividad($tipoActividad, $comparison = null)
	{
		if ($tipoActividad instanceof TipoActividad) {
			return $this
				->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $tipoActividad->getId(), $comparison);
		} elseif ($tipoActividad instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadPeer::ID_TIPO_ACTIVIDAD, $tipoActividad->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByTipoActividad() only accepts arguments of type TipoActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the TipoActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinTipoActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('TipoActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'TipoActividad');
		}
		
		return $this;
	}

	/**
	 * Use the TipoActividad relation TipoActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    TipoActividadQuery A secondary query class using the current class as primary query
	 */
	public function useTipoActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinTipoActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'TipoActividad', 'TipoActividadQuery');
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(ActividadPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(ActividadPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related PonenteActividad object
	 *
	 * @param     PonenteActividad $ponenteActividad  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function filterByPonenteActividad($ponenteActividad, $comparison = null)
	{
		if ($ponenteActividad instanceof PonenteActividad) {
			return $this
				->addUsingAlias(ActividadPeer::ID, $ponenteActividad->getIdActividad(), $comparison);
		} elseif ($ponenteActividad instanceof PropelCollection) {
			return $this
				->usePonenteActividadQuery()
					->filterByPrimaryKeys($ponenteActividad->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPonenteActividad() only accepts arguments of type PonenteActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the PonenteActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function joinPonenteActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('PonenteActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'PonenteActividad');
		}
		
		return $this;
	}

	/**
	 * Use the PonenteActividad relation PonenteActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PonenteActividadQuery A secondary query class using the current class as primary query
	 */
	public function usePonenteActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPonenteActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'PonenteActividad', 'PonenteActividadQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Actividad $actividad Object to remove from the list of results
	 *
	 * @return    ActividadQuery The current query, for fluid interface
	 */
	public function prune($actividad = null)
	{
		if ($actividad) {
			$this->addUsingAlias(ActividadPeer::ID, $actividad->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseActividadQuery
