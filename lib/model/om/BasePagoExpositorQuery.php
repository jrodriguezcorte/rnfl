<?php


/**
 * Base class that represents a query for the 'pago_expositor' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Thu Dec 25 22:47:30 2014
 *
 * @method     PagoExpositorQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     PagoExpositorQuery orderByFormaPago($order = Criteria::ASC) Order by the forma_pago column
 * @method     PagoExpositorQuery orderByDepositoNacional($order = Criteria::ASC) Order by the deposito_nacional column
 * @method     PagoExpositorQuery orderByPlanillaDepositoNacional($order = Criteria::ASC) Order by the planilla_deposito_nacional column
 * @method     PagoExpositorQuery orderByTransferenciaCuenta($order = Criteria::ASC) Order by the transferencia_cuenta column
 * @method     PagoExpositorQuery orderByBancoEmisor($order = Criteria::ASC) Order by the banco_emisor column
 * @method     PagoExpositorQuery orderByNumeroTransaccion($order = Criteria::ASC) Order by the numero_transaccion column
 * @method     PagoExpositorQuery orderByMonto($order = Criteria::ASC) Order by the monto column
 * @method     PagoExpositorQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     PagoExpositorQuery orderByIdExpositor($order = Criteria::ASC) Order by the id_expositor column
 * @method     PagoExpositorQuery orderByIdUsuario($order = Criteria::ASC) Order by the id_usuario column
 * @method     PagoExpositorQuery orderByIdExpositorFeria($order = Criteria::ASC) Order by the id_expositor_feria column
 * @method     PagoExpositorQuery orderByStatusActual($order = Criteria::ASC) Order by the status_actual column
 * @method     PagoExpositorQuery orderByPagoAprobado($order = Criteria::ASC) Order by the pago_aprobado column
 * @method     PagoExpositorQuery orderByFecha($order = Criteria::ASC) Order by the fecha column
 *
 * @method     PagoExpositorQuery groupById() Group by the id column
 * @method     PagoExpositorQuery groupByFormaPago() Group by the forma_pago column
 * @method     PagoExpositorQuery groupByDepositoNacional() Group by the deposito_nacional column
 * @method     PagoExpositorQuery groupByPlanillaDepositoNacional() Group by the planilla_deposito_nacional column
 * @method     PagoExpositorQuery groupByTransferenciaCuenta() Group by the transferencia_cuenta column
 * @method     PagoExpositorQuery groupByBancoEmisor() Group by the banco_emisor column
 * @method     PagoExpositorQuery groupByNumeroTransaccion() Group by the numero_transaccion column
 * @method     PagoExpositorQuery groupByMonto() Group by the monto column
 * @method     PagoExpositorQuery groupByIdFeria() Group by the id_feria column
 * @method     PagoExpositorQuery groupByIdExpositor() Group by the id_expositor column
 * @method     PagoExpositorQuery groupByIdUsuario() Group by the id_usuario column
 * @method     PagoExpositorQuery groupByIdExpositorFeria() Group by the id_expositor_feria column
 * @method     PagoExpositorQuery groupByStatusActual() Group by the status_actual column
 * @method     PagoExpositorQuery groupByPagoAprobado() Group by the pago_aprobado column
 * @method     PagoExpositorQuery groupByFecha() Group by the fecha column
 *
 * @method     PagoExpositorQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     PagoExpositorQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     PagoExpositorQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     PagoExpositorQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     PagoExpositorQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     PagoExpositorQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     PagoExpositorQuery leftJoinExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Expositor relation
 * @method     PagoExpositorQuery rightJoinExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Expositor relation
 * @method     PagoExpositorQuery innerJoinExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the Expositor relation
 *
 * @method     PagoExpositorQuery leftJoinUsuario($relationAlias = null) Adds a LEFT JOIN clause to the query using the Usuario relation
 * @method     PagoExpositorQuery rightJoinUsuario($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Usuario relation
 * @method     PagoExpositorQuery innerJoinUsuario($relationAlias = null) Adds a INNER JOIN clause to the query using the Usuario relation
 *
 * @method     PagoExpositorQuery leftJoinExpositorFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the ExpositorFeria relation
 * @method     PagoExpositorQuery rightJoinExpositorFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ExpositorFeria relation
 * @method     PagoExpositorQuery innerJoinExpositorFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the ExpositorFeria relation
 *
 * @method     PagoExpositorQuery leftJoinStatus($relationAlias = null) Adds a LEFT JOIN clause to the query using the Status relation
 * @method     PagoExpositorQuery rightJoinStatus($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Status relation
 * @method     PagoExpositorQuery innerJoinStatus($relationAlias = null) Adds a INNER JOIN clause to the query using the Status relation
 *
 * @method     PagoExpositor findOne(PropelPDO $con = null) Return the first PagoExpositor matching the query
 * @method     PagoExpositor findOneOrCreate(PropelPDO $con = null) Return the first PagoExpositor matching the query, or a new PagoExpositor object populated from the query conditions when no match is found
 *
 * @method     PagoExpositor findOneById(string $id) Return the first PagoExpositor filtered by the id column
 * @method     PagoExpositor findOneByFormaPago(boolean $forma_pago) Return the first PagoExpositor filtered by the forma_pago column
 * @method     PagoExpositor findOneByDepositoNacional(string $deposito_nacional) Return the first PagoExpositor filtered by the deposito_nacional column
 * @method     PagoExpositor findOneByPlanillaDepositoNacional(string $planilla_deposito_nacional) Return the first PagoExpositor filtered by the planilla_deposito_nacional column
 * @method     PagoExpositor findOneByTransferenciaCuenta(string $transferencia_cuenta) Return the first PagoExpositor filtered by the transferencia_cuenta column
 * @method     PagoExpositor findOneByBancoEmisor(string $banco_emisor) Return the first PagoExpositor filtered by the banco_emisor column
 * @method     PagoExpositor findOneByNumeroTransaccion(string $numero_transaccion) Return the first PagoExpositor filtered by the numero_transaccion column
 * @method     PagoExpositor findOneByMonto(string $monto) Return the first PagoExpositor filtered by the monto column
 * @method     PagoExpositor findOneByIdFeria(int $id_feria) Return the first PagoExpositor filtered by the id_feria column
 * @method     PagoExpositor findOneByIdExpositor(int $id_expositor) Return the first PagoExpositor filtered by the id_expositor column
 * @method     PagoExpositor findOneByIdUsuario(int $id_usuario) Return the first PagoExpositor filtered by the id_usuario column
 * @method     PagoExpositor findOneByIdExpositorFeria(int $id_expositor_feria) Return the first PagoExpositor filtered by the id_expositor_feria column
 * @method     PagoExpositor findOneByStatusActual(boolean $status_actual) Return the first PagoExpositor filtered by the status_actual column
 * @method     PagoExpositor findOneByPagoAprobado(boolean $pago_aprobado) Return the first PagoExpositor filtered by the pago_aprobado column
 * @method     PagoExpositor findOneByFecha(string $fecha) Return the first PagoExpositor filtered by the fecha column
 *
 * @method     array findById(string $id) Return PagoExpositor objects filtered by the id column
 * @method     array findByFormaPago(boolean $forma_pago) Return PagoExpositor objects filtered by the forma_pago column
 * @method     array findByDepositoNacional(string $deposito_nacional) Return PagoExpositor objects filtered by the deposito_nacional column
 * @method     array findByPlanillaDepositoNacional(string $planilla_deposito_nacional) Return PagoExpositor objects filtered by the planilla_deposito_nacional column
 * @method     array findByTransferenciaCuenta(string $transferencia_cuenta) Return PagoExpositor objects filtered by the transferencia_cuenta column
 * @method     array findByBancoEmisor(string $banco_emisor) Return PagoExpositor objects filtered by the banco_emisor column
 * @method     array findByNumeroTransaccion(string $numero_transaccion) Return PagoExpositor objects filtered by the numero_transaccion column
 * @method     array findByMonto(string $monto) Return PagoExpositor objects filtered by the monto column
 * @method     array findByIdFeria(int $id_feria) Return PagoExpositor objects filtered by the id_feria column
 * @method     array findByIdExpositor(int $id_expositor) Return PagoExpositor objects filtered by the id_expositor column
 * @method     array findByIdUsuario(int $id_usuario) Return PagoExpositor objects filtered by the id_usuario column
 * @method     array findByIdExpositorFeria(int $id_expositor_feria) Return PagoExpositor objects filtered by the id_expositor_feria column
 * @method     array findByStatusActual(boolean $status_actual) Return PagoExpositor objects filtered by the status_actual column
 * @method     array findByPagoAprobado(boolean $pago_aprobado) Return PagoExpositor objects filtered by the pago_aprobado column
 * @method     array findByFecha(string $fecha) Return PagoExpositor objects filtered by the fecha column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePagoExpositorQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasePagoExpositorQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'PagoExpositor', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new PagoExpositorQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    PagoExpositorQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof PagoExpositorQuery) {
			return $criteria;
		}
		$query = new PagoExpositorQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PagoExpositor|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = PagoExpositorPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(PagoExpositorPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(PagoExpositorPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(PagoExpositorPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the forma_pago column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFormaPago(true); // WHERE forma_pago = true
	 * $query->filterByFormaPago('yes'); // WHERE forma_pago = true
	 * </code>
	 *
	 * @param     boolean|string $formaPago The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByFormaPago($formaPago = null, $comparison = null)
	{
		if (is_string($formaPago)) {
			$forma_pago = in_array(strtolower($formaPago), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(PagoExpositorPeer::FORMA_PAGO, $formaPago, $comparison);
	}

	/**
	 * Filter the query on the deposito_nacional column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByDepositoNacional('fooValue');   // WHERE deposito_nacional = 'fooValue'
	 * $query->filterByDepositoNacional('%fooValue%'); // WHERE deposito_nacional LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $depositoNacional The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByDepositoNacional($depositoNacional = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($depositoNacional)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $depositoNacional)) {
				$depositoNacional = str_replace('*', '%', $depositoNacional);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::DEPOSITO_NACIONAL, $depositoNacional, $comparison);
	}

	/**
	 * Filter the query on the planilla_deposito_nacional column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByPlanillaDepositoNacional('fooValue');   // WHERE planilla_deposito_nacional = 'fooValue'
	 * $query->filterByPlanillaDepositoNacional('%fooValue%'); // WHERE planilla_deposito_nacional LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $planillaDepositoNacional The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByPlanillaDepositoNacional($planillaDepositoNacional = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($planillaDepositoNacional)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $planillaDepositoNacional)) {
				$planillaDepositoNacional = str_replace('*', '%', $planillaDepositoNacional);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::PLANILLA_DEPOSITO_NACIONAL, $planillaDepositoNacional, $comparison);
	}

	/**
	 * Filter the query on the transferencia_cuenta column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByTransferenciaCuenta('fooValue');   // WHERE transferencia_cuenta = 'fooValue'
	 * $query->filterByTransferenciaCuenta('%fooValue%'); // WHERE transferencia_cuenta LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $transferenciaCuenta The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByTransferenciaCuenta($transferenciaCuenta = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($transferenciaCuenta)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $transferenciaCuenta)) {
				$transferenciaCuenta = str_replace('*', '%', $transferenciaCuenta);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::TRANSFERENCIA_CUENTA, $transferenciaCuenta, $comparison);
	}

	/**
	 * Filter the query on the banco_emisor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByBancoEmisor('fooValue');   // WHERE banco_emisor = 'fooValue'
	 * $query->filterByBancoEmisor('%fooValue%'); // WHERE banco_emisor LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $bancoEmisor The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByBancoEmisor($bancoEmisor = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($bancoEmisor)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $bancoEmisor)) {
				$bancoEmisor = str_replace('*', '%', $bancoEmisor);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::BANCO_EMISOR, $bancoEmisor, $comparison);
	}

	/**
	 * Filter the query on the numero_transaccion column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNumeroTransaccion('fooValue');   // WHERE numero_transaccion = 'fooValue'
	 * $query->filterByNumeroTransaccion('%fooValue%'); // WHERE numero_transaccion LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $numeroTransaccion The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByNumeroTransaccion($numeroTransaccion = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($numeroTransaccion)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $numeroTransaccion)) {
				$numeroTransaccion = str_replace('*', '%', $numeroTransaccion);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::NUMERO_TRANSACCION, $numeroTransaccion, $comparison);
	}

	/**
	 * Filter the query on the monto column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByMonto(1234); // WHERE monto = 1234
	 * $query->filterByMonto(array(12, 34)); // WHERE monto IN (12, 34)
	 * $query->filterByMonto(array('min' => 12)); // WHERE monto > 12
	 * </code>
	 *
	 * @param     mixed $monto The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByMonto($monto = null, $comparison = null)
	{
		if (is_array($monto)) {
			$useMinMax = false;
			if (isset($monto['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::MONTO, $monto['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($monto['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::MONTO, $monto['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::MONTO, $monto, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_expositor column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdExpositor(1234); // WHERE id_expositor = 1234
	 * $query->filterByIdExpositor(array(12, 34)); // WHERE id_expositor IN (12, 34)
	 * $query->filterByIdExpositor(array('min' => 12)); // WHERE id_expositor > 12
	 * </code>
	 *
	 * @see       filterByExpositor()
	 *
	 * @param     mixed $idExpositor The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByIdExpositor($idExpositor = null, $comparison = null)
	{
		if (is_array($idExpositor)) {
			$useMinMax = false;
			if (isset($idExpositor['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR, $idExpositor['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idExpositor['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR, $idExpositor['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR, $idExpositor, $comparison);
	}

	/**
	 * Filter the query on the id_usuario column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdUsuario(1234); // WHERE id_usuario = 1234
	 * $query->filterByIdUsuario(array(12, 34)); // WHERE id_usuario IN (12, 34)
	 * $query->filterByIdUsuario(array('min' => 12)); // WHERE id_usuario > 12
	 * </code>
	 *
	 * @see       filterByUsuario()
	 *
	 * @param     mixed $idUsuario The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByIdUsuario($idUsuario = null, $comparison = null)
	{
		if (is_array($idUsuario)) {
			$useMinMax = false;
			if (isset($idUsuario['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_USUARIO, $idUsuario['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idUsuario['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_USUARIO, $idUsuario['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::ID_USUARIO, $idUsuario, $comparison);
	}

	/**
	 * Filter the query on the id_expositor_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdExpositorFeria(1234); // WHERE id_expositor_feria = 1234
	 * $query->filterByIdExpositorFeria(array(12, 34)); // WHERE id_expositor_feria IN (12, 34)
	 * $query->filterByIdExpositorFeria(array('min' => 12)); // WHERE id_expositor_feria > 12
	 * </code>
	 *
	 * @see       filterByExpositorFeria()
	 *
	 * @param     mixed $idExpositorFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByIdExpositorFeria($idExpositorFeria = null, $comparison = null)
	{
		if (is_array($idExpositorFeria)) {
			$useMinMax = false;
			if (isset($idExpositorFeria['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR_FERIA, $idExpositorFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idExpositorFeria['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR_FERIA, $idExpositorFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR_FERIA, $idExpositorFeria, $comparison);
	}

	/**
	 * Filter the query on the status_actual column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByStatusActual(true); // WHERE status_actual = true
	 * $query->filterByStatusActual('yes'); // WHERE status_actual = true
	 * </code>
	 *
	 * @param     boolean|string $statusActual The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByStatusActual($statusActual = null, $comparison = null)
	{
		if (is_string($statusActual)) {
			$status_actual = in_array(strtolower($statusActual), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(PagoExpositorPeer::STATUS_ACTUAL, $statusActual, $comparison);
	}

	/**
	 * Filter the query on the pago_aprobado column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByPagoAprobado(true); // WHERE pago_aprobado = true
	 * $query->filterByPagoAprobado('yes'); // WHERE pago_aprobado = true
	 * </code>
	 *
	 * @param     boolean|string $pagoAprobado The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByPagoAprobado($pagoAprobado = null, $comparison = null)
	{
		if (is_string($pagoAprobado)) {
			$pago_aprobado = in_array(strtolower($pagoAprobado), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(PagoExpositorPeer::PAGO_APROBADO, $pagoAprobado, $comparison);
	}

	/**
	 * Filter the query on the fecha column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByFecha('2011-03-14'); // WHERE fecha = '2011-03-14'
	 * $query->filterByFecha('now'); // WHERE fecha = '2011-03-14'
	 * $query->filterByFecha(array('max' => 'yesterday')); // WHERE fecha > '2011-03-13'
	 * </code>
	 *
	 * @param     mixed $fecha The value to use as filter.
	 *              Values can be integers (unix timestamps), DateTime objects, or strings.
	 *              Empty strings are treated as NULL.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByFecha($fecha = null, $comparison = null)
	{
		if (is_array($fecha)) {
			$useMinMax = false;
			if (isset($fecha['min'])) {
				$this->addUsingAlias(PagoExpositorPeer::FECHA, $fecha['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($fecha['max'])) {
				$this->addUsingAlias(PagoExpositorPeer::FECHA, $fecha['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagoExpositorPeer::FECHA, $fecha, $comparison);
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Expositor object
	 *
	 * @param     Expositor|PropelCollection $expositor The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByExpositor($expositor, $comparison = null)
	{
		if ($expositor instanceof Expositor) {
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR, $expositor->getId(), $comparison);
		} elseif ($expositor instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR, $expositor->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByExpositor() only accepts arguments of type Expositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Expositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function joinExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Expositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Expositor');
		}
		
		return $this;
	}

	/**
	 * Use the Expositor relation Expositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Expositor', 'ExpositorQuery');
	}

	/**
	 * Filter the query by a related Usuario object
	 *
	 * @param     Usuario|PropelCollection $usuario The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByUsuario($usuario, $comparison = null)
	{
		if ($usuario instanceof Usuario) {
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_USUARIO, $usuario->getId(), $comparison);
		} elseif ($usuario instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_USUARIO, $usuario->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByUsuario() only accepts arguments of type Usuario or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Usuario relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function joinUsuario($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Usuario');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Usuario');
		}
		
		return $this;
	}

	/**
	 * Use the Usuario relation Usuario object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    UsuarioQuery A secondary query class using the current class as primary query
	 */
	public function useUsuarioQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinUsuario($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Usuario', 'UsuarioQuery');
	}

	/**
	 * Filter the query by a related ExpositorFeria object
	 *
	 * @param     ExpositorFeria|PropelCollection $expositorFeria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByExpositorFeria($expositorFeria, $comparison = null)
	{
		if ($expositorFeria instanceof ExpositorFeria) {
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR_FERIA, $expositorFeria->getId(), $comparison);
		} elseif ($expositorFeria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(PagoExpositorPeer::ID_EXPOSITOR_FERIA, $expositorFeria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByExpositorFeria() only accepts arguments of type ExpositorFeria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ExpositorFeria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function joinExpositorFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ExpositorFeria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ExpositorFeria');
		}
		
		return $this;
	}

	/**
	 * Use the ExpositorFeria relation ExpositorFeria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorFeriaQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositorFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ExpositorFeria', 'ExpositorFeriaQuery');
	}

	/**
	 * Filter the query by a related Status object
	 *
	 * @param     Status $status  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function filterByStatus($status, $comparison = null)
	{
		if ($status instanceof Status) {
			return $this
				->addUsingAlias(PagoExpositorPeer::ID, $status->getIdPagoExpositor(), $comparison);
		} elseif ($status instanceof PropelCollection) {
			return $this
				->useStatusQuery()
					->filterByPrimaryKeys($status->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByStatus() only accepts arguments of type Status or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Status relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function joinStatus($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Status');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Status');
		}
		
		return $this;
	}

	/**
	 * Use the Status relation Status object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    StatusQuery A secondary query class using the current class as primary query
	 */
	public function useStatusQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinStatus($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Status', 'StatusQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     PagoExpositor $pagoExpositor Object to remove from the list of results
	 *
	 * @return    PagoExpositorQuery The current query, for fluid interface
	 */
	public function prune($pagoExpositor = null)
	{
		if ($pagoExpositor) {
			$this->addUsingAlias(PagoExpositorPeer::ID, $pagoExpositor->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasePagoExpositorQuery
