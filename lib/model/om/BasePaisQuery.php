<?php


/**
 * Base class that represents a query for the 'pais' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Fri May  1 16:52:45 2015
 *
 * @method     PaisQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     PaisQuery orderByNombre($order = Criteria::ASC) Order by the nombre column
 *
 * @method     PaisQuery groupById() Group by the id column
 * @method     PaisQuery groupByNombre() Group by the nombre column
 *
 * @method     PaisQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     PaisQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     PaisQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     PaisQuery leftJoinActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadFinalizada relation
 * @method     PaisQuery rightJoinActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadFinalizada relation
 * @method     PaisQuery innerJoinActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadFinalizada relation
 *
 * @method     PaisQuery leftJoinBanco($relationAlias = null) Adds a LEFT JOIN clause to the query using the Banco relation
 * @method     PaisQuery rightJoinBanco($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Banco relation
 * @method     PaisQuery innerJoinBanco($relationAlias = null) Adds a INNER JOIN clause to the query using the Banco relation
 *
 * @method     PaisQuery leftJoinEstado($relationAlias = null) Adds a LEFT JOIN clause to the query using the Estado relation
 * @method     PaisQuery rightJoinEstado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Estado relation
 * @method     PaisQuery innerJoinEstado($relationAlias = null) Adds a INNER JOIN clause to the query using the Estado relation
 *
 * @method     PaisQuery leftJoinExpositor($relationAlias = null) Adds a LEFT JOIN clause to the query using the Expositor relation
 * @method     PaisQuery rightJoinExpositor($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Expositor relation
 * @method     PaisQuery innerJoinExpositor($relationAlias = null) Adds a INNER JOIN clause to the query using the Expositor relation
 *
 * @method     PaisQuery leftJoinFeriaRelatedByIdPaisHomenajeado($relationAlias = null) Adds a LEFT JOIN clause to the query using the FeriaRelatedByIdPaisHomenajeado relation
 * @method     PaisQuery rightJoinFeriaRelatedByIdPaisHomenajeado($relationAlias = null) Adds a RIGHT JOIN clause to the query using the FeriaRelatedByIdPaisHomenajeado relation
 * @method     PaisQuery innerJoinFeriaRelatedByIdPaisHomenajeado($relationAlias = null) Adds a INNER JOIN clause to the query using the FeriaRelatedByIdPaisHomenajeado relation
 *
 * @method     PaisQuery leftJoinFeriaRelatedByIdPais($relationAlias = null) Adds a LEFT JOIN clause to the query using the FeriaRelatedByIdPais relation
 * @method     PaisQuery rightJoinFeriaRelatedByIdPais($relationAlias = null) Adds a RIGHT JOIN clause to the query using the FeriaRelatedByIdPais relation
 * @method     PaisQuery innerJoinFeriaRelatedByIdPais($relationAlias = null) Adds a INNER JOIN clause to the query using the FeriaRelatedByIdPais relation
 *
 * @method     PaisQuery leftJoinPonente($relationAlias = null) Adds a LEFT JOIN clause to the query using the Ponente relation
 * @method     PaisQuery rightJoinPonente($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Ponente relation
 * @method     PaisQuery innerJoinPonente($relationAlias = null) Adds a INNER JOIN clause to the query using the Ponente relation
 *
 * @method     PaisQuery leftJoinSelloEditorial($relationAlias = null) Adds a LEFT JOIN clause to the query using the SelloEditorial relation
 * @method     PaisQuery rightJoinSelloEditorial($relationAlias = null) Adds a RIGHT JOIN clause to the query using the SelloEditorial relation
 * @method     PaisQuery innerJoinSelloEditorial($relationAlias = null) Adds a INNER JOIN clause to the query using the SelloEditorial relation
 *
 * @method     Pais findOne(PropelPDO $con = null) Return the first Pais matching the query
 * @method     Pais findOneOrCreate(PropelPDO $con = null) Return the first Pais matching the query, or a new Pais object populated from the query conditions when no match is found
 *
 * @method     Pais findOneById(string $id) Return the first Pais filtered by the id column
 * @method     Pais findOneByNombre(string $nombre) Return the first Pais filtered by the nombre column
 *
 * @method     array findById(string $id) Return Pais objects filtered by the id column
 * @method     array findByNombre(string $nombre) Return Pais objects filtered by the nombre column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePaisQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BasePaisQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Pais', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new PaisQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    PaisQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof PaisQuery) {
			return $criteria;
		}
		$query = new PaisQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Pais|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = PaisPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(PaisPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(PaisPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(PaisPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the nombre column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByNombre('fooValue');   // WHERE nombre = 'fooValue'
	 * $query->filterByNombre('%fooValue%'); // WHERE nombre LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $nombre The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByNombre($nombre = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($nombre)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $nombre)) {
				$nombre = str_replace('*', '%', $nombre);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PaisPeer::NOMBRE, $nombre, $comparison);
	}

	/**
	 * Filter the query by a related ActividadFinalizada object
	 *
	 * @param     ActividadFinalizada $actividadFinalizada  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByActividadFinalizada($actividadFinalizada, $comparison = null)
	{
		if ($actividadFinalizada instanceof ActividadFinalizada) {
			return $this
				->addUsingAlias(PaisPeer::ID, $actividadFinalizada->getIdPais(), $comparison);
		} elseif ($actividadFinalizada instanceof PropelCollection) {
			return $this
				->useActividadFinalizadaQuery()
					->filterByPrimaryKeys($actividadFinalizada->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByActividadFinalizada() only accepts arguments of type ActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadFinalizada relation ActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadFinalizada', 'ActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related Banco object
	 *
	 * @param     Banco $banco  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByBanco($banco, $comparison = null)
	{
		if ($banco instanceof Banco) {
			return $this
				->addUsingAlias(PaisPeer::ID, $banco->getIdPais(), $comparison);
		} elseif ($banco instanceof PropelCollection) {
			return $this
				->useBancoQuery()
					->filterByPrimaryKeys($banco->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByBanco() only accepts arguments of type Banco or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Banco relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinBanco($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Banco');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Banco');
		}
		
		return $this;
	}

	/**
	 * Use the Banco relation Banco object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    BancoQuery A secondary query class using the current class as primary query
	 */
	public function useBancoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinBanco($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Banco', 'BancoQuery');
	}

	/**
	 * Filter the query by a related Estado object
	 *
	 * @param     Estado $estado  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByEstado($estado, $comparison = null)
	{
		if ($estado instanceof Estado) {
			return $this
				->addUsingAlias(PaisPeer::ID, $estado->getIdPais(), $comparison);
		} elseif ($estado instanceof PropelCollection) {
			return $this
				->useEstadoQuery()
					->filterByPrimaryKeys($estado->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByEstado() only accepts arguments of type Estado or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Estado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinEstado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Estado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Estado');
		}
		
		return $this;
	}

	/**
	 * Use the Estado relation Estado object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    EstadoQuery A secondary query class using the current class as primary query
	 */
	public function useEstadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinEstado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Estado', 'EstadoQuery');
	}

	/**
	 * Filter the query by a related Expositor object
	 *
	 * @param     Expositor $expositor  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByExpositor($expositor, $comparison = null)
	{
		if ($expositor instanceof Expositor) {
			return $this
				->addUsingAlias(PaisPeer::ID, $expositor->getIdPais(), $comparison);
		} elseif ($expositor instanceof PropelCollection) {
			return $this
				->useExpositorQuery()
					->filterByPrimaryKeys($expositor->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByExpositor() only accepts arguments of type Expositor or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Expositor relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinExpositor($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Expositor');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Expositor');
		}
		
		return $this;
	}

	/**
	 * Use the Expositor relation Expositor object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ExpositorQuery A secondary query class using the current class as primary query
	 */
	public function useExpositorQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinExpositor($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Expositor', 'ExpositorQuery');
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria $feria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByFeriaRelatedByIdPaisHomenajeado($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(PaisPeer::ID, $feria->getIdPaisHomenajeado(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			return $this
				->useFeriaRelatedByIdPaisHomenajeadoQuery()
					->filterByPrimaryKeys($feria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByFeriaRelatedByIdPaisHomenajeado() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the FeriaRelatedByIdPaisHomenajeado relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinFeriaRelatedByIdPaisHomenajeado($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('FeriaRelatedByIdPaisHomenajeado');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'FeriaRelatedByIdPaisHomenajeado');
		}
		
		return $this;
	}

	/**
	 * Use the FeriaRelatedByIdPaisHomenajeado relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaRelatedByIdPaisHomenajeadoQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeriaRelatedByIdPaisHomenajeado($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'FeriaRelatedByIdPaisHomenajeado', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria $feria  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByFeriaRelatedByIdPais($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(PaisPeer::ID, $feria->getIdPais(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			return $this
				->useFeriaRelatedByIdPaisQuery()
					->filterByPrimaryKeys($feria->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByFeriaRelatedByIdPais() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the FeriaRelatedByIdPais relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinFeriaRelatedByIdPais($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('FeriaRelatedByIdPais');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'FeriaRelatedByIdPais');
		}
		
		return $this;
	}

	/**
	 * Use the FeriaRelatedByIdPais relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaRelatedByIdPaisQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeriaRelatedByIdPais($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'FeriaRelatedByIdPais', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related Ponente object
	 *
	 * @param     Ponente $ponente  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterByPonente($ponente, $comparison = null)
	{
		if ($ponente instanceof Ponente) {
			return $this
				->addUsingAlias(PaisPeer::ID, $ponente->getNacionalidad(), $comparison);
		} elseif ($ponente instanceof PropelCollection) {
			return $this
				->usePonenteQuery()
					->filterByPrimaryKeys($ponente->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterByPonente() only accepts arguments of type Ponente or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Ponente relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinPonente($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Ponente');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Ponente');
		}
		
		return $this;
	}

	/**
	 * Use the Ponente relation Ponente object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PonenteQuery A secondary query class using the current class as primary query
	 */
	public function usePonenteQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinPonente($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Ponente', 'PonenteQuery');
	}

	/**
	 * Filter the query by a related SelloEditorial object
	 *
	 * @param     SelloEditorial $selloEditorial  the related object to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function filterBySelloEditorial($selloEditorial, $comparison = null)
	{
		if ($selloEditorial instanceof SelloEditorial) {
			return $this
				->addUsingAlias(PaisPeer::ID, $selloEditorial->getIdPais(), $comparison);
		} elseif ($selloEditorial instanceof PropelCollection) {
			return $this
				->useSelloEditorialQuery()
					->filterByPrimaryKeys($selloEditorial->getPrimaryKeys())
				->endUse();
		} else {
			throw new PropelException('filterBySelloEditorial() only accepts arguments of type SelloEditorial or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the SelloEditorial relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function joinSelloEditorial($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('SelloEditorial');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'SelloEditorial');
		}
		
		return $this;
	}

	/**
	 * Use the SelloEditorial relation SelloEditorial object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    SelloEditorialQuery A secondary query class using the current class as primary query
	 */
	public function useSelloEditorialQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinSelloEditorial($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'SelloEditorial', 'SelloEditorialQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Pais $pais Object to remove from the list of results
	 *
	 * @return    PaisQuery The current query, for fluid interface
	 */
	public function prune($pais = null)
	{
		if ($pais) {
			$this->addUsingAlias(PaisPeer::ID, $pais->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BasePaisQuery
