<?php


/**
 * Base class that represents a query for the 'incumplmiento_actividad_finalizada' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.2-dev on:
 *
 * Sun Feb 22 12:26:15 2015
 *
 * @method     IncumplmientoActividadFinalizadaQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     IncumplmientoActividadFinalizadaQuery orderByIdActividad($order = Criteria::ASC) Order by the id_actividad column
 * @method     IncumplmientoActividadFinalizadaQuery orderByIdFeria($order = Criteria::ASC) Order by the id_feria column
 * @method     IncumplmientoActividadFinalizadaQuery orderByIdActividadFinalizada($order = Criteria::ASC) Order by the id_actividad_finalizada column
 * @method     IncumplmientoActividadFinalizadaQuery orderByIdIncumplimientoActividad($order = Criteria::ASC) Order by the id_incumplimiento_actividad column
 *
 * @method     IncumplmientoActividadFinalizadaQuery groupById() Group by the id column
 * @method     IncumplmientoActividadFinalizadaQuery groupByIdActividad() Group by the id_actividad column
 * @method     IncumplmientoActividadFinalizadaQuery groupByIdFeria() Group by the id_feria column
 * @method     IncumplmientoActividadFinalizadaQuery groupByIdActividadFinalizada() Group by the id_actividad_finalizada column
 * @method     IncumplmientoActividadFinalizadaQuery groupByIdIncumplimientoActividad() Group by the id_incumplimiento_actividad column
 *
 * @method     IncumplmientoActividadFinalizadaQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     IncumplmientoActividadFinalizadaQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     IncumplmientoActividadFinalizadaQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     IncumplmientoActividadFinalizadaQuery leftJoinActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the Actividad relation
 * @method     IncumplmientoActividadFinalizadaQuery rightJoinActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Actividad relation
 * @method     IncumplmientoActividadFinalizadaQuery innerJoinActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the Actividad relation
 *
 * @method     IncumplmientoActividadFinalizadaQuery leftJoinFeria($relationAlias = null) Adds a LEFT JOIN clause to the query using the Feria relation
 * @method     IncumplmientoActividadFinalizadaQuery rightJoinFeria($relationAlias = null) Adds a RIGHT JOIN clause to the query using the Feria relation
 * @method     IncumplmientoActividadFinalizadaQuery innerJoinFeria($relationAlias = null) Adds a INNER JOIN clause to the query using the Feria relation
 *
 * @method     IncumplmientoActividadFinalizadaQuery leftJoinActividadFinalizada($relationAlias = null) Adds a LEFT JOIN clause to the query using the ActividadFinalizada relation
 * @method     IncumplmientoActividadFinalizadaQuery rightJoinActividadFinalizada($relationAlias = null) Adds a RIGHT JOIN clause to the query using the ActividadFinalizada relation
 * @method     IncumplmientoActividadFinalizadaQuery innerJoinActividadFinalizada($relationAlias = null) Adds a INNER JOIN clause to the query using the ActividadFinalizada relation
 *
 * @method     IncumplmientoActividadFinalizadaQuery leftJoinIncumplimientoActividad($relationAlias = null) Adds a LEFT JOIN clause to the query using the IncumplimientoActividad relation
 * @method     IncumplmientoActividadFinalizadaQuery rightJoinIncumplimientoActividad($relationAlias = null) Adds a RIGHT JOIN clause to the query using the IncumplimientoActividad relation
 * @method     IncumplmientoActividadFinalizadaQuery innerJoinIncumplimientoActividad($relationAlias = null) Adds a INNER JOIN clause to the query using the IncumplimientoActividad relation
 *
 * @method     IncumplmientoActividadFinalizada findOne(PropelPDO $con = null) Return the first IncumplmientoActividadFinalizada matching the query
 * @method     IncumplmientoActividadFinalizada findOneOrCreate(PropelPDO $con = null) Return the first IncumplmientoActividadFinalizada matching the query, or a new IncumplmientoActividadFinalizada object populated from the query conditions when no match is found
 *
 * @method     IncumplmientoActividadFinalizada findOneById(string $id) Return the first IncumplmientoActividadFinalizada filtered by the id column
 * @method     IncumplmientoActividadFinalizada findOneByIdActividad(int $id_actividad) Return the first IncumplmientoActividadFinalizada filtered by the id_actividad column
 * @method     IncumplmientoActividadFinalizada findOneByIdFeria(int $id_feria) Return the first IncumplmientoActividadFinalizada filtered by the id_feria column
 * @method     IncumplmientoActividadFinalizada findOneByIdActividadFinalizada(int $id_actividad_finalizada) Return the first IncumplmientoActividadFinalizada filtered by the id_actividad_finalizada column
 * @method     IncumplmientoActividadFinalizada findOneByIdIncumplimientoActividad(int $id_incumplimiento_actividad) Return the first IncumplmientoActividadFinalizada filtered by the id_incumplimiento_actividad column
 *
 * @method     array findById(string $id) Return IncumplmientoActividadFinalizada objects filtered by the id column
 * @method     array findByIdActividad(int $id_actividad) Return IncumplmientoActividadFinalizada objects filtered by the id_actividad column
 * @method     array findByIdFeria(int $id_feria) Return IncumplmientoActividadFinalizada objects filtered by the id_feria column
 * @method     array findByIdActividadFinalizada(int $id_actividad_finalizada) Return IncumplmientoActividadFinalizada objects filtered by the id_actividad_finalizada column
 * @method     array findByIdIncumplimientoActividad(int $id_incumplimiento_actividad) Return IncumplmientoActividadFinalizada objects filtered by the id_incumplimiento_actividad column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BaseIncumplmientoActividadFinalizadaQuery extends ModelCriteria
{

	/**
	 * Initializes internal state of BaseIncumplmientoActividadFinalizadaQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'IncumplmientoActividadFinalizada', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new IncumplmientoActividadFinalizadaQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof IncumplmientoActividadFinalizadaQuery) {
			return $criteria;
		}
		$query = new IncumplmientoActividadFinalizadaQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key
	 * Use instance pooling to avoid a database query if the object exists
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    IncumplmientoActividadFinalizada|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ((null !== ($obj = IncumplmientoActividadFinalizadaPeer::getInstanceFromPool((string) $key))) && $this->getFormatter()->isObjectFormatter()) {
			// the object is alredy in the instance pool
			return $obj;
		} else {
			// the object has not been requested yet, or the formatter is not an object formatter
			$criteria = $this->isKeepQuery() ? clone $this : $this;
			$stmt = $criteria
				->filterByPrimaryKey($key)
				->getSelectStatement($con);
			return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
		}
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		return $this
			->filterByPrimaryKeys($keys)
			->find($con);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the id_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdActividad(1234); // WHERE id_actividad = 1234
	 * $query->filterByIdActividad(array(12, 34)); // WHERE id_actividad IN (12, 34)
	 * $query->filterByIdActividad(array('min' => 12)); // WHERE id_actividad > 12
	 * </code>
	 *
	 * @see       filterByActividad()
	 *
	 * @param     mixed $idActividad The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdActividad($idActividad = null, $comparison = null)
	{
		if (is_array($idActividad)) {
			$useMinMax = false;
			if (isset($idActividad['min'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idActividad['max'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD, $idActividad, $comparison);
	}

	/**
	 * Filter the query on the id_feria column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdFeria(1234); // WHERE id_feria = 1234
	 * $query->filterByIdFeria(array(12, 34)); // WHERE id_feria IN (12, 34)
	 * $query->filterByIdFeria(array('min' => 12)); // WHERE id_feria > 12
	 * </code>
	 *
	 * @see       filterByFeria()
	 *
	 * @param     mixed $idFeria The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdFeria($idFeria = null, $comparison = null)
	{
		if (is_array($idFeria)) {
			$useMinMax = false;
			if (isset($idFeria['min'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_FERIA, $idFeria['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idFeria['max'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_FERIA, $idFeria['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_FERIA, $idFeria, $comparison);
	}

	/**
	 * Filter the query on the id_actividad_finalizada column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdActividadFinalizada(1234); // WHERE id_actividad_finalizada = 1234
	 * $query->filterByIdActividadFinalizada(array(12, 34)); // WHERE id_actividad_finalizada IN (12, 34)
	 * $query->filterByIdActividadFinalizada(array('min' => 12)); // WHERE id_actividad_finalizada > 12
	 * </code>
	 *
	 * @see       filterByActividadFinalizada()
	 *
	 * @param     mixed $idActividadFinalizada The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdActividadFinalizada($idActividadFinalizada = null, $comparison = null)
	{
		if (is_array($idActividadFinalizada)) {
			$useMinMax = false;
			if (isset($idActividadFinalizada['min'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $idActividadFinalizada['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idActividadFinalizada['max'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $idActividadFinalizada['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $idActividadFinalizada, $comparison);
	}

	/**
	 * Filter the query on the id_incumplimiento_actividad column
	 * 
	 * Example usage:
	 * <code>
	 * $query->filterByIdIncumplimientoActividad(1234); // WHERE id_incumplimiento_actividad = 1234
	 * $query->filterByIdIncumplimientoActividad(array(12, 34)); // WHERE id_incumplimiento_actividad IN (12, 34)
	 * $query->filterByIdIncumplimientoActividad(array('min' => 12)); // WHERE id_incumplimiento_actividad > 12
	 * </code>
	 *
	 * @see       filterByIncumplimientoActividad()
	 *
	 * @param     mixed $idIncumplimientoActividad The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIdIncumplimientoActividad($idIncumplimientoActividad = null, $comparison = null)
	{
		if (is_array($idIncumplimientoActividad)) {
			$useMinMax = false;
			if (isset($idIncumplimientoActividad['min'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_INCUMPLIMIENTO_ACTIVIDAD, $idIncumplimientoActividad['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($idIncumplimientoActividad['max'])) {
				$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_INCUMPLIMIENTO_ACTIVIDAD, $idIncumplimientoActividad['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_INCUMPLIMIENTO_ACTIVIDAD, $idIncumplimientoActividad, $comparison);
	}

	/**
	 * Filter the query by a related Actividad object
	 *
	 * @param     Actividad|PropelCollection $actividad The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByActividad($actividad, $comparison = null)
	{
		if ($actividad instanceof Actividad) {
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD, $actividad->getId(), $comparison);
		} elseif ($actividad instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD, $actividad->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByActividad() only accepts arguments of type Actividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Actividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Actividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Actividad');
		}
		
		return $this;
	}

	/**
	 * Use the Actividad relation Actividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadQuery A secondary query class using the current class as primary query
	 */
	public function useActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Actividad', 'ActividadQuery');
	}

	/**
	 * Filter the query by a related Feria object
	 *
	 * @param     Feria|PropelCollection $feria The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByFeria($feria, $comparison = null)
	{
		if ($feria instanceof Feria) {
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_FERIA, $feria->getId(), $comparison);
		} elseif ($feria instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_FERIA, $feria->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByFeria() only accepts arguments of type Feria or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the Feria relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinFeria($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('Feria');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'Feria');
		}
		
		return $this;
	}

	/**
	 * Use the Feria relation Feria object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    FeriaQuery A secondary query class using the current class as primary query
	 */
	public function useFeriaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinFeria($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'Feria', 'FeriaQuery');
	}

	/**
	 * Filter the query by a related ActividadFinalizada object
	 *
	 * @param     ActividadFinalizada|PropelCollection $actividadFinalizada The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByActividadFinalizada($actividadFinalizada, $comparison = null)
	{
		if ($actividadFinalizada instanceof ActividadFinalizada) {
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $actividadFinalizada->getId(), $comparison);
		} elseif ($actividadFinalizada instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_ACTIVIDAD_FINALIZADA, $actividadFinalizada->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByActividadFinalizada() only accepts arguments of type ActividadFinalizada or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the ActividadFinalizada relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinActividadFinalizada($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('ActividadFinalizada');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'ActividadFinalizada');
		}
		
		return $this;
	}

	/**
	 * Use the ActividadFinalizada relation ActividadFinalizada object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    ActividadFinalizadaQuery A secondary query class using the current class as primary query
	 */
	public function useActividadFinalizadaQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinActividadFinalizada($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'ActividadFinalizada', 'ActividadFinalizadaQuery');
	}

	/**
	 * Filter the query by a related IncumplimientoActividad object
	 *
	 * @param     IncumplimientoActividad|PropelCollection $incumplimientoActividad The related object(s) to use as filter
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function filterByIncumplimientoActividad($incumplimientoActividad, $comparison = null)
	{
		if ($incumplimientoActividad instanceof IncumplimientoActividad) {
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_INCUMPLIMIENTO_ACTIVIDAD, $incumplimientoActividad->getId(), $comparison);
		} elseif ($incumplimientoActividad instanceof PropelCollection) {
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
			return $this
				->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID_INCUMPLIMIENTO_ACTIVIDAD, $incumplimientoActividad->toKeyValue('PrimaryKey', 'Id'), $comparison);
		} else {
			throw new PropelException('filterByIncumplimientoActividad() only accepts arguments of type IncumplimientoActividad or PropelCollection');
		}
	}

	/**
	 * Adds a JOIN clause to the query using the IncumplimientoActividad relation
	 * 
	 * @param     string $relationAlias optional alias for the relation
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function joinIncumplimientoActividad($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		$tableMap = $this->getTableMap();
		$relationMap = $tableMap->getRelation('IncumplimientoActividad');
		
		// create a ModelJoin object for this join
		$join = new ModelJoin();
		$join->setJoinType($joinType);
		$join->setRelationMap($relationMap, $this->useAliasInSQL ? $this->getModelAlias() : null, $relationAlias);
		if ($previousJoin = $this->getPreviousJoin()) {
			$join->setPreviousJoin($previousJoin);
		}
		
		// add the ModelJoin to the current object
		if($relationAlias) {
			$this->addAlias($relationAlias, $relationMap->getRightTable()->getName());
			$this->addJoinObject($join, $relationAlias);
		} else {
			$this->addJoinObject($join, 'IncumplimientoActividad');
		}
		
		return $this;
	}

	/**
	 * Use the IncumplimientoActividad relation IncumplimientoActividad object
	 *
	 * @see       useQuery()
	 * 
	 * @param     string $relationAlias optional alias for the relation,
	 *                                   to be used as main alias in the secondary query
	 * @param     string $joinType Accepted values are null, 'left join', 'right join', 'inner join'
	 *
	 * @return    IncumplimientoActividadQuery A secondary query class using the current class as primary query
	 */
	public function useIncumplimientoActividadQuery($relationAlias = null, $joinType = Criteria::LEFT_JOIN)
	{
		return $this
			->joinIncumplimientoActividad($relationAlias, $joinType)
			->useQuery($relationAlias ? $relationAlias : 'IncumplimientoActividad', 'IncumplimientoActividadQuery');
	}

	/**
	 * Exclude object from result
	 *
	 * @param     IncumplmientoActividadFinalizada $incumplmientoActividadFinalizada Object to remove from the list of results
	 *
	 * @return    IncumplmientoActividadFinalizadaQuery The current query, for fluid interface
	 */
	public function prune($incumplmientoActividadFinalizada = null)
	{
		if ($incumplmientoActividadFinalizada) {
			$this->addUsingAlias(IncumplmientoActividadFinalizadaPeer::ID, $incumplmientoActividadFinalizada->getId(), Criteria::NOT_EQUAL);
	  }
	  
		return $this;
	}

} // BaseIncumplmientoActividadFinalizadaQuery
